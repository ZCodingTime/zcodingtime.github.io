<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/hexo-blog/2020/01/05/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/build-blog-with-hexo/"/>
      <url>/hexo-blog/2020/01/05/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/build-blog-with-hexo/</url>
      
        <content type="html"><![CDATA[<p><strong>我们无法选择生活的样子，但我们可以记下来。</strong></p><h2 id="博客的开始"><a href="#博客的开始" class="headerlink" title="博客的开始"></a>博客的开始</h2><p>其实，一切都是为了更好的装逼。好吧，我着相了。</p><p>最开始想做一个自己博客，主要是因为看到了很多人都有，觉得自己没有太 Low 了。于是申请了 CSDN 的用户，但是太丑了，于是又申请了博客园，感觉这些都不是我想要的，而做为一个 Emacser 不使用 Github 搭建一个自己的博客，感觉就已经落伍了。</p><p>于是就有这最初的一个，相当简陋的利用 Emacs 的 Org-mode 搭建的博客，后来看了 Org-page 这个包，但是，我配置不好啊！为什么为什么！</p><p>最后，从 Hugo 和 Hexo 之间，我选择了 Hexo，虽然 Hugo 在 Windows 上使用起来更方便，但是我还是觉得 Hexo 更适合我。</p><a id="more"></a><h2 id="利用-Hexo-的坑"><a href="#利用-Hexo-的坑" class="headerlink" title="利用 Hexo 的坑"></a>利用 Hexo 的坑</h2><ol><li><p>有些插件需要翻墙，有些不用，我也不记得哪个用哪个不用了，实在不行可以使用淘宝的<br>npm 源进行安装。</p></li><li><p>环境配置好之后，最好更新一下模板，把一些常用的内容写到 Hexo<br>的模板里，这样在后续的使用中，可以快速的增加标签、分类和简介等内容。</p></li><li><p>学习 Markdown , 这个并不是一个坑，而是一个忠告，作为一个常年游荡在<br>GitHub 的好同志来说，但是对于一个 Emacser 来说，我更喜欢 Org-mode<br>，但是 Org-mode 并不能直接用来发布 Hexo<br>博客，有些人会说可以利用一些工具，但是与其增加一些工具，不如学习一下<br>Markdown, 这根本用不了几分钟，虽然 Org-mode<br>很强大（忍不住安利一波），但是 Markdown<br>作为一个大众的标记语言，简单的语法还是需要我们掌握的。</p></li><li><p>记住常用的命令</p><ul><li><code>hexo new markdown_file</code> 新建文章</li><li><code>hexo new page html_file</code> 新建页面</li><li><code>hexo generate</code> 生成静态页面到 public 目录</li><li><code>hexo server</code> 开启预览访问端口，4000， <code>Ctrl+c</code> 关闭 <em>server</em></li><li><code>hexo deploy</code> 将 .deploy 目录部署到 GitHub</li></ul></li></ol><blockquote><p>这里需要配置 deploy 的项目地址并安装了 <code>hexo-deployer-git</code> 插件，才能使用这个功能</p></blockquote><ol><li><p>最后一个坑，挑选一个合适的主题，好吧，我选择了很久——大概四天吧，可能很多人能非常快的决定，但是对于我来说，把所有好看的主题都看一遍，才是我想做的事，最后我选择了 Next 主题，简单美观，还有非常齐全的配置说明</p></li><li><p>部署使用的命令有三个 <code>hexo clean</code> / <code>hexo generate</code> / <code>hexo deploy</code><br>，这三个命令之后，就可以登录你的静态博客页面去查看了。</p></li></ol><h2 id="博客的生活"><a href="#博客的生活" class="headerlink" title="博客的生活"></a>博客的生活</h2><p>我很喜欢调试自己的博客，但是写博客就不是那么喜欢了，但是我希望能养成一个定期写博客的习惯。</p><p>所以，我需要博客，主要是用来装…咳，主要是用来记录我们的生活、工作的内容，这样在下次使用的时候，就能更好的做到了。</p><h2 id="Hexo-相关安装"><a href="#Hexo-相关安装" class="headerlink" title="Hexo 相关安装"></a>Hexo 相关安装</h2><p>在几次试验之后，Node.js 环境还是使用 nvm<br>管理比较好用，下载的时候可以使用 <code>npm --registry=https://registry.npm.taobao.org install</code> 进行安装下面的模块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install -g tern</span><br><span class="line">npm install -g js-beautify</span><br><span class="line">npm install -g jshint</span><br><span class="line">npm install -g js-yaml</span><br><span class="line">npm install hexo-renderer-jade --save</span><br><span class="line">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure><h2 id="hugo"><a href="#hugo" class="headerlink" title="hugo"></a>hugo</h2><p><strong>Hugo</strong> 是由 Go 语言实现的一个 <strong>Static Site Generator</strong> 工具，特点就是快，而且默认是支持 <strong>Org mode</strong> 这种文本的。</p><p>虽然对于 <strong>hexo</strong> 而言少了许多好看的主题，但是对于 <strong>Org mode</strong> 的默认支持让我有了决心一用的冲动。</p><p>在使用了一段时间之后，发现这个工具完美的解决了我所有的问题，并能让我专心于博客写作本身而不是工具，虽然有一些不方便，但最后还是决定继续使用，而且要减少对工具本身的使用，而加强写作本身。</p><p>在长时间的使用之后，发现 <strong>Hugo</strong> 对 <strong>Org mode</strong> 的支持也比较一般，对于一些比较好用的特性，功能都不支持，最好的方案还是从 <strong>Org</strong> 转成 <strong>Markdown</strong> ，所以在最终使用 <strong>ox-hugo</strong> 工具配合 <strong>Hugo</strong> 使用，然后通过 <strong>capture</strong> 功能直接生成对应的博客文章，方便快捷。</p><h3 id="ox-hugo-配置"><a href="#ox-hugo-配置" class="headerlink" title="ox-hugo 配置"></a>ox-hugo 配置</h3><p>使用 ox-hugo 主要需要配置两个内容，一是将 <strong>ox-hugo</strong> 增加到配置中，然后是在 启动 org-capture 的时候，增加一个新的选项，可以将自动新增一篇文章。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(use-package ox-hugo</span><br><span class="line">  :after ox)</span><br><span class="line"></span><br><span class="line">(with-eval-after-load &#39;org-capture</span><br><span class="line">  (defun org-hugo-new-subtree-post-capture-template ()</span><br><span class="line">    &quot;Return &#96;org-capture&#39; template string for new Hugo post.&quot;</span><br><span class="line">    (let* ((date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)))</span><br><span class="line">           (title (read-from-minibuffer &quot;Post Title: &quot;))</span><br><span class="line">           (file-name (read-from-minibuffer &quot;File Name: &quot;))</span><br><span class="line">           (fname (org-hugo-slug file-name)))</span><br><span class="line">      (mapconcat #&#39;identity</span><br><span class="line">                 &#96;(</span><br><span class="line">                   ,(concat &quot;* TODO &quot; title)</span><br><span class="line">                   &quot;:PROPERTIES:&quot;</span><br><span class="line">                   ,(concat &quot;:EXPORT_FILE_NAME: &quot; fname)</span><br><span class="line">                   ,(concat &quot;:EXPORT_DATE: &quot; date)</span><br><span class="line">                   &quot;:END:&quot;</span><br><span class="line">                   &quot;%?\n&quot;)</span><br><span class="line">                 &quot;\n&quot;)))</span><br><span class="line"></span><br><span class="line">  (add-to-list &#39;org-capture-templates</span><br><span class="line">               &#39;(&quot;h&quot;</span><br><span class="line">                 &quot;Hugo post&quot;</span><br><span class="line">                 entry</span><br><span class="line">                 (file &quot;~&#x2F;workspace&#x2F;blog&#x2F;hugo-posts.org&quot;)</span><br><span class="line">                 (function org-hugo-new-subtree-post-capture-template))))</span><br></pre></td></tr></table></figure><p>在这里，我是将所有的文章写到对应的一个文件中，然后将文件中的所有内容生成到对应的 hugo 文件夹中。</p><p>文件头配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#+HUGO_BASE_DIR: ~&#x2F;workspace&#x2F;blog&#x2F;content&#x2F;</span><br><span class="line">#+SEQ_TODO: TODO DRAFT DONE</span><br><span class="line">#+OPTIONS: ^:&#123;&#125;</span><br></pre></td></tr></table></figure><p>然后在这个文件中使用导出的快捷键，就可以看到对应的选项了，将 <code>org-export-dispatch</code> 命令绑定到自己的快捷键上就可以看到对应的输出命令。</p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/ox-hugo-export.png" alt="ox-hugo-export"></p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hugo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书/观影清单</title>
      <link href="/hexo-blog/2020/01/04/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/book-movie-list/"/>
      <url>/hexo-blog/2020/01/04/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/book-movie-list/</url>
      
        <content type="html"><![CDATA[<h2 id="2020-年读书观影清单"><a href="#2020-年读书观影清单" class="headerlink" title="2020 年读书观影清单"></a>2020 年读书观影清单</h2><h3 id="东野圭吾小说阅读"><a href="#东野圭吾小说阅读" class="headerlink" title="东野圭吾小说阅读"></a>东野圭吾小说阅读</h3><h4 id="非系列小说"><a href="#非系列小说" class="headerlink" title="非系列小说"></a>非系列小说</h4><ul><li><input disabled="" type="checkbox"> 白夜行</li><li><input disabled="" type="checkbox"> 幻夜</li><li><input disabled="" type="checkbox"> 解忧杂货店</li><li><input disabled="" type="checkbox"> 超杀人事件</li><li><input disabled="" type="checkbox"> 彷徨之刃</li><li><input disabled="" type="checkbox"> 秘密</li><li><input disabled="" type="checkbox"> 流星之绊</li><li><input disabled="" type="checkbox"> 时生</li><li><input disabled="" type="checkbox"> 信</li><li><input checked="" disabled="" type="checkbox"> 放学后 &lt;2019-12-06 Fri&gt;</li><li><input disabled="" type="checkbox"> 单恋</li><li><input disabled="" type="checkbox"> 虚无的十字架</li><li><input disabled="" type="checkbox"> 宿命</li><li><input disabled="" type="checkbox"> 杀人之门分身</li><li><input disabled="" type="checkbox"> 导论13</li><li><input disabled="" type="checkbox"> 绑架游戏</li><li><input disabled="" type="checkbox"> 使命与魂的尽头</li><li><input disabled="" type="checkbox"> 湖边杀人案</li><li><input disabled="" type="checkbox"> 平等世界 爱情故事</li></ul><h4 id="四笑小说"><a href="#四笑小说" class="headerlink" title="四笑小说"></a>四笑小说</h4><ul><li><input disabled="" type="checkbox"> 怪笑小说</li><li><input disabled="" type="checkbox"> 毒笑小说</li><li><input disabled="" type="checkbox"> 黑笑小说</li><li><input disabled="" type="checkbox"> 歪笑小说</li></ul><h4 id="滑雪场系列"><a href="#滑雪场系列" class="headerlink" title="滑雪场系列"></a>滑雪场系列</h4><ul><li><input checked="" disabled="" type="checkbox"> 疾风回旋曲 &lt;2017-11-24 Fri&gt; 2.0</li><li><input disabled="" type="checkbox"> 风雪追击</li></ul><h4 id="加贺一郎系列"><a href="#加贺一郎系列" class="headerlink" title="加贺一郎系列"></a>加贺一郎系列</h4><ul><li><input checked="" disabled="" type="checkbox"> 毕业 &lt;2019-12-14 Sat&gt;</li><li><input checked="" disabled="" type="checkbox"> 沉睡的森林 &lt;2019-12-16 Mon&gt;</li><li><input checked="" disabled="" type="checkbox"> 谁杀了她 &lt;2019-12-17 Tue&gt;</li><li><input checked="" disabled="" type="checkbox"> 恶意 &lt;2019-12-18 Wed&gt;</li><li><input checked="" disabled="" type="checkbox"> 我杀了他 &lt;2019-12-22 Sun&gt;</li><li><input checked="" disabled="" type="checkbox"> 只差一个谎言 &lt;2019-12-29 Sun&gt;</li><li><input checked="" disabled="" type="checkbox"> 红手指 &lt;2019-12-31 Tue&gt;</li><li><input checked="" disabled="" type="checkbox"> 新参者 &lt;2020-01-02 Thu&gt;</li><li><input checked="" disabled="" type="checkbox"> 麒麟之翼 &lt;2020-01-03 Fri&gt;</li><li><input checked="" disabled="" type="checkbox"> 祈祷落幕时 &lt;2019-12-12 Thu&gt;</li></ul><h4 id="神探伽利略系列"><a href="#神探伽利略系列" class="headerlink" title="神探伽利略系列"></a>神探伽利略系列</h4><ul><li><input disabled="" type="checkbox"> 侦探伽利略</li><li><input disabled="" type="checkbox"> 预知梦</li><li><input checked="" disabled="" type="checkbox"> 嫌疑人 x 的献身 &lt;2019-12-09 Mon&gt;</li><li><input disabled="" type="checkbox"> 圣女的救济</li><li><input disabled="" type="checkbox"> 伽利略的苦恼</li><li><input disabled="" type="checkbox"> 盛夏的方程式</li><li><input disabled="" type="checkbox"> 虚像小丑</li><li><input disabled="" type="checkbox"> 禁忌魔术</li></ul><h3 id="其它推理小说"><a href="#其它推理小说" class="headerlink" title="其它推理小说"></a>其它推理小说</h3><ul><li><input disabled="" type="checkbox"> 罗杰疑案</li><li><input disabled="" type="checkbox"> 东方快车谋杀案</li><li><input disabled="" type="checkbox"> 无人生还</li><li><input disabled="" type="checkbox"> 啤酒谋杀案</li><li><input disabled="" type="checkbox"> ABC 杀人案</li><li><input disabled="" type="checkbox"> 福尔摩斯探案全集</li><li><input disabled="" type="checkbox"> 消失的爱人</li><li><input disabled="" type="checkbox"> 告白</li><li><input disabled="" type="checkbox"> 逻辑王子的演绎</li><li><input disabled="" type="checkbox"> 化工女王的逆袭</li><li><input disabled="" type="checkbox"> 物理教师时空诡计</li><li><input disabled="" type="checkbox"> 代上帝之手</li><li><input disabled="" type="checkbox"> 无证之罪</li><li><input disabled="" type="checkbox"> 坏小孩</li><li><input disabled="" type="checkbox"> 长夜难明</li><li><input disabled="" type="checkbox"> 络新妇之理</li><li><input disabled="" type="checkbox"> 姑获鸟之夏</li><li><input disabled="" type="checkbox"> 福尔摩斯探案集</li><li><input disabled="" type="checkbox"> 占星术杀人魔法</li><li><input disabled="" type="checkbox"> 死了七次的男人</li><li><input disabled="" type="checkbox"> 一桩事先张扬的凶杀案</li><li><input disabled="" type="checkbox"> 半落</li><li><input disabled="" type="checkbox"> 别相信任何人</li><li><input disabled="" type="checkbox"> 护士学院杀人事件</li><li><input disabled="" type="checkbox"> 所罗门的伪证</li><li><input disabled="" type="checkbox"> 达芬奇密码</li><li><input disabled="" type="checkbox"> 金色梦乡</li><li><input disabled="" type="checkbox"> 余生皆假期</li><li><input disabled="" type="checkbox"> 铁鼠之槛</li><li><input disabled="" type="checkbox"> 罗杰疑案</li><li><input disabled="" type="checkbox"> 尼罗河上的惨案</li><li><input disabled="" type="checkbox"> 十角馆事件</li><li><input disabled="" type="checkbox"> 一朵桔梗花</li><li><input disabled="" type="checkbox"> 夏与冬的奏鸣曲</li><li><input disabled="" type="checkbox"> 异邦骑士</li><li><input disabled="" type="checkbox"> 七个证人</li></ul><h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h3><ul><li><input disabled="" type="checkbox"> 控方证人</li><li><input disabled="" type="checkbox"> 消失的爱人</li><li><input disabled="" type="checkbox"> 彗星来的那一夜</li><li><input disabled="" type="checkbox"> 穆赫兰道</li><li><input disabled="" type="checkbox"> 搏击俱乐部</li><li><input disabled="" type="checkbox"> 东方快车谋杀案</li><li><input disabled="" type="checkbox"> 致命ID</li><li><input disabled="" type="checkbox"> 七宗罪</li><li><input checked="" disabled="" type="checkbox"> 天使与魔鬼 &lt;2020-01-05 Sun&gt;</li><li><input checked="" disabled="" type="checkbox"> 达芬奇密码 &lt;2020-01-05 Sun&gt;</li></ul><h3 id="连续剧"><a href="#连续剧" class="headerlink" title="连续剧"></a>连续剧</h3><ul><li><input checked="" disabled="" type="checkbox"> 神探伽利略 &lt;2020-01-04 Sat&gt;</li><li><input disabled="" type="checkbox"> 犯罪心理2</li><li><input disabled="" type="checkbox"> 犯罪心理3</li><li><input disabled="" type="checkbox"> 犯罪心理4</li><li><input disabled="" type="checkbox"> 犯罪心理5</li><li><input disabled="" type="checkbox"> 犯罪心理6</li><li><input disabled="" type="checkbox"> 犯罪心理7</li><li><input disabled="" type="checkbox"> 犯罪心理8</li><li><input disabled="" type="checkbox"> 不死法医</li><li><input disabled="" type="checkbox"> 劳拉之谜</li><li><input disabled="" type="checkbox"> 大小谎言</li><li><input disabled="" type="checkbox"> Lie to me</li><li><input disabled="" type="checkbox"> 神探夏洛克</li><li><input disabled="" type="checkbox"> 布雷德利夫人探案</li><li><input disabled="" type="checkbox"> 骇人命案事件簿</li><li><input disabled="" type="checkbox"> 无妄之灾</li><li><input disabled="" type="checkbox"> 我的恐怖妻子</li></ul><h2 id="2019-年读书观影清单"><a href="#2019-年读书观影清单" class="headerlink" title="2019 年读书观影清单"></a>2019 年读书观影清单</h2><h3 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h3><ul><li><input checked="" disabled="" type="checkbox"> 尸语者</li><li><input checked="" disabled="" type="checkbox"> 无声的证词</li><li><input checked="" disabled="" type="checkbox"> 十一根手指</li><li><input checked="" disabled="" type="checkbox"> 清道夫</li><li><input checked="" disabled="" type="checkbox"> 幸存者</li><li><input checked="" disabled="" type="checkbox"> 偷窥者</li><li><input checked="" disabled="" type="checkbox"> 天谴者</li><li><input checked="" disabled="" type="checkbox"> 大唐狄公案 一</li><li><input checked="" disabled="" type="checkbox"> 大唐狄公案 二</li><li><input checked="" disabled="" type="checkbox"> 大唐狄公案 三</li><li><input checked="" disabled="" type="checkbox"> 大唐狄公案 四</li><li><input checked="" disabled="" type="checkbox"> 大唐狄公案 五</li><li><input checked="" disabled="" type="checkbox"> 大唐狄公案 六</li><li><input checked="" disabled="" type="checkbox"> 心理罪系列</li></ul><h3 id="电影-1"><a href="#电影-1" class="headerlink" title="电影"></a>电影</h3><ul><li><input checked="" disabled="" type="checkbox"> 惊奇队长</li><li><input checked="" disabled="" type="checkbox"> 复仇者联盟 4</li><li><input checked="" disabled="" type="checkbox"> 惊声尖笑 1</li><li><input checked="" disabled="" type="checkbox"> 惊声尖笑 2</li><li><input checked="" disabled="" type="checkbox"> 惊声尖笑 3</li><li><input checked="" disabled="" type="checkbox"> 惊声尖笑 4</li><li><input checked="" disabled="" type="checkbox"> x 战警：黑凤凰</li><li><input checked="" disabled="" type="checkbox"> 黑衣人：全球追缉</li><li><input checked="" disabled="" type="checkbox"> 蜘蛛侠：英雄远征</li><li><input checked="" disabled="" type="checkbox"> 看不见的客人</li><li><input checked="" disabled="" type="checkbox"> 深夜食堂 &lt;2019-10-04 Fri&gt;</li><li><input checked="" disabled="" type="checkbox"> 大侦探皮卡丘 &lt;2019-10-05 Sat&gt;</li><li><input checked="" disabled="" type="checkbox"> 超能陆战队 &lt;2019-10-06 Sun&gt;</li><li><input checked="" disabled="" type="checkbox"> 沉默的证人 &lt;2019-10-10 Thu&gt;</li></ul><h3 id="连续剧-1"><a href="#连续剧-1" class="headerlink" title="连续剧"></a>连续剧</h3><ul><li><input checked="" disabled="" type="checkbox"> 东宫</li><li><input checked="" disabled="" type="checkbox"> 知否知否应是绿肥红瘦</li><li><input checked="" disabled="" type="checkbox"> 犯罪心理1</li><li><input checked="" disabled="" type="checkbox"> 无人生还</li><li><input checked="" disabled="" type="checkbox"> 心理法医</li></ul><h2 id="专题电影记录"><a href="#专题电影记录" class="headerlink" title="专题电影记录"></a>专题电影记录</h2><h3 id="漫威系列"><a href="#漫威系列" class="headerlink" title="漫威系列"></a>漫威系列</h3><ul><li><input checked="" disabled="" type="checkbox"> 《钢铁侠》</li><li><input checked="" disabled="" type="checkbox"> 《钢铁侠》</li><li><input checked="" disabled="" type="checkbox"> 《无敌浩克》</li><li><input checked="" disabled="" type="checkbox"> 《钢铁侠2》</li><li><input checked="" disabled="" type="checkbox"> 《雷神》</li><li><input checked="" disabled="" type="checkbox"> 《美国队长》</li><li><input checked="" disabled="" type="checkbox"> 《复仇者联盟》</li><li><input checked="" disabled="" type="checkbox"> 《钢铁侠3》</li><li><input checked="" disabled="" type="checkbox"> 《雷神2》</li><li><input checked="" disabled="" type="checkbox"> 《美国队长2》</li><li><input checked="" disabled="" type="checkbox"> 《银河护卫队》</li><li><input checked="" disabled="" type="checkbox"> 《复仇者联盟2》</li><li><input checked="" disabled="" type="checkbox"> 《蚊人》</li><li><input checked="" disabled="" type="checkbox"> 《美国队长3》</li><li><input checked="" disabled="" type="checkbox"> 《奇异博士》</li><li><input checked="" disabled="" type="checkbox"> 《银河护卫队2》</li><li><input checked="" disabled="" type="checkbox"> 《蜘蛛侠》</li><li><input checked="" disabled="" type="checkbox"> 《雷神3》</li><li><input checked="" disabled="" type="checkbox"> 《黑豹》</li><li><input checked="" disabled="" type="checkbox"> 《复仇者联盟3》</li><li><input checked="" disabled="" type="checkbox"> 《死待》</li><li><input checked="" disabled="" type="checkbox"> 《死待2》</li><li><input checked="" disabled="" type="checkbox"> 《蜘蛛侠-英雄归来》 『2017-9-15』</li><li><input checked="" disabled="" type="checkbox"> 《复仇者联盟3:无限战争》『2018-5-13』</li><li><input checked="" disabled="" type="checkbox"> 《蚁人2:黄蜂女现身》『2018-8-24』</li><li><input checked="" disabled="" type="checkbox"> 《毒液:致命守护者》『2018-11-11』</li><li><input checked="" disabled="" type="checkbox"> 《蜘蛛侠》</li><li><input checked="" disabled="" type="checkbox"> 《蜘蛛侠2》</li><li><input checked="" disabled="" type="checkbox"> 《蜘蛛侠3》</li></ul><h3 id="DC-影业"><a href="#DC-影业" class="headerlink" title="DC 影业"></a>DC 影业</h3><ul><li><input checked="" disabled="" type="checkbox"> 《正义联盟》『2017-11-22』</li><li><input checked="" disabled="" type="checkbox"> 《海王》『2018-12-09』</li></ul><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul><li><input checked="" disabled="" type="checkbox"> 《神奇动物在哪里：格林德沃之罪》『2018-11-24』</li><li><input checked="" disabled="" type="checkbox"> 《你的名字》『2017-11-20』</li><li><input checked="" disabled="" type="checkbox"> 《银魂》『2017-9-1』</li><li><input checked="" disabled="" type="checkbox"> 《疯狂动物城》</li><li><input checked="" disabled="" type="checkbox"> 《看不见的客人》 『2017-9-17』</li><li><input checked="" disabled="" type="checkbox"> 《天才枪手》</li><li><input checked="" disabled="" type="checkbox"> 《环太平洋 雷霆再起》『2018-6-24』</li><li><input checked="" disabled="" type="checkbox"> 《神探》『2018-5-25』</li><li><input checked="" disabled="" type="checkbox"> 《古墓丽影 缘起之战》『2018-6-27』</li><li><input checked="" disabled="" type="checkbox"> 《玛丽与魔女之花》 『2018-6-28』</li><li><input checked="" disabled="" type="checkbox"> 《泄密者》『2018-7-19』</li><li><input checked="" disabled="" type="checkbox"> 《唐人街探案2》『2018-2-22』</li><li><input checked="" disabled="" type="checkbox"> 《无双》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
          <category> 年度清单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书清单 </tag>
            
            <tag> 电影清单 </tag>
            
            <tag> 电视清单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valine 评论使用报错 504</title>
      <link href="/hexo-blog/2019/12/19/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/valine-504-error/"/>
      <url>/hexo-blog/2019/12/19/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/valine-504-error/</url>
      
        <content type="html"><![CDATA[<p>最近准备重新配置一下 <a href="https://www.zucchiniy.cn">个人博客</a> ，由原来的 <a href="https://gohugo.io/" target="_blank" rel="noopener">Hugo</a> 改到 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 来做。</p><p>评论系统也由之前的 <a href="https://disqus.com/" target="_blank" rel="noopener">disqus</a> 改成现在的 <a href="https://valine.js.org/" target="_blank" rel="noopener">valine</a> 。</p><p>主题也使用了非常好看的 Material Design 的样式的 <a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">Material-x</a> ，并在此之上进行修改。</p><p>完成初始的配置之后，做一下测试。</p><p>恩。。。报错了？！</p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/valine-504-error-1.png" alt="Code 504: The app is archived, please restore in console before use."></p><a id="more"></a><p>虽然报错，但是可以正确的显示对应的服务，查询了一下原因，发现是因为长时间未使用 LeanCode 的服务，导致文件上传域名无法访问了，需要在 <strong>设置-&gt;应用 Keys</strong> 下面，选择重启 <strong>文件上传域名</strong> 和 <strong>文件访问域名</strong> 的服务即可。</p><p>具体的位置如下：</p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/valine-504-error-2.png" class="" width="300" height="150" title="valine-504-error-2">]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> valine </tag>
            
            <tag> Code 504 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Python 生成数据透视表</title>
      <link href="/hexo-blog/2019/08/09/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/python-process-excel/"/>
      <url>/hexo-blog/2019/08/09/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/python-process-excel/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>利用 <code>read_excel()</code> 的 <em>usecols</em> 参数来指定表的某一列，以方便排除不必要的干扰列</li><li>养成数据加载以后，使用 <code>head()</code> 进行预览的习惯</li><li>养成使用 <code>shape()</code> 及 <code>info()</code> 了解表格基本情况的习惯</li></ul><p>利用 <code>info()</code> 方法查看数据中是否有空值，如果有空值的话，则可以使用 <code>dropna()</code> 方法将其移除。</p><p>需要掌握的主要有两个方法:</p><ul><li><code>DataFrame.insert()</code> 方法，用来增加对应的列</li><li><code>DataFrame.pivot_table()</code> 产生透视图，展示重要的数据</li></ul><a id="more"></a><h2 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h2><ul><li><code>DataFrame.insert(self, loc, column, value, allow_duplicates=False)</code></li></ul><p>loc : int 表示第几列；0 &lt;= loc &lt;= len(columns)<br>column : string, number, or hashable object;给插入的列取名，如 column=’新的一列’<br>value : int ，array，series<br>allow_duplicates : bool 是否允许列名重复，选择 True 表示允许新的列名与已存在的列名重复。</p><ul><li><code>DataFrame.pivot_table(self, values=None, index=None, columns=None, aggfunc=&#39;mean&#39;, fill_value=None, margins=False, dropna=True, margins_name=&#39;All&#39;, observed=False)</code></li></ul><p>values : 要进行透视展示的数据<br>index : 需要重新进行展示成列，是原始数据中的某一个行<br>columns : 要重新展示为行的内容，是原来的列或者是其它的属性，可以是列表<br>aggfunc : 要进行统计的行，可以是 <code>numpy.sum</code> / <code>numpy.mean</code> 等，也可以按列进行统计 <code>aggfunc={&#39;c1&#39; : numpy.mean, &#39;c2&#39; : numpy.sum}</code><br>fill_value : 将缺失值替换的值，幽灵将 Nan 换成 0 : <code>fill_value=0</code><br>margins : bool, 增加行或者列的汇总信息<br>dropna : bool ，是否要删除为空的信息<br>margin_name : string , 默认为 all ，或者自定义一个名称 observed bool , True 显示分类中的数据，False 显示所有数据，默认为 False</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">data = pd.read_excel(<span class="string">r'python_learning.xlsx'</span>,</span><br><span class="line">                     usecols=[<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>], sheet_name=<span class="string">'sheetName'</span>)</span><br><span class="line">data = data[data[<span class="string">'合同生效日'</span>] &gt; datetime(<span class="number">2018</span>, <span class="number">12</span>, <span class="number">31</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按逻辑，将一组数据拆成三组</span></span><br><span class="line">data1 = data[[<span class="string">"used"</span>, <span class="string">"loan amount"</span>, <span class="string">"company1"</span>, <span class="string">"percent1"</span>]]</span><br><span class="line">data2 = data[[<span class="string">"used"</span>, <span class="string">"loan amount"</span>, <span class="string">"company2"</span>, <span class="string">"percent2"</span>]]</span><br><span class="line">data3 = data[[<span class="string">"used"</span>, <span class="string">"loan amount"</span>, <span class="string">"company3"</span>, <span class="string">"percent3"</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将三组内容，重新命名之后合成一个新表</span></span><br><span class="line">data1 = data1.rename(columns=&#123;<span class="string">"company1"</span>: <span class="string">"company"</span>, <span class="string">"percent1"</span>: <span class="string">"percent"</span>&#125;)</span><br><span class="line">data2 = data2.rename(columns=&#123;<span class="string">"company2"</span>: <span class="string">"company"</span>, <span class="string">"percent2"</span>: <span class="string">"percent"</span>&#125;)</span><br><span class="line">data3 = data3.rename(columns=&#123;<span class="string">"company3"</span>: <span class="string">"company"</span>, <span class="string">"percent3"</span>: <span class="string">"percent"</span>&#125;)</span><br><span class="line"></span><br><span class="line">data4 = pd.concat([data1, data2, data3], ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据中的空值清除</span></span><br><span class="line">data4 = data4.dropna()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入新的数据</span></span><br><span class="line"><span class="comment"># 1. insert() 方法</span></span><br><span class="line">data4.insert(<span class="number">2</span>, <span class="string">"devide percent"</span>, data4[<span class="string">"percent"</span>]/<span class="number">100</span>)</span><br><span class="line">data4.insert(<span class="number">5</span>, <span class="string">"devide amount"</span>, data4[<span class="string">"loan amount"</span>]*data4[<span class="string">"deivide percent"</span>]/<span class="number">10000</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通索引方式插入</span></span><br><span class="line"><span class="comment"># data4["loan divide amount"] = data4["load amount"]*data4["deivide percent"]/10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加数据透视</span></span><br><span class="line">data5 = data4[[<span class="string">'company'</span>, <span class="string">'used'</span>, <span class="string">'loan amount'</span>]]</span><br><span class="line">data6 = pd.pivot_table(data5, values=<span class="string">"loan divide amount"</span>, columns=<span class="string">"used"</span>, index=<span class="string">"company"</span>,</span><br><span class="line">                       aggfunc=<span class="string">'sum'</span>, fill_value=<span class="number">0</span>, observed=<span class="literal">False</span>).reset_index()</span><br><span class="line">print(data6.head())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 透视表 </tag>
            
            <tag> read_excel() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs Keymap 优先级</title>
      <link href="/hexo-blog/2019/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-keymap-priority/"/>
      <url>/hexo-blog/2019/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-keymap-priority/</url>
      
        <content type="html"><![CDATA[<p>编写 Emacs 的配置文件，无论如何也不能绕开快捷键，对于快捷键一般都是 <code>define-key</code> 方法来实现按键绑定，但是对于不同的 <strong>keymap</strong> 拥有不同的优先级，通过 <strong>keymap</strong> 优先级，可以了解到快捷键间的覆盖关系。</p><p><code>key-translation-map</code> : 最高级，就是把这个键的意义改变了，想使用原来的快捷键，要重新进行绑定</p><p><code>minor-mode-map</code> : 二级，只在 <strong>minor mode</strong> 激活时启作用，其它时候会被其它的快捷键覆盖掉</p><p><code>local-set-key</code> : 三级，在 <strong>major mode</strong> 中启作用</p><p><code>global-set-key</code> : 最弱的级别，但是也是最简单的键绑定方式</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keymap </tag>
            
            <tag> keybinds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>brew 不常用命令</title>
      <link href="/hexo-blog/2019/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/brew-unused-command/"/>
      <url>/hexo-blog/2019/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/brew-unused-command/</url>
      
        <content type="html"><![CDATA[<p><code>brew services</code> 命令是用来管理 Mac 系统中后台服务的，比如在 Mac 上安装了 MySQL ，当我希望将这个变成一个后台服务启动的时候，可以使用，有点像 Linux 下的 <code>service</code> 和 <code>systemctl</code> 两个命令。</p><a id="more"></a><p>具体的使用命令也非常简单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew services list  # 查看使用brew安装的服务列表</span><br><span class="line">brew services run formula|--all  # 启动服务（仅启动不注册）</span><br><span class="line">brew services start formula|--all  # 启动服务，并注册</span><br><span class="line">brew services stop formula|--all   # 停止服务，并取消注册</span><br><span class="line">brew services restart formula|--all  # 重启服务，并注册</span><br><span class="line">brew services cleanup  # 清除已卸载应用的无用的配置</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> brew </tag>
            
            <tag> 服务列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 中辅助键设置</title>
      <link href="/hexo-blog/2019/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-hyper-keybinds/"/>
      <url>/hexo-blog/2019/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-hyper-keybinds/</url>
      
        <content type="html"><![CDATA[<p>使用 Emacs 的人，一般都对快捷键的前缀 <em>C</em> 和 <em>M</em> 键不陌生，但其实在 Emacs 中，除了常见的 <em>C</em> 和 <em>M</em> 之外，还有 <em>s</em> 和 <em>H</em> 两个辅助键，但是在不同的操作系统中，辅助键的设置方法也是不一样的，但是我们可以通过在 <code>init.el</code> 文件中设置键位来保证快捷键的一致。</p><ul><li>在 windows 系统下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(setq w32-pass-lwindow-to-system nil)</span><br><span class="line">(setq w32-lwindow-modifier &#39;super) ; Left Windows key</span><br><span class="line"></span><br><span class="line">(setq w32-pass-rwindow-to-system nil)</span><br><span class="line">(setq w32-rwindow-modifier &#39;super) ; Right Windows key</span><br><span class="line"></span><br><span class="line">(setq w32-pass-apps-to-system nil)</span><br><span class="line">(setq w32-apps-modifier &#39;hyper) ; Menu&#x2F;App key</span><br></pre></td></tr></table></figure><ul><li>在 Mac 系统下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(setq mac-command-modifier &#39;meta) ; make cmd key do Meta</span><br><span class="line">(setq mac-option-modifier &#39;super) ; make opt key do Super</span><br><span class="line">(setq mac-control-modifier &#39;control) ; make Control key do Control</span><br><span class="line">(setq ns-function-modifier &#39;hyper)  ; make Fn key do Hyper</span><br></pre></td></tr></table></figure><a id="more"></a><p>在如此配置之后，绑定快捷键过程中，super 对应的是 <em>s</em> 前缀，hyper 对应的是 <em>H</em> 的前缀。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(global-set-key (kbd &quot;H-b&quot;) &#39;backward-word) ; 绑定的 Hyper 键</span><br><span class="line">(global-set-key (kbd &quot;s-b&quot;) &#39;backward-word) ; 绑定的 super 键</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keymap </tag>
            
            <tag> super </tag>
            
            <tag> hyper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 电脑上使用 Emacs</title>
      <link href="/hexo-blog/2019/07/29/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-in-mac/"/>
      <url>/hexo-blog/2019/07/29/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-in-mac/</url>
      
        <content type="html"><![CDATA[<p>在 Mac 上使用 Emacs 有两个方案，从 <a href="https://emacsformacosx.com/" target="_blank" rel="noopener">Emacs For Mac OS X</a> 手工下载，然后更新本地，或者是在 <strong>homebrew</strong> 中增加配置，然后利用 <code>brew upgrade</code> 从 <a href="https://github.com/railwaycat/homebrew-emacsmacport" target="_blank" rel="noopener">homebrw-emacsmacport</a> 上进行下载和更新。</p><p>两种方式获取的 Emacs 有少许不同，具体的见两个项目的简介。</p><p>第二种方法的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap railwaycat/emacsmacport</span><br><span class="line">brew install emacs-mac</span><br></pre></td></tr></table></figure><p>安装之后，如果要从启动台启动应用，需要在 <em>/applications</em> 和安装位置增加软链接，命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/opt/emacs-mac/Emacs.app/Applications</span><br></pre></td></tr></table></figure><p>这样之后就可以直接在 <strong>Alfred</strong> 中输入 <code>emacs</code> 直接启动。</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> install Emacs </tag>
            
            <tag> Mac OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现自己的子弹笔记</title>
      <link href="/hexo-blog/2019/07/18/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/bullet-journal-for-myself/"/>
      <url>/hexo-blog/2019/07/18/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/bullet-journal-for-myself/</url>
      
        <content type="html"><![CDATA[<p>已经坚持记笔记和做手帐有大概 2 年的时间了，从最开始的只是记，到后来的坚持用手帐进行时间管理，让我获益良多，从最开始的记到后来的边记边思考，到再后来的不停的换手帐的内容，随着改变，也越来越习惯于手帐本身。</p><p>最近买了一本 <strong>《子弹笔记》</strong> 一直在阅读和学习其中的方法，确实比自己的要谘和有用，但是简单的照搬却又不太习惯，所以想整理一下其中有用的思想，然后进行个性化。</p><p>子弹笔记官方网站：<a href="https://bulletjournal.com/" target="_blank" rel="noopener">https://bulletjournal.com/</a></p><h2 id="思想清单"><a href="#思想清单" class="headerlink" title="思想清单"></a>思想清单</h2><ol><li>第一栏列出所有的 <strong>正在</strong> 做的事情</li><li>第二栏列出所有的 <strong>应该</strong> 做的事情</li><li>第三栏列出所有的 <strong>你想</strong> 做的事情</li></ol><h3 id="回顾思想清单"><a href="#回顾思想清单" class="headerlink" title="回顾思想清单"></a>回顾思想清单</h3><ol><li>画去不要紧的，或者不重要的内容</li><li>找出相关的内容，创建个性化的集子</li></ol><h3 id="迁移思想清单"><a href="#迁移思想清单" class="headerlink" title="迁移思想清单"></a>迁移思想清单</h3><ul><li>把未来事项移入未来记录</li><li>把当月事项移行进月度记录</li><li>为月度记录排列主次</li><li>把优先事项迁移进每日记录</li><li>把附加事项迁移进对应的修改化集子</li></ul><h2 id="关键内容"><a href="#关键内容" class="headerlink" title="关键内容"></a>关键内容</h2><p>索引 : 利用标题和页码定位笔记的内容，而索引无需连续；专用索引与集子类似，提供特定的主题的索引</p><p>未来记录 : 用来记录本月以外的任务和事件</p><p>月度记录 : 用于一览本月的时间安排和任务。也可以作为你本月的思想清单</p><p>每日记录 : 用于快速记录下每一天里所有的想法</p><p>快速记录 : 利用简短的符号快速捕捉想法，分成笔记、事件、任务三类，并排序。</p><p>集子 : 笔记中模块化的构成部分，用于储存紧密相关的内容。核心领子有索引、未来记录、月度记录、每日记录，但也支持个性化设计。</p><p>迁移 : 每月从笔记本中过滤掉的无意义的内容的过程</p><p>快速记录中，任务、事件、笔记三种的意义：</p><p>任务 : <strong>需要</strong> 做的事情，用 “.” 标记，同样的，迁移任务使用 “&gt;” 标记，计划中的任务用 “&lt;” 标记，移除的任务用 <del>删除线</del> 表示</p><p>事件 : <strong>经历</strong> 过的事情，用 “o” 标记</p><p>笔记 : <strong>不想遗忘</strong> 的事情，用 “-” 标记</p><p>特殊的一些标记，比如重点任务、灵感、长笔记</p><p>重点任务 : 在任务前加 “*”</p><p>灵感 : 在任务前增加 “!”</p><p>长笔记 : 有特殊的想法或者想额外的记录一些内容，使用 “+” 标记</p><h3 id="日历页"><a href="#日历页" class="headerlink" title="日历页"></a>日历页</h3><p>在日历页上，左侧按顺序列出日期，并在日期右侧附上星期，在左侧留出空白空间，以便后续增加特殊符号。</p><h3 id="任务页"><a href="#任务页" class="headerlink" title="任务页"></a>任务页</h3><p>月度记录中的任务页是不断的更新的思想清单，如果有最终的时候，可以未完成的时候进行迁移，也可以调整日期。</p><h3 id="未来记录"><a href="#未来记录" class="headerlink" title="未来记录"></a>未来记录</h3><p>未来记录主要是将本月无法完成的项目，提前写入到未来日记中，或者是读书、学习的特殊记划，这样在月度记录的时候，就能很好的规划我们的生活。</p><h3 id="引线法"><a href="#引线法" class="headerlink" title="引线法"></a>引线法</h3><p>索引有时候页码不连续，但是使用过程中，又不想过多翻回到索引页观看，可以使用引线法，比如在第二块的初始页面中，可以使用 <strong>“当前页码/前一部分页码”</strong> 的形式进行记录，而同理，结束部分则使用 <strong>“后一部分页码/当前页码”</strong> ，这种方式可以扩展到不同的本子中，比如使用 <strong>“第几册.第多少页”</strong> 这种形式记录。</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><h3 id="旅行计划"><a href="#旅行计划" class="headerlink" title="旅行计划"></a>旅行计划</h3><p>描述 : 包括要去什么地方，要做什么，和谁一起去，是旅行还是休闲</p><p>目的地 : 记录了这次要去的地方，包括景点、住宿等</p><p>活动 : 想做什么？旅伴想做什么？</p><p>时间 : 航班时间、当地交通、活动的时间等</p><p>预算 : 机票、租车、住宿、汽油、伙食、活动、购物、礼品</p><h3 id="行程计划"><a href="#行程计划" class="headerlink" title="行程计划"></a>行程计划</h3><p>要记录我们出行过程中的事情，比如从哪儿飞到哪儿，怎么入住，有什么特殊的事件吗，等等问题，可以按地点进行记录。</p><ul><li>第一栏记录机场，包含对应的事件的页码</li><li>第二栏记录时间，包括星期和日期</li><li>第三栏记录时间轴上的任务，比如入住酒店、退房、飞住什么地方、要做事情，可以有效的进行规划</li></ul><h2 id="个性化调整"><a href="#个性化调整" class="headerlink" title="个性化调整"></a>个性化调整</h2><h3 id="长笔记"><a href="#长笔记" class="headerlink" title="长笔记"></a>长笔记</h3><p>长笔记可以记录某一件事情的后续，或者是有什么想法，为什么有这个想法，或者是与人发生了什么样的交流，甚至是思考了什么问题，或者是对某件事的感想，这些可以培养记录的好习惯。</p><h3 id="习惯养成"><a href="#习惯养成" class="headerlink" title="习惯养成"></a>习惯养成</h3><p>这个是与月历相关，可以在页面上记录一个月的习惯养成情况，与日历上的日期一一对应，比如坚持运动、阅读等事情，或者是增加一些希望养成的习惯。</p><p>针对阅读，可以设定为阅读某一本书，或者是阅读多少时间，这样可以让任务更具体，而越是具体的任务，越容易完成。</p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
          <category> 手帐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 子弹笔记 </tag>
            
            <tag> 手帐体系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 刷机实践</title>
      <link href="/hexo-blog/2019/04/10/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/android-flashboot/"/>
      <url>/hexo-blog/2019/04/10/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/android-flashboot/</url>
      
        <content type="html"><![CDATA[<h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><p>#在刷机之前，需要在电脑上下载 <strong>Android Preview</strong> 包，一般我都是到<a href="https://developer.android.google.cn/preview/download#flash" target="_blank" rel="noopener">安卓中国</a> ，这里可以下载最新的包。</p><h2 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h2><p>相对下载包的获取，比较难的是有一部支持最新的安卓系统的手机，一般 <strong>Preview</strong> 版的系统都是默认支持 <strong>Google</strong> 自己的手机的。</p><p>目前只支持 Pixel 系列的手机，包括 XL 系列。</p><ul><li>Pixel n</li><li>Pixel n XL</li></ul><a id="more"></a><h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><p>刷机目前有两个比较麻烦的地方，第一就是需要安装 <code>adb</code> 的命令，也就是 <strong>Android</strong> 的功能模块，第二就是需要解锁手机。</p><h3 id="adb-配置"><a href="#adb-配置" class="headerlink" title="adb 配置"></a>adb 配置</h3><p>即将 <strong>Android SDK</strong> 下载下来，然后将其配置到环境变量中即可</p><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><ol><li>配置 <strong>ANDROID_HOME</strong> 变量到环境变量中</li><li>配置 <strong>%ANDROID_HOME%\platform-tools</strong> 到 <strong>path</strong> 中</li><li>配置 <strong>%ANDROID_HOME%\tools</strong> 到 <strong>path</strong> 中</li></ol><h4 id="Linux-amp-Mac"><a href="#Linux-amp-Mac" class="headerlink" title="Linux &amp; Mac"></a>Linux &amp; Mac</h4><p>打开 <strong>profile</strong> 文件，默认为 <em>.bash_profile</em> 如果使用的是 <strong>zsh</strong> 则编辑 <em>.zshrc</em> 文件。</p><p>将下面的内容放到 <strong>profile</strong> 文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ANDROID_HOME=~/developerTools/adt-mac/sdk</span><br><span class="line">export ANDROID_HOME</span><br><span class="line">PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</span><br></pre></td></tr></table></figure><h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><p>Mac 电脑提供了一个自动安装的内容，可以将 <code>adb</code> 相关的内容直接安装，但是如果是想开发 <strong>Android</strong> 应用的话，则必须要按上面的方案进行配置。</p><p>首先需要先安装 <strong>brew</strong> ，具体方案见 <a href="https://brew.sh/index%5Fzh-cn" target="_blank" rel="noopener">Homebrew</a> ，或者可以直接看其 <strong>GitHub</strong> 的主页 <a href="https://github.com/Homebrew/brew" target="_blank" rel="noopener">Homebrew/brew</a> 。</p><p>然后执行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install android-platform-tools</span><br></pre></td></tr></table></figure><p>如果执行刷机的时候，提示 <strong>fastboot is too old</strong> 则需要重新安装 <em>android-platform-tools</em> , 因为 <code>brew update</code> 更新是不能更新 <em>cask</em> 库的内容的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask reinstall android-platform-tools</span><br></pre></td></tr></table></figure><p>最后，在命令行中执行 <code>adb devices</code> 不报错刚配置成功。如果配置之后，还依然报错的话，可以检查一下是否在使用过程中，将 <strong>USB 调试功能</strong> 关闭了。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol><li><p>连接手机</p></li><li><p><code>adb devices</code> 获取手机的 <strong>device id</strong></p></li><li><p><code>adb reboot bootloader</code> 进入 <strong>bootloader</strong> 模式</p></li><li><p><strong>如果已经解锁了，则进入第8步，如果未解锁则进入第五步</strong></p></li><li><p>进入到 <strong>bootloader</strong> 之后，执行 <code>fastboot flashing unlock</code></p></li><li><p>如果是 <strong>Pixel 2 XL</strong> 则执行 <code>fastboot flashing unlock_critical</code></p></li><li><p>如果是更早的设备，则需要执行 <code>fastboot oem unlock</code></p></li><li><p>进入下载的目录，然后执行 <strong>flash-all</strong> 脚本，如果是 <em>Windows</em> 则是 <code>flash-all.bat</code> ，其它的则执行 <code>flash-all.sh</code></p></li><li><p>执行结束后，手机就已经刷好了，重启就可以使用了</p></li><li><p>如果执行失败的话，就需要解压目录下的 <em>image</em> 对应的包，然后执行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash vendor vendor.img</span><br><span class="line">fastboot flash boot boot.img</span><br><span class="line">fastboot flash system system.img</span><br></pre></td></tr></table></figure></li></ol><p>然后重启手机就可以了。</p><h3 id="V-版手机解锁"><a href="#V-版手机解锁" class="headerlink" title="V 版手机解锁"></a>V 版手机解锁</h3><p>需要刷入一个工具，才能解锁</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb push dePixel8 /data/local/tmp</span><br><span class="line">adb shell chmod 755 /data/local/tmp/dePixel8</span><br><span class="line">adb shell /data/local/tmp/dePixel8</span><br></pre></td></tr></table></figure><p>然后再执行 <code>adb reboot bootloader</code> 就可以正常解锁了。</p><p><a href="http://theroot.ninja/depixel8.html" target="_blank" rel="noopener">dePixel8.zip 下载</a></p><p>判断是否 V 版手机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop|grep cid</span><br></pre></td></tr></table></figure><p>如果出现 <strong>VZW_001</strong> 就是 V 版手机</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓系统 </tag>
            
            <tag> 手动更新手机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 功能键配置</title>
      <link href="/hexo-blog/2019/02/26/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-tips/"/>
      <url>/hexo-blog/2019/02/26/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-tips/</url>
      
        <content type="html"><![CDATA[<p>Emacs 和 Vim 最大的就是快捷键的体系不同，在 Emacs 中，快捷键要有对应的控制键配合，才能正常使用，比如打开 <strong>Agenda</strong> <code>C-c a</code> 一般指的是 <code>Ctrl + c a</code> 而在 Emacs 中，使用的控制键主要有以下几种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s- : supper</span><br><span class="line">S- : Shift</span><br><span class="line">M- : Meta &#x2F; Alt</span><br><span class="line">C- : Ctrl</span><br><span class="line">H- : Hyper</span><br></pre></td></tr></table></figure><a id="more"></a><p>其中 Ctrl、Meta/Alt、Shift这几种快捷键比较常见，但是 supper 这个键就比较少见了，而且在键盘上，一般也看不到，所以我们在配置的时候，需要在配置中声明这几个键被绑定在哪些键上。</p><p>如果是在 /Windows/ 系统下需要增加如下的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(setq w32-lwindow-modifier &#39;supper</span><br><span class="line">      w32-apps-modifier &#39;hyper)</span><br></pre></td></tr></table></figure><p>但是如果使用的是 /Mac/ 系统的话要增加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(setq mac-command-modifier &#39;meta</span><br><span class="line">      mac-option-modifier &#39;super</span><br><span class="line">      mac-control-modifier &#39;control</span><br><span class="line">      ns-function-modifier &#39;hyper)</span><br></pre></td></tr></table></figure><p>但是这样的情况又有另外一个问题，需要在特定的系统中使用，所以我们要在对应的配置上增加上对系统的判断，绑定的方案如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(when sys&#x2F;winntp</span><br><span class="line">  ;; 经过测试，在 windows 下，window 键是不能修改的</span><br><span class="line">  (setq ;;w32-lwindow-modifier &#39;supper</span><br><span class="line">    w32-apps-modifier &#39;hyper)</span><br><span class="line">  (w32-register-hot-key [s-t]))</span><br><span class="line"></span><br><span class="line">(when sys&#x2F;macp</span><br><span class="line">  (setq mac-command-modifier &#39;meta</span><br><span class="line">    mac-option-modifier &#39;super</span><br><span class="line">    mac-control-modifier &#39;control</span><br><span class="line">    ns-function-modifier &#39;hyper))</span><br></pre></td></tr></table></figure><p>这样我们就可以在不同的系统中正确的使用不同的功能键了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> modifier keys </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让自己生活的更好</title>
      <link href="/hexo-blog/2019/02/11/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/3-step-to-better-one/"/>
      <url>/hexo-blog/2019/02/11/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/3-step-to-better-one/</url>
      
        <content type="html"><![CDATA[<h2 id="学会早睡"><a href="#学会早睡" class="headerlink" title="学会早睡"></a>学会早睡</h2><p>想要早睡，需要减少自己的兴奋点，在生活中，如果无法早睡，白天的工作效率也就会降低，可能要拖拉到半夜才完成，这样就成了一个恶性循环了。</p><p>我尝试过早睡，但是未必能早起，主要是就算我10点躺下，也不可能在10点半入睡，毕竟手机、pad等等太好玩了。</p><p>所以想要早睡的会，要学会给自己降噪。</p><ol><li>早一点运动和洗澡，避免淋水让自己重回清醒状态；</li><li>调暗室内灯光，尽量用暖色灯；</li><li>点燃香薰，或者其它助眠的东西；</li><li>阅读简单轻快的小说或者看一些轻松的视频，不要让自己兴奋或者让自己思考；</li><li>放下手机；</li></ol><a id="more"></a><h2 id="努力运动"><a href="#努力运动" class="headerlink" title="努力运动"></a>努力运动</h2><p>作为已经迈入中年油腻男境界的人来说，其实可以好的，比如给自己更好的身材，就算光头也可以很有型，所以运动是必不可少的，不过现在的我还是先从减肥开始，这里就不会有更多的问题，就是坚持二字，必然会瘦下来。</p><h2 id="断舍离"><a href="#断舍离" class="headerlink" title="断舍离"></a>断舍离</h2><h3 id="生活断舍离"><a href="#生活断舍离" class="headerlink" title="生活断舍离"></a>生活断舍离</h3><p>“把不用的东西扔掉！”</p><p>这是非常简单的几乎所有人都知道的真理，但是在生活中，不用的东西到底是怎么定义的，我现在不用，将来也不会用到的一定是。但是我们怎么知道将来会不会呢？</p><p>所以应该把自己的物欲降低，先从不买或者真正有用或者想用的时候再买，千万不能图打折，图降价而购入一些不需要的东西。</p><p>特别是对于自己有吸引力的东西，对我来说，最常购买的东西就是图书，经常看到当当网、京东网、亚马逊有便宜的或者折扣的力收的时候就管不住自己的手，而有一些商家还经常用优惠来吸引人。结果导致了购买了许多的书，但是实际上看的书特别少。</p><p>所以在这里，自己定义了一个新的书单，用来记录自己实际读了什么、要读什么，再定一个计划，比如：阅读多少本已购书籍之后再购入新的书籍。</p><p>对于一些可能用又不可能不用，或者近一年都不会用的东西都扔掉，这样就可以让我们的家更整洁。等到一年后或许你发现你也不会用这个东西了。或者是再重新购入即可。</p><h3 id="思想断舍离"><a href="#思想断舍离" class="headerlink" title="思想断舍离"></a>思想断舍离</h3><p>除了我们的生活，对于我们的思想也应该 <strong>“断舍离”</strong> 。</p><p>当有了一个想法，如果一直想着，就会把时间和记忆固定在这里，而如果中途又遇到另外的事情，又特别容易将某些事情忘记，所以我们应该选择记下来，用实体的东西代替大脑，这样可以让我们思考更多的东西。</p><p>或者我们忽然读到了一篇好文章，但是现在不适合详读，我们可以在这个是时候把文章通过工具记录下来，等有时间了，再重新详读这篇文章。</p><p>比如在通勤的路上，会遇到一些比较好的文章，我会利用手机 app 将文章保存到 <strong>滴答</strong> 清单中，当有时间的时候，将好的文章再重新阅读一遍，或者重新学习一遍。</p><p>当然有时候，也会因为<del>懒怠</del>繁忙导致累积了许多内容没有读，最多的时候，滴答的待办清单中有500篇文章要读。</p><p>除了这些，还可以把自己心中的那些不满啊、忧愁啊都记下来，这样也可以有效的控制我们的感情，让自己更开心的生活。</p><p>这个主要用了两个东西，一个是电子版的笔记系统——Org Mode Journal系统，另外一个就是一个简单的横格本和一支笔就可以手工记录了，具体的可以看一些手帐相关的文章来学习如何简单清晰的记录生活。</p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 减法生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmder 无法显示中文</title>
      <link href="/hexo-blog/2018/08/29/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/cmder-cannot-display-chinese/"/>
      <url>/hexo-blog/2018/08/29/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/cmder-cannot-display-chinese/</url>
      
        <content type="html"><![CDATA[<p>cmder 默认是不支持中文字符的，可以在 <strong>Setting &gt; Startup &gt; Environment</strong> 下增加一行语言设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set LANG=zh_CN.UTF8</span><br></pre></td></tr></table></figure><p>然后重启 cmder 即可。</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apt-get 中 update 与 upgrade 的区别</title>
      <link href="/hexo-blog/2018/08/02/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/apt-get-update-and-upgrade/"/>
      <url>/hexo-blog/2018/08/02/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/apt-get-update-and-upgrade/</url>
      
        <content type="html"><![CDATA[<p><code>update</code> : 更新 <strong>/etc/apt/sources.list</strong> 和 <strong>/etc/apt/sources.list.d</strong> 中列出的源的地址,这样才能获取到最新的软件包。<br><code>upgrade</code> : 升级已安装的所有软件包，升级之后的版本就是本地地址里的，因此，在执行 <strong>upgrade</strong> 之前一定要执行 <strong>update</strong> , 这样才能更新到最新的。</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apt-get </tag>
            
            <tag> apt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax 关闭异步请求</title>
      <link href="/hexo-blog/2018/06/20/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ajax-asyn-option/"/>
      <url>/hexo-blog/2018/06/20/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ajax-asyn-option/</url>
      
        <content type="html"><![CDATA[<p>在代码中，因为进行了后台的取值操作，导致有些内容还未加载就执行到了新的地方，所以想着 ajax 的异步关闭来解决。</p><p><code>async</code> 设置为 <code>false</code> 的时候，变成同步操作，默认( <code>true</code> )为异步操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    cache: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">false</span>,   <span class="comment">// 太关键了，学习了，同步和异步的参数</span></span><br><span class="line">&#125;);</span><br><span class="line">alert(<span class="string">"2"</span>);</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async </tag>
            
            <tag> 异步请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改 Fedora 下 user 目录为英文</title>
      <link href="/hexo-blog/2017/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/change-user-dirs-to-english-in-fodera/"/>
      <url>/hexo-blog/2017/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/change-user-dirs-to-english-in-fodera/</url>
      
        <content type="html"><![CDATA[<p>这里主要是因为中文在使用 <strong>shell</strong> 的时候并不方便，但是如果系统语言为中文的话这些目录都是中文的。可以使用下面的方法修改为英文。</p><p>先将语言修改为英文：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将语言修改为英文</span></span><br><span class="line">export LANG=en_US</span><br></pre></td></tr></table></figure><p>然后更新用户目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更新用户目录</span></span><br><span class="line">xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure><p>这个时候，会提示是否要将用户目录下的文件夹改为英文。选择是，然后再将系统语言刷到中文：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将语言调为中文</span></span><br><span class="line">export LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure><p>再执行更新用户目录命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure><p>再次输入上面的命令会提示是否改为中文，选择否，并选择不再提醒即可。经过测试这种方法适用于<br><strong>GNOME</strong> 桌面环境。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认语言 </tag>
            
            <tag> 目录语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 学习之旅</title>
      <link href="/hexo-blog/2017/03/02/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-learning-way/"/>
      <url>/hexo-blog/2017/03/02/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-learning-way/</url>
      
        <content type="html"><![CDATA[<p><strong>Emacs 的使用过程，就像是程序员的生涯一样——路漫漫其修远兮，吾将上下而求索。</strong></p><h2 id="万物始于-Emacs"><a href="#万物始于-Emacs" class="headerlink" title="万物始于 Emacs"></a>万物始于 Emacs</h2><p>最早知道 <strong>Emacs</strong> 是从编辑器的圣战开始的，即编辑器之神——Vi，和神的编辑器——Emacs。两个编辑器在经历了几十年的战争之后，仍然是编辑世界不可超越的高峰。</p><p>但在一开始，我选择的是 Vi，因为在 <strong>*nix</strong> 中，都是有安装的，在服务器编辑文件——即使是很大的文件，Vi 也可以非常轻易的打开编辑，在一段时间内，我几乎是跪着使用 Vi 的。</p><p>后来随着想用的功能越来越多，而 Vi 只能做为编辑器使用，再加上被一些大神安利，我就选择尝试使用 Emacs 来<del>装逼</del>记笔记。于是下载了当时正流行的 <em>Purcell</em> 大神的配置，并开始尝试使用，不过没过多少就放弃了。</p><p>期间阅读了许多入门学习的内容，对 Emacs 有了一个大概的了解。</p><p>推荐阅读内容：</p><ul><li><a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org" target="_blank" rel="noopener">《一年成为 Emacs 高手（像神一样使用编辑器）》</a></li><li><a href="https://github.com/bbatsov/prelude" target="_blank" rel="noopener">Prelude 入门级 Emacs 配置</a></li><li><a href="https://github.com/purcell/emacs.d" target="_blank" rel="noopener">Purcell 大神的配置</a></li></ul><h2 id="Emacs-始于-Org"><a href="#Emacs-始于-Org" class="headerlink" title="Emacs 始于 Org"></a>Emacs 始于 Org</h2><p>Emacs 学习的无疾而终，让我的装逼大计一度沉沦。直到我开始尝试利用 <strong>Org-mode</strong> 进行博客写和作日程管理，阅读了一些文章之后，才真正开始了 Emacs 的学习苦旅。</p><p>如果说 Emacs 是神的编辑器的话， <strong>Org</strong> 可能是神器之中的神器，随着对 Org 的学习和使用，我从最初的装逼，到后来的<del>逼格提升</del>真正开始利用Emacs，都是因为Org-mode 。</p><p>推荐阅读内容：</p><ul><li><a href="https://github.com/mudan/mudan.github.io/blob/master/Emacs/The%5FOrg%5FManual/The%5FOrg%5FManual.org" target="_blank" rel="noopener">mudan 大神的 Org-mode 入门级手册</a></li><li><a href="https://github.com/mudan/mudan.github.io/blob/master/read/dx.org" target="_blank" rel="noopener">mudan 大神的漂亮的文言文排版</a></li><li><a href="http://forrestchang.com/14824097554043.html" target="_blank" rel="noopener">Tisoga 大神的 Org + GitHub 的博客教学</a></li></ul><a id="more"></a><h2 id="终于-Spacemacs-的战争"><a href="#终于-Spacemacs-的战争" class="headerlink" title="终于 Spacemacs 的战争"></a>终于 Spacemacs 的战争</h2><p>从最开始的学习，到现在已经习惯于使用 Emacs ，主要因为其确实是可以提升效率的，当然这里要把配置时间拿走。虽然开始使用的原因有所不同，但是大家最后的目标却都是一样的——即提高工作（学习）效率。</p><p>但是经过了 Emacs 几次强行配置之后，学习了一些 Emacs 的填坑方案。</p><p>后来加入了一个 Emacs 的微信群——毫不夸张的说，这是我加入过的群里面质量最高的，学习效果最好的，而且所有的成员都自发的维护群里的闲聊问题，每一次讨论都是提问解决和讨论的过程。</p><p>在偶然的一次机会，被安利了一把 Spacemacs，Vi 的操作加上 Emacs 的扩展，不要太吸引人！</p><p>推荐关注的大神：</p><ul><li><a href="https://github.com/hick" target="_blank" rel="noopener">Hick</a> 高质量 <strong>Emacs</strong> 微信群群主，应该也是发起人，水的人自觉加入闲聊群，是我所有技术相关微信群中质量最高的。</li><li><a href="https://github.com/zilongshanren" target="_blank" rel="noopener">子龙山人</a> <strong>Spacemacs Rock</strong> 视频作者，我的配置里抄的最多的就是这位大神的。</li><li><a href="https://github.com/lujun9972" target="_blank" rel="noopener">DarkSun</a>  黑日大神，大神的文章非常多，而且质量都非常高，还维护着一个 Emacs 推广相关的项目，多读读，可以找到一些自己需要的配置。</li><li><a href="https://github.com/tumashu" target="_blank" rel="noopener">tumashu</a> 天然二呆，呆神，之前看到呆神在闲聊群里水，后来又看到呆神在帮忙解决问题，好奇的关注了一下 GitHub ，才发现，竟然这几个好用的 package 都是呆神写的，而且呆神竟然不是<del>程序员</del>靠程序吃饭！</li></ul><p>大神太多了，不一一推荐，如果需要，可以联系 Hick 加一下群，就都有了。</p><p>再推荐一下中文的 Emacs 论坛，可以提问，也可以讨论：</p><ul><li><a href="https://emacs-china.org" target="_blank" rel="noopener">Emacs China</a> 一堆大神在维护的论坛，经常看看，非常好用。</li></ul><h2 id="我的-Emacs-配置"><a href="#我的-Emacs-配置" class="headerlink" title="我的 Emacs 配置"></a>我的 Emacs 配置</h2><h3 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h3><p>为了更好管理配置，推荐使用 <strong>.spacemacs.d</strong> 文件夹进行管理配置，而不是使用 <strong>.spacemacs</strong> 文件。也为了方便后续的扩展。</p><h3 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h3><p>如果是在 Windows 下使用，需要注意几个问题：</p><ol><li>推荐用编译版本，或者用官方网站加部分 <em>.dll</em> 文件来解决</li><li>使用过程中，为了配置的时候好用——更适合 Linux，我是使用在环境变量中增加默认的 <em>HOME</em> 的方案，也可以使用其它方法</li><li>直接下载就可以使用，维护的是 <em>develop</em> 分支，后续会慢慢往 <em>master</em> 分支中合并</li></ol><h3 id="最终选择"><a href="#最终选择" class="headerlink" title="最终选择"></a>最终选择</h3><p>在几经周折之后，最后还是选择自己从头开始配置一套 <strong>.emacs.d</strong> ，主要是因为以下几个问题：</p><ol><li>随着使用的人越来越多，维护的东西也越来越多，项目太大了</li><li>最终希望的是使用 Vi 的快捷键方案，可以使用 <code>evil-mode</code> 来替代</li><li>个人使用的特性话的内容太多，完全引用项目不如借鉴项目的配置方案</li></ol><p><a href="https://github.com/AboutEmacs/.emacs.d" target="_blank" rel="noopener">我的 emacs 原生配置</a></p><h3 id="我的博客地址"><a href="#我的博客地址" class="headerlink" title="我的博客地址"></a>我的博客地址</h3><p>如果想看我的博客，可以访问：<a href="https://www.zucchiniy.cn">hugo博客</a> 或者 <a href="https://zcodingtime.github.io" target="_blank" rel="noopener">hexo博客</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 总结思考 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Emacs </tag>
            
            <tag> org mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 快捷键使用</title>
      <link href="/hexo-blog/2016/04/26/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-keybinds-basic/"/>
      <url>/hexo-blog/2016/04/26/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-keybinds-basic/</url>
      
        <content type="html"><![CDATA[<ul><li>设置 Emacs 的默认编码格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(prefer-coding-system &#39;utf-8-unix)</span><br></pre></td></tr></table></figure><ul><li>改变文件编码格式</li></ul><p><code>C-x C-m f utf-8-unix RET</code> : 将当前文件转换为 <strong>utf-8</strong> 编码</p><p><code>C-x C-m c RET C-x C-w RET</code> : 将当前文件另存为指定编码</p><ul><li>查看需要的库文件</li></ul><p><code>M-: image-library-alist RET</code> : 查看 <strong>emacs</strong> 支持需要的库文件</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">((xpm "libxpm.dll" "xpm4.dll" "libXpm-nox4.dll")</span><br><span class="line">(png "libpng16.dll" "libpng16-16.dll")</span><br><span class="line">(tiff "libtiff-5.dll" "libtiff3.dll" "libtiff.dll")</span><br><span class="line">(jpeg "libjpeg-9.dll")</span><br><span class="line">(gif "libgif-7.dll")</span><br><span class="line">(svg "librsvg-2-2.dll")</span><br><span class="line">(gdk-pixbuf "libgdk_pixbuf-2.0-0.dll")</span><br><span class="line">(glib "libglib-2.0-0.dll")</span><br><span class="line">(gobject "libgobject-2.0-0.dll")</span><br><span class="line">(gnutls "libgnutls-28.dll" "libgnutls-26.dll")</span><br><span class="line">(libxml2 "libxml2-2.dll" "libxml2.dll")</span><br><span class="line">(zlib "zlib1.dll" "libz-1.dll"))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> coding system </tag>
            
            <tag> image library </tag>
            
            <tag> keybind </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
