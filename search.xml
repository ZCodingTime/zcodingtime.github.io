<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用 find 和 grep 联合查找文件</title>
      <link href="/hexo-blog/2020/01/07/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/linux/find-files-on-linux/"/>
      <url>/hexo-blog/2020/01/07/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/linux/find-files-on-linux/</url>
      
        <content type="html"><![CDATA[<p>Linux 下 使用 find 命令查找文件。</p><h2 id="常用组合"><a href="#常用组合" class="headerlink" title="常用组合"></a>常用组合</h2><ul><li>查找所有 <strong>.h</strong> 文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find &lt;pathname&gt; -name "*.h"</span><br></pre></td></tr></table></figure><ul><li>查找所有 <strong>.h</strong> 文件中的含有 <strong>helloworld</strong> 字符串的文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find &lt;pathname&gt;  -name "*.h" -exec grep -in "helloworld" &#123;&#125; \;</span><br><span class="line">find &lt;pathname&gt;  -name "*.h" | xargs grep -in "helloworld"</span><br></pre></td></tr></table></figure><p>第一个命令中的 <code>{}</code> 是指的 <code>find &lt;pathname&gt;  -name &quot;*.h&quot;</code> 的结果，也是就说，第一个命令中 <code>grep</code> 是在 <code>find</code> 查到的结果中进行二次筛选操作。而后面的 <code>\;</code> 则是语句的结束标识，也就是转义的 <code>;</code> 。</p><p>第二个命令则是使用的管道。</p><ul><li>查找所有 <strong>.h</strong> 和 <strong>.c</strong> 文件中的含有 <strong>helloworld</strong> 字符串的文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find &lt;pathname&gt;  /( -name "*.h" -or -name "*.c" /) -exec grep -in "helloworld" &#123;&#125; \;</span><br></pre></td></tr></table></figure><ul><li>查找非备份文件中的含有 <strong>helloworld</strong> 字符串的文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find &lt;pathname&gt; /( -not -name "*~" /) -exec grep -in "helloworld" &#123;&#125; \;</span><br></pre></td></tr></table></figure><blockquote><p><pathname> 为查找路径，默认为当前路径。带 -exec 参数时必须以 <em>;</em> 结尾，否则会提示 『find: 遗漏 <em>-exec</em> 的参数』。</p></blockquote><h2 id="使用-find-和-xargs"><a href="#使用-find-和-xargs" class="headerlink" title="使用 find 和 xargs"></a>使用 find 和 xargs</h2><p><code>find &lt;pathname&gt; -options [-print -exec -ok]</code></p><p><strong>-optinos</strong></p><h3 id="name-按照文件名查找"><a href="#name-按照文件名查找" class="headerlink" title="-name:按照文件名查找"></a>-name:按照文件名查找</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find ~ -name “*.txt” -print</span><br><span class="line">find ~ -name “[a-z][0-9].txt -print</span><br></pre></td></tr></table></figure><h3 id="perm-按照权限查找文件"><a href="#perm-按照权限查找文件" class="headerlink" title="-perm:按照权限查找文件"></a>-perm:按照权限查找文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find ~ -perm 755 -print #查找权限为755的文件</span><br><span class="line">find ~ -perm 007 -print #查找o位置上具有7权限的文件</span><br><span class="line">find ~ -perm 4000 -print #查找具有suid的文件</span><br></pre></td></tr></table></figure><h3 id="prune"><a href="#prune" class="headerlink" title="-prune"></a>-prune</h3><p>不在当前目录下查找</p><h3 id="user-和-nouser"><a href="#user-和-nouser" class="headerlink" title="-user 和 -nouser"></a>-user 和 -nouser</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find ~ -user zhao -print #查找文件属主是zhao的文件</span><br><span class="line">find ~ -nouser -print #查找文件属主已经被删除的文件</span><br></pre></td></tr></table></figure><h3 id="group和－nogroup"><a href="#group和－nogroup" class="headerlink" title="-group和－nogroup"></a>-group和－nogroup</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ -group zhao -print #查找文件群组是zhao的文件</span><br></pre></td></tr></table></figure><h3 id="按照时间"><a href="#按照时间" class="headerlink" title="按照时间"></a>按照时间</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find ~ -mtime -5 -print #文件更改时间在5天内的文件</span><br><span class="line">find ~ -mtime +3 -print #文件更改时间在3天前的文件</span><br><span class="line">find ~ -newer file1 -print #查找比文件file1新的文件</span><br></pre></td></tr></table></figure><h3 id="按照类型查找"><a href="#按照类型查找" class="headerlink" title="按照类型查找"></a>按照类型查找</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ -type d -print #查找所有目录</span><br></pre></td></tr></table></figure><h3 id="按照大小"><a href="#按照大小" class="headerlink" title="按照大小"></a>按照大小</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~ -size +1000000C -print #查找文件大小大于1000000字节(1M)的文件</span><br></pre></td></tr></table></figure><h3 id="查找位于本文件系统里面的文件"><a href="#查找位于本文件系统里面的文件" class="headerlink" title="查找位于本文件系统里面的文件"></a>查找位于本文件系统里面的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name "*.txt" -mount -print</span><br></pre></td></tr></table></figure><p><strong>-exec</strong> , <strong>-ok</strong> : <strong>find</strong> 命令对于匹配文件执行该参数所给出 <strong>shell</strong> 命令，相应命令形式为: <code>&#39;command&#39; {} \;</code><br><strong>-ok</strong> 在执行命令前要确认</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find ~ -type f -exec ls -l &#123;&#125; \;</span><br><span class="line">find / -name “*.log” -mtime +5 -ok rm &#123;&#125; \;</span><br><span class="line">find . -name core -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>使用 <strong>-x dev</strong> 参数防止 <strong>find</strong> 搜索其他分区<br><code>find . -size 0 -exec rm {} \;</code> 删除尺寸为０的文件</p><ul><li>xargs 与-exec 功能类似</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find ~ -type f | xargs ls -l</span><br><span class="line">find / -name “*.log” -type f -print| xargs grep -i DB0</span><br><span class="line">find . -type f |xargs grep -i “Mary”</span><br></pre></td></tr></table></figure><p>在所有文件中检索字符串 Mary <code>ls *~ |xargs rm -rf</code> 删除所有以~结尾的文件</p><h2 id="过滤-svn-文件夹"><a href="#过滤-svn-文件夹" class="headerlink" title="过滤 svn 文件夹"></a>过滤 svn 文件夹</h2><ul><li>使用管道进行双层“过滤”，其中第二次 grep 使用了 -v 选项，即逆向匹配，打印出不匹配的行</li></ul><p><code>grep -r &#39;function_name&#39; * | grep -v &#39;.svn&#39;</code></p><ul><li><p>或者更简单一些，直接使用 <code>--exclude-dir</code> 选项，即指定排除目录，注意 svn 前的 <strong>\.</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r --exclude-dir=\.svn 'function_name' *</span><br></pre></td></tr></table></figure></li></ul><h2 id="多个过滤条件"><a href="#多个过滤条件" class="headerlink" title="多个过滤条件"></a>多个过滤条件</h2><h3 id="或操作"><a href="#或操作" class="headerlink" title="或操作"></a>或操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -E '123|abc' filename  # 找出文件（filename）中包含123或者包含abc的行</span><br><span class="line">egrep '123|abc' filename    # 用egrep同样可以实现</span><br><span class="line">awk '/123|abc/' filename   # awk 的实现方式</span><br></pre></td></tr></table></figure><h3 id="与操作"><a href="#与操作" class="headerlink" title="与操作"></a>与操作</h3><p><code>grep pattern1 files | grep pattern2</code> 显示既匹配 pattern1 又匹配 pattern2 的行。</p><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep -i pattern files #不区分大小写地搜索。默认情况区分大小写，</span><br><span class="line">grep -l pattern files #只列出匹配的文件名，</span><br><span class="line">grep -L pattern files #列出不匹配的文件名，</span><br><span class="line">grep -w pattern files #只匹配整个单词，而不是字符串的一部分（如匹配‘magic’，而不是‘magical’），</span><br><span class="line">grep -C number pattern files #匹配的上下文分别显示[number]行，</span><br></pre></td></tr></table></figure><h2 id="find-过滤-svn-文件夹"><a href="#find-过滤-svn-文件夹" class="headerlink" title="find 过滤 svn 文件夹"></a>find 过滤 svn 文件夹</h2><p><code>find -type f ! -path &#39;*/.svn/*&#39;</code></p><h2 id="find-查找大文件"><a href="#find-查找大文件" class="headerlink" title="find 查找大文件"></a>find 查找大文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -size +800M</span><br></pre></td></tr></table></figure><p>type 类型 : <strong>b</strong> 块设备， <strong>d</strong> 目录， <strong>c</strong> 字符设备文档， <strong>p</strong> 管道文档， <strong>l</strong> 符号链接文档， <strong>f</strong> 普通文档</p><p>name 文件名 : 支持通配符</p><p>size 文件大小 : <strong>+</strong> 表示大于， <strong>-</strong> 表示小于，支持 k/M/G 的单位</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -size +800M | xargs ls -lh</span><br></pre></td></tr></table></figure><p>这里的 <code>xargs</code> 是把管理参数切分成多个部分，可以将命令进行组合</p><h2 id="du-查找大目录"><a href="#du-查找大目录" class="headerlink" title="du 查找大目录"></a>du 查找大目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">du -h --max-depth=1</span><br><span class="line">du -hm --max-depth=2 | sort -n</span><br><span class="line">du -hm --max-depth=2 | sort -nr | head -12</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> find </tag>
            
            <tag> grep </tag>
            
            <tag> du </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/hexo-blog/2020/01/05/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/build-blog-with-hexo/"/>
      <url>/hexo-blog/2020/01/05/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/build-blog-with-hexo/</url>
      
        <content type="html"><![CDATA[<p><strong>我们无法选择生活的样子，但我们可以记下来。</strong></p><h2 id="博客的开始"><a href="#博客的开始" class="headerlink" title="博客的开始"></a>博客的开始</h2><p>其实，一切都是为了更好的装逼。好吧，我着相了。</p><p>最开始想做一个自己博客，主要是因为看到了很多人都有，觉得自己没有太 Low 了。于是申请了 CSDN 的用户，但是太丑了，于是又申请了博客园，感觉这些都不是我想要的，而做为一个 Emacser 不使用 Github 搭建一个自己的博客，感觉就已经落伍了。</p><p>于是就有这最初的一个，相当简陋的利用 Emacs 的 Org-mode 搭建的博客，后来看了 Org-page 这个包，但是，我配置不好啊！为什么为什么！</p><p>最后，从 Hugo 和 Hexo 之间，我选择了 Hexo，虽然 Hugo 在 Windows 上使用起来更方便，但是我还是觉得 Hexo 更适合我。</p><h2 id="利用-Hexo-的坑"><a href="#利用-Hexo-的坑" class="headerlink" title="利用 Hexo 的坑"></a>利用 Hexo 的坑</h2><ol><li><p>有些插件需要翻墙，有些不用，我也不记得哪个用哪个不用了，实在不行可以使用淘宝的<br>npm 源进行安装。</p></li><li><p>环境配置好之后，最好更新一下模板，把一些常用的内容写到 Hexo<br>的模板里，这样在后续的使用中，可以快速的增加标签、分类和简介等内容。</p></li><li><p>学习 Markdown , 这个并不是一个坑，而是一个忠告，作为一个常年游荡在<br>GitHub 的好同志来说，但是对于一个 Emacser 来说，我更喜欢 Org-mode<br>，但是 Org-mode 并不能直接用来发布 Hexo<br>博客，有些人会说可以利用一些工具，但是与其增加一些工具，不如学习一下<br>Markdown, 这根本用不了几分钟，虽然 Org-mode<br>很强大（忍不住安利一波），但是 Markdown<br>作为一个大众的标记语言，简单的语法还是需要我们掌握的。</p></li><li><p>记住常用的命令</p><ul><li><code>hexo new markdown_file</code> 新建文章</li><li><code>hexo new page html_file</code> 新建页面</li><li><code>hexo generate</code> 生成静态页面到 public 目录</li><li><code>hexo server</code> 开启预览访问端口，4000， <code>Ctrl+c</code> 关闭 <em>server</em></li><li><code>hexo deploy</code> 将 .deploy 目录部署到 GitHub</li></ul></li></ol><blockquote><p>这里需要配置 deploy 的项目地址并安装了 <code>hexo-deployer-git</code> 插件，才能使用这个功能</p></blockquote><ol><li><p>最后一个坑，挑选一个合适的主题，好吧，我选择了很久——大概四天吧，可能很多人能非常快的决定，但是对于我来说，把所有好看的主题都看一遍，才是我想做的事，最后我选择了 Next 主题，简单美观，还有非常齐全的配置说明</p></li><li><p>部署使用的命令有三个 <code>hexo clean</code> / <code>hexo generate</code> / <code>hexo deploy</code><br>，这三个命令之后，就可以登录你的静态博客页面去查看了。</p></li></ol><h2 id="博客的生活"><a href="#博客的生活" class="headerlink" title="博客的生活"></a>博客的生活</h2><p>我很喜欢调试自己的博客，但是写博客就不是那么喜欢了，但是我希望能养成一个定期写博客的习惯。</p><p>所以，我需要博客，主要是用来装…咳，主要是用来记录我们的生活、工作的内容，这样在下次使用的时候，就能更好的做到了。</p><h2 id="Hexo-相关安装"><a href="#Hexo-相关安装" class="headerlink" title="Hexo 相关安装"></a>Hexo 相关安装</h2><p>在几次试验之后，Node.js 环境还是使用 nvm<br>管理比较好用，下载的时候可以使用 <code>npm --registry=https://registry.npm.taobao.org install</code> 进行安装下面的模块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install -g tern</span><br><span class="line">npm install -g js-beautify</span><br><span class="line">npm install -g jshint</span><br><span class="line">npm install -g js-yaml</span><br><span class="line">npm install hexo-renderer-jade --save</span><br><span class="line">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure><h2 id="hugo"><a href="#hugo" class="headerlink" title="hugo"></a>hugo</h2><p><strong>Hugo</strong> 是由 Go 语言实现的一个 <strong>Static Site Generator</strong> 工具，特点就是快，而且默认是支持 <strong>Org mode</strong> 这种文本的。</p><p>虽然对于 <strong>hexo</strong> 而言少了许多好看的主题，但是对于 <strong>Org mode</strong> 的默认支持让我有了决心一用的冲动。</p><p>在使用了一段时间之后，发现这个工具完美的解决了我所有的问题，并能让我专心于博客写作本身而不是工具，虽然有一些不方便，但最后还是决定继续使用，而且要减少对工具本身的使用，而加强写作本身。</p><p>在长时间的使用之后，发现 <strong>Hugo</strong> 对 <strong>Org mode</strong> 的支持也比较一般，对于一些比较好用的特性，功能都不支持，最好的方案还是从 <strong>Org</strong> 转成 <strong>Markdown</strong> ，所以在最终使用 <strong>ox-hugo</strong> 工具配合 <strong>Hugo</strong> 使用，然后通过 <strong>capture</strong> 功能直接生成对应的博客文章，方便快捷。</p><h3 id="ox-hugo-配置"><a href="#ox-hugo-配置" class="headerlink" title="ox-hugo 配置"></a>ox-hugo 配置</h3><p>使用 ox-hugo 主要需要配置两个内容，一是将 <strong>ox-hugo</strong> 增加到配置中，然后是在 启动 org-capture 的时候，增加一个新的选项，可以将自动新增一篇文章。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(use-package ox-hugo</span><br><span class="line">  :after ox)</span><br><span class="line"></span><br><span class="line">(with-eval-after-load &#39;org-capture</span><br><span class="line">  (defun org-hugo-new-subtree-post-capture-template ()</span><br><span class="line">    &quot;Return &#96;org-capture&#39; template string for new Hugo post.&quot;</span><br><span class="line">    (let* ((date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)))</span><br><span class="line">           (title (read-from-minibuffer &quot;Post Title: &quot;))</span><br><span class="line">           (file-name (read-from-minibuffer &quot;File Name: &quot;))</span><br><span class="line">           (fname (org-hugo-slug file-name)))</span><br><span class="line">      (mapconcat #&#39;identity</span><br><span class="line">                 &#96;(</span><br><span class="line">                   ,(concat &quot;* TODO &quot; title)</span><br><span class="line">                   &quot;:PROPERTIES:&quot;</span><br><span class="line">                   ,(concat &quot;:EXPORT_FILE_NAME: &quot; fname)</span><br><span class="line">                   ,(concat &quot;:EXPORT_DATE: &quot; date)</span><br><span class="line">                   &quot;:END:&quot;</span><br><span class="line">                   &quot;%?\n&quot;)</span><br><span class="line">                 &quot;\n&quot;)))</span><br><span class="line"></span><br><span class="line">  (add-to-list &#39;org-capture-templates</span><br><span class="line">               &#39;(&quot;h&quot;</span><br><span class="line">                 &quot;Hugo post&quot;</span><br><span class="line">                 entry</span><br><span class="line">                 (file &quot;~&#x2F;workspace&#x2F;blog&#x2F;hugo-posts.org&quot;)</span><br><span class="line">                 (function org-hugo-new-subtree-post-capture-template))))</span><br></pre></td></tr></table></figure><p>在这里，我是将所有的文章写到对应的一个文件中，然后将文件中的所有内容生成到对应的 hugo 文件夹中。</p><p>文件头配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#+HUGO_BASE_DIR: ~&#x2F;workspace&#x2F;blog&#x2F;content&#x2F;</span><br><span class="line">#+SEQ_TODO: TODO DRAFT DONE</span><br><span class="line">#+OPTIONS: ^:&#123;&#125;</span><br></pre></td></tr></table></figure><p>然后在这个文件中使用导出的快捷键，就可以看到对应的选项了，将 <code>org-export-dispatch</code> 命令绑定到自己的快捷键上就可以看到对应的输出命令。</p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/ox-hugo-export.png" alt="ox-hugo-export"></p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hugo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书/观影清单</title>
      <link href="/hexo-blog/2020/01/04/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/book-movie-list/"/>
      <url>/hexo-blog/2020/01/04/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/book-movie-list/</url>
      
        <content type="html"><![CDATA[<h2 id="2020-年读书观影清单"><a href="#2020-年读书观影清单" class="headerlink" title="2020 年读书观影清单"></a>2020 年读书观影清单</h2><h3 id="东野圭吾小说阅读"><a href="#东野圭吾小说阅读" class="headerlink" title="东野圭吾小说阅读"></a>东野圭吾小说阅读</h3><h4 id="非系列小说"><a href="#非系列小说" class="headerlink" title="非系列小说"></a>非系列小说</h4><ul><li><input disabled="" type="checkbox"> 白夜行</li><li><input disabled="" type="checkbox"> 幻夜</li><li><input disabled="" type="checkbox"> 解忧杂货店</li><li><input disabled="" type="checkbox"> 超杀人事件</li><li><input disabled="" type="checkbox"> 彷徨之刃</li><li><input disabled="" type="checkbox"> 秘密</li><li><input disabled="" type="checkbox"> 流星之绊</li><li><input disabled="" type="checkbox"> 时生</li><li><input disabled="" type="checkbox"> 信</li><li><input checked="" disabled="" type="checkbox"> 放学后 &lt;2019-12-06 Fri&gt;</li><li><input disabled="" type="checkbox"> 单恋</li><li><input disabled="" type="checkbox"> 虚无的十字架</li><li><input disabled="" type="checkbox"> 宿命</li><li><input disabled="" type="checkbox"> 杀人之门分身</li><li><input disabled="" type="checkbox"> 导论13</li><li><input disabled="" type="checkbox"> 绑架游戏</li><li><input disabled="" type="checkbox"> 使命与魂的尽头</li><li><input disabled="" type="checkbox"> 湖边杀人案</li><li><input disabled="" type="checkbox"> 平等世界 爱情故事</li></ul><h4 id="四笑小说"><a href="#四笑小说" class="headerlink" title="四笑小说"></a>四笑小说</h4><ul><li><input disabled="" type="checkbox"> 怪笑小说</li><li><input disabled="" type="checkbox"> 毒笑小说</li><li><input disabled="" type="checkbox"> 黑笑小说</li><li><input disabled="" type="checkbox"> 歪笑小说</li></ul><h4 id="滑雪场系列"><a href="#滑雪场系列" class="headerlink" title="滑雪场系列"></a>滑雪场系列</h4><ul><li><input checked="" disabled="" type="checkbox"> 疾风回旋曲 &lt;2017-11-24 Fri&gt; 2.0</li><li><input disabled="" type="checkbox"> 风雪追击</li></ul><h4 id="加贺一郎系列"><a href="#加贺一郎系列" class="headerlink" title="加贺一郎系列"></a>加贺一郎系列</h4><ul><li><input checked="" disabled="" type="checkbox"> 毕业 &lt;2019-12-14 Sat&gt;</li><li><input checked="" disabled="" type="checkbox"> 沉睡的森林 &lt;2019-12-16 Mon&gt;</li><li><input checked="" disabled="" type="checkbox"> 谁杀了她 &lt;2019-12-17 Tue&gt;</li><li><input checked="" disabled="" type="checkbox"> 恶意 &lt;2019-12-18 Wed&gt;</li><li><input checked="" disabled="" type="checkbox"> 我杀了他 &lt;2019-12-22 Sun&gt;</li><li><input checked="" disabled="" type="checkbox"> 只差一个谎言 &lt;2019-12-29 Sun&gt;</li><li><input checked="" disabled="" type="checkbox"> 红手指 &lt;2019-12-31 Tue&gt;</li><li><input checked="" disabled="" type="checkbox"> 新参者 &lt;2020-01-02 Thu&gt;</li><li><input checked="" disabled="" type="checkbox"> 麒麟之翼 &lt;2020-01-03 Fri&gt;</li><li><input checked="" disabled="" type="checkbox"> 祈祷落幕时 &lt;2019-12-12 Thu&gt;</li></ul><h4 id="神探伽利略系列"><a href="#神探伽利略系列" class="headerlink" title="神探伽利略系列"></a>神探伽利略系列</h4><ul><li><input checked="" disabled="" type="checkbox"> 侦探伽利略 &lt;2020-01-06 Mon&gt;</li><li><input disabled="" type="checkbox"> 预知梦</li><li><input checked="" disabled="" type="checkbox"> 嫌疑人 x 的献身 &lt;2019-12-09 Mon&gt;</li><li><input disabled="" type="checkbox"> 圣女的救济</li><li><input disabled="" type="checkbox"> 伽利略的苦恼</li><li><input disabled="" type="checkbox"> 盛夏的方程式</li><li><input disabled="" type="checkbox"> 虚像小丑</li><li><input disabled="" type="checkbox"> 禁忌魔术</li></ul><h3 id="其它推理小说"><a href="#其它推理小说" class="headerlink" title="其它推理小说"></a>其它推理小说</h3><ul><li><input disabled="" type="checkbox"> 罗杰疑案</li><li><input disabled="" type="checkbox"> 东方快车谋杀案</li><li><input disabled="" type="checkbox"> 无人生还</li><li><input disabled="" type="checkbox"> 啤酒谋杀案</li><li><input disabled="" type="checkbox"> ABC 杀人案</li><li><input disabled="" type="checkbox"> 福尔摩斯探案全集</li><li><input disabled="" type="checkbox"> 消失的爱人</li><li><input disabled="" type="checkbox"> 告白</li><li><input disabled="" type="checkbox"> 逻辑王子的演绎</li><li><input disabled="" type="checkbox"> 化工女王的逆袭</li><li><input disabled="" type="checkbox"> 物理教师时空诡计</li><li><input disabled="" type="checkbox"> 代上帝之手</li><li><input disabled="" type="checkbox"> 无证之罪</li><li><input disabled="" type="checkbox"> 坏小孩</li><li><input disabled="" type="checkbox"> 长夜难明</li><li><input disabled="" type="checkbox"> 络新妇之理</li><li><input disabled="" type="checkbox"> 姑获鸟之夏</li><li><input disabled="" type="checkbox"> 福尔摩斯探案集</li><li><input disabled="" type="checkbox"> 占星术杀人魔法</li><li><input disabled="" type="checkbox"> 死了七次的男人</li><li><input disabled="" type="checkbox"> 一桩事先张扬的凶杀案</li><li><input disabled="" type="checkbox"> 半落</li><li><input disabled="" type="checkbox"> 别相信任何人</li><li><input disabled="" type="checkbox"> 护士学院杀人事件</li><li><input disabled="" type="checkbox"> 所罗门的伪证</li><li><input disabled="" type="checkbox"> 达芬奇密码</li><li><input disabled="" type="checkbox"> 金色梦乡</li><li><input disabled="" type="checkbox"> 余生皆假期</li><li><input disabled="" type="checkbox"> 铁鼠之槛</li><li><input disabled="" type="checkbox"> 罗杰疑案</li><li><input disabled="" type="checkbox"> 尼罗河上的惨案</li><li><input disabled="" type="checkbox"> 十角馆事件</li><li><input disabled="" type="checkbox"> 一朵桔梗花</li><li><input disabled="" type="checkbox"> 夏与冬的奏鸣曲</li><li><input disabled="" type="checkbox"> 异邦骑士</li><li><input disabled="" type="checkbox"> 七个证人</li></ul><h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h3><ul><li><input disabled="" type="checkbox"> 控方证人</li><li><input disabled="" type="checkbox"> 消失的爱人</li><li><input disabled="" type="checkbox"> 彗星来的那一夜</li><li><input disabled="" type="checkbox"> 穆赫兰道</li><li><input disabled="" type="checkbox"> 搏击俱乐部</li><li><input disabled="" type="checkbox"> 东方快车谋杀案</li><li><input disabled="" type="checkbox"> 致命ID</li><li><input disabled="" type="checkbox"> 七宗罪</li><li><input checked="" disabled="" type="checkbox"> 天使与魔鬼 &lt;2020-01-05 Sun&gt;</li><li><input checked="" disabled="" type="checkbox"> 达芬奇密码 &lt;2020-01-05 Sun&gt;</li></ul><h3 id="连续剧"><a href="#连续剧" class="headerlink" title="连续剧"></a>连续剧</h3><ul><li><input checked="" disabled="" type="checkbox"> 神探伽利略 &lt;2020-01-04 Sat&gt;</li><li><input disabled="" type="checkbox"> 犯罪心理2</li><li><input disabled="" type="checkbox"> 犯罪心理3</li><li><input disabled="" type="checkbox"> 犯罪心理4</li><li><input disabled="" type="checkbox"> 犯罪心理5</li><li><input disabled="" type="checkbox"> 犯罪心理6</li><li><input disabled="" type="checkbox"> 犯罪心理7</li><li><input disabled="" type="checkbox"> 犯罪心理8</li><li><input disabled="" type="checkbox"> 不死法医</li><li><input disabled="" type="checkbox"> 劳拉之谜</li><li><input disabled="" type="checkbox"> 大小谎言</li><li><input disabled="" type="checkbox"> Lie to me</li><li><input disabled="" type="checkbox"> 神探夏洛克</li><li><input disabled="" type="checkbox"> 布雷德利夫人探案</li><li><input disabled="" type="checkbox"> 骇人命案事件簿</li><li><input disabled="" type="checkbox"> 无妄之灾</li><li><input disabled="" type="checkbox"> 我的恐怖妻子</li></ul><h2 id="2019-年读书观影清单"><a href="#2019-年读书观影清单" class="headerlink" title="2019 年读书观影清单"></a>2019 年读书观影清单</h2><h3 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h3><ul><li><input checked="" disabled="" type="checkbox"> 尸语者</li><li><input checked="" disabled="" type="checkbox"> 无声的证词</li><li><input checked="" disabled="" type="checkbox"> 十一根手指</li><li><input checked="" disabled="" type="checkbox"> 清道夫</li><li><input checked="" disabled="" type="checkbox"> 幸存者</li><li><input checked="" disabled="" type="checkbox"> 偷窥者</li><li><input checked="" disabled="" type="checkbox"> 天谴者</li><li><input checked="" disabled="" type="checkbox"> 大唐狄公案 一</li><li><input checked="" disabled="" type="checkbox"> 大唐狄公案 二</li><li><input checked="" disabled="" type="checkbox"> 大唐狄公案 三</li><li><input checked="" disabled="" type="checkbox"> 大唐狄公案 四</li><li><input checked="" disabled="" type="checkbox"> 大唐狄公案 五</li><li><input checked="" disabled="" type="checkbox"> 大唐狄公案 六</li><li><input checked="" disabled="" type="checkbox"> 心理罪系列</li></ul><h3 id="电影-1"><a href="#电影-1" class="headerlink" title="电影"></a>电影</h3><ul><li><input checked="" disabled="" type="checkbox"> 惊奇队长</li><li><input checked="" disabled="" type="checkbox"> 复仇者联盟 4</li><li><input checked="" disabled="" type="checkbox"> 惊声尖笑 1</li><li><input checked="" disabled="" type="checkbox"> 惊声尖笑 2</li><li><input checked="" disabled="" type="checkbox"> 惊声尖笑 3</li><li><input checked="" disabled="" type="checkbox"> 惊声尖笑 4</li><li><input checked="" disabled="" type="checkbox"> x 战警：黑凤凰</li><li><input checked="" disabled="" type="checkbox"> 黑衣人：全球追缉</li><li><input checked="" disabled="" type="checkbox"> 蜘蛛侠：英雄远征</li><li><input checked="" disabled="" type="checkbox"> 看不见的客人</li><li><input checked="" disabled="" type="checkbox"> 深夜食堂 &lt;2019-10-04 Fri&gt;</li><li><input checked="" disabled="" type="checkbox"> 大侦探皮卡丘 &lt;2019-10-05 Sat&gt;</li><li><input checked="" disabled="" type="checkbox"> 超能陆战队 &lt;2019-10-06 Sun&gt;</li><li><input checked="" disabled="" type="checkbox"> 沉默的证人 &lt;2019-10-10 Thu&gt;</li></ul><h3 id="连续剧-1"><a href="#连续剧-1" class="headerlink" title="连续剧"></a>连续剧</h3><ul><li><input checked="" disabled="" type="checkbox"> 东宫</li><li><input checked="" disabled="" type="checkbox"> 知否知否应是绿肥红瘦</li><li><input checked="" disabled="" type="checkbox"> 犯罪心理1</li><li><input checked="" disabled="" type="checkbox"> 无人生还</li><li><input checked="" disabled="" type="checkbox"> 心理法医</li></ul><h2 id="专题电影记录"><a href="#专题电影记录" class="headerlink" title="专题电影记录"></a>专题电影记录</h2><h3 id="漫威系列"><a href="#漫威系列" class="headerlink" title="漫威系列"></a>漫威系列</h3><ul><li><input checked="" disabled="" type="checkbox"> 《钢铁侠》</li><li><input checked="" disabled="" type="checkbox"> 《钢铁侠》</li><li><input checked="" disabled="" type="checkbox"> 《无敌浩克》</li><li><input checked="" disabled="" type="checkbox"> 《钢铁侠2》</li><li><input checked="" disabled="" type="checkbox"> 《雷神》</li><li><input checked="" disabled="" type="checkbox"> 《美国队长》</li><li><input checked="" disabled="" type="checkbox"> 《复仇者联盟》</li><li><input checked="" disabled="" type="checkbox"> 《钢铁侠3》</li><li><input checked="" disabled="" type="checkbox"> 《雷神2》</li><li><input checked="" disabled="" type="checkbox"> 《美国队长2》</li><li><input checked="" disabled="" type="checkbox"> 《银河护卫队》</li><li><input checked="" disabled="" type="checkbox"> 《复仇者联盟2》</li><li><input checked="" disabled="" type="checkbox"> 《蚊人》</li><li><input checked="" disabled="" type="checkbox"> 《美国队长3》</li><li><input checked="" disabled="" type="checkbox"> 《奇异博士》</li><li><input checked="" disabled="" type="checkbox"> 《银河护卫队2》</li><li><input checked="" disabled="" type="checkbox"> 《蜘蛛侠》</li><li><input checked="" disabled="" type="checkbox"> 《雷神3》</li><li><input checked="" disabled="" type="checkbox"> 《黑豹》</li><li><input checked="" disabled="" type="checkbox"> 《复仇者联盟3》</li><li><input checked="" disabled="" type="checkbox"> 《死待》</li><li><input checked="" disabled="" type="checkbox"> 《死待2》</li><li><input checked="" disabled="" type="checkbox"> 《蜘蛛侠-英雄归来》 『2017-9-15』</li><li><input checked="" disabled="" type="checkbox"> 《复仇者联盟3:无限战争》『2018-5-13』</li><li><input checked="" disabled="" type="checkbox"> 《蚁人2:黄蜂女现身》『2018-8-24』</li><li><input checked="" disabled="" type="checkbox"> 《毒液:致命守护者》『2018-11-11』</li><li><input checked="" disabled="" type="checkbox"> 《蜘蛛侠》</li><li><input checked="" disabled="" type="checkbox"> 《蜘蛛侠2》</li><li><input checked="" disabled="" type="checkbox"> 《蜘蛛侠3》</li></ul><h3 id="DC-影业"><a href="#DC-影业" class="headerlink" title="DC 影业"></a>DC 影业</h3><ul><li><input checked="" disabled="" type="checkbox"> 《正义联盟》『2017-11-22』</li><li><input checked="" disabled="" type="checkbox"> 《海王》『2018-12-09』</li></ul><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul><li><input checked="" disabled="" type="checkbox"> 《神奇动物在哪里：格林德沃之罪》『2018-11-24』</li><li><input checked="" disabled="" type="checkbox"> 《你的名字》『2017-11-20』</li><li><input checked="" disabled="" type="checkbox"> 《银魂》『2017-9-1』</li><li><input checked="" disabled="" type="checkbox"> 《疯狂动物城》</li><li><input checked="" disabled="" type="checkbox"> 《看不见的客人》 『2017-9-17』</li><li><input checked="" disabled="" type="checkbox"> 《天才枪手》</li><li><input checked="" disabled="" type="checkbox"> 《环太平洋 雷霆再起》『2018-6-24』</li><li><input checked="" disabled="" type="checkbox"> 《神探》『2018-5-25』</li><li><input checked="" disabled="" type="checkbox"> 《古墓丽影 缘起之战》『2018-6-27』</li><li><input checked="" disabled="" type="checkbox"> 《玛丽与魔女之花》 『2018-6-28』</li><li><input checked="" disabled="" type="checkbox"> 《泄密者》『2018-7-19』</li><li><input checked="" disabled="" type="checkbox"> 《唐人街探案2》『2018-2-22』</li><li><input checked="" disabled="" type="checkbox"> 《无双》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
          <category> 年度清单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书清单 </tag>
            
            <tag> 电影清单 </tag>
            
            <tag> 电视清单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valine 评论使用报错 504</title>
      <link href="/hexo-blog/2019/12/19/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/valine-504-error/"/>
      <url>/hexo-blog/2019/12/19/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/valine-504-error/</url>
      
        <content type="html"><![CDATA[<p>最近准备重新配置一下 <a href="https://www.zucchiniy.cn">个人博客</a> ，由原来的 <a href="https://gohugo.io/" target="_blank" rel="noopener">Hugo</a> 改到 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 来做。</p><p>评论系统也由之前的 <a href="https://disqus.com/" target="_blank" rel="noopener">disqus</a> 改成现在的 <a href="https://valine.js.org/" target="_blank" rel="noopener">valine</a> 。</p><p>主题也使用了非常好看的 Material Design 的样式的 <a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">Material-x</a> ，并在此之上进行修改。</p><p>完成初始的配置之后，做一下测试。</p><p>恩。。。报错了？！</p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/valine-504-error-1.png" alt="Code 504: The app is archived, please restore in console before use."></p><p>虽然报错，但是可以正确的显示对应的服务，查询了一下原因，发现是因为长时间未使用 LeanCode 的服务，导致文件上传域名无法访问了，需要在 <strong>设置-&gt;应用 Keys</strong> 下面，选择重启 <strong>文件上传域名</strong> 和 <strong>文件访问域名</strong> 的服务即可。</p><p>具体的位置如下：</p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/valine-504-error-2.png" class="" width="300" height="150" title="valine-504-error-2">]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> valine </tag>
            
            <tag> Code 504 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 转换 Markdown 方法</title>
      <link href="/hexo-blog/2019/10/12/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/python/python-convert-markdown-to-html/"/>
      <url>/hexo-blog/2019/10/12/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/python/python-convert-markdown-to-html/</url>
      
        <content type="html"><![CDATA[<p>昨天看书的时候，看到了作者留的一个练习，是将 Markdown 的文档转换成 HTML 的方法。类似的标记语言还有 RestruredText 和 Org Mode，但是貌似 Org 比较小众，暂没有。</p><p>在 Django 中进行转换有两个方案，一个是直接安装 markdown 的模块，<code>pip install markdown</code> ，这种方式是直接将 Markdown 渲染成 HTML ，但是在 Django 项目中需要使用模板进行渲染，会导致样式改变，所以需要增加 <code>safe</code> 到模板中，表示不需要转义。</p><p>代码块如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 view.py 里使用 markdown 进行渲染</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> markdown</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page</span><span class="params">(request, name)</span>:</span></span><br><span class="line">    template = get_template(<span class="string">'doc.html'</span>)</span><br><span class="line">    docfile = get_template(<span class="string">'doc/&#123;&#125;.md'</span>.format(name))</span><br><span class="line">    content = docfile.render()</span><br><span class="line">    html = template.render(&#123;</span><br><span class="line">        <span class="string">'docname'</span> : name</span><br><span class="line">        <span class="string">'content'</span> : markdown.markdown(content,</span><br><span class="line">                                      extensions=[</span><br><span class="line">                                          <span class="string">'markdown.extensions.extra'</span>,</span><br><span class="line">                                          <span class="string">'markdown.extensions.codehilite'</span>,</span><br><span class="line">                                          <span class="string">'markdown.extensions.tox'</span>,</span><br><span class="line">                                          ])</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">'en'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123; content | safe &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另一个方案是使用 <strong>django.markdown-deux</strong> 进行渲染，首先在 <em>INSTALL_APPS</em> 中增加 <strong>markdown-deux</strong> , 然后模板里引用这个标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">'en'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% load markdown-duex-tags %&#125;</span><br><span class="line">    &#123;&#123; content | markdown &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样也可以将 Markdown 直接渲染成网页了。</p>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> markdown </tag>
            
            <tag> markdown-deux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Python 生成数据透视表</title>
      <link href="/hexo-blog/2019/08/09/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/python/python-process-excel/"/>
      <url>/hexo-blog/2019/08/09/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/python/python-process-excel/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>利用 <code>read_excel()</code> 的 <em>usecols</em> 参数来指定表的某一列，以方便排除不必要的干扰列</li><li>养成数据加载以后，使用 <code>head()</code> 进行预览的习惯</li><li>养成使用 <code>shape()</code> 及 <code>info()</code> 了解表格基本情况的习惯</li></ul><p>利用 <code>info()</code> 方法查看数据中是否有空值，如果有空值的话，则可以使用 <code>dropna()</code> 方法将其移除。</p><p>需要掌握的主要有两个方法:</p><ul><li><code>DataFrame.insert()</code> 方法，用来增加对应的列</li><li><code>DataFrame.pivot_table()</code> 产生透视图，展示重要的数据</li></ul><a id="more"></a><h2 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h2><ul><li><code>DataFrame.insert(self, loc, column, value, allow_duplicates=False)</code></li></ul><p>loc : int 表示第几列；0 &lt;= loc &lt;= len(columns)<br>column : string, number, or hashable object;给插入的列取名，如 column=’新的一列’<br>value : int ，array，series<br>allow_duplicates : bool 是否允许列名重复，选择 True 表示允许新的列名与已存在的列名重复。</p><ul><li><code>DataFrame.pivot_table(self, values=None, index=None, columns=None, aggfunc=&#39;mean&#39;, fill_value=None, margins=False, dropna=True, margins_name=&#39;All&#39;, observed=False)</code></li></ul><p>values : 要进行透视展示的数据<br>index : 需要重新进行展示成列，是原始数据中的某一个行<br>columns : 要重新展示为行的内容，是原来的列或者是其它的属性，可以是列表<br>aggfunc : 要进行统计的行，可以是 <code>numpy.sum</code> / <code>numpy.mean</code> 等，也可以按列进行统计 <code>aggfunc={&#39;c1&#39; : numpy.mean, &#39;c2&#39; : numpy.sum}</code><br>fill_value : 将缺失值替换的值，幽灵将 Nan 换成 0 : <code>fill_value=0</code><br>margins : bool, 增加行或者列的汇总信息<br>dropna : bool ，是否要删除为空的信息<br>margin_name : string , 默认为 all ，或者自定义一个名称 observed bool , True 显示分类中的数据，False 显示所有数据，默认为 False</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">data = pd.read_excel(<span class="string">r'python_learning.xlsx'</span>,</span><br><span class="line">                     usecols=[<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>], sheet_name=<span class="string">'sheetName'</span>)</span><br><span class="line">data = data[data[<span class="string">'合同生效日'</span>] &gt; datetime(<span class="number">2018</span>, <span class="number">12</span>, <span class="number">31</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按逻辑，将一组数据拆成三组</span></span><br><span class="line">data1 = data[[<span class="string">"used"</span>, <span class="string">"loan amount"</span>, <span class="string">"company1"</span>, <span class="string">"percent1"</span>]]</span><br><span class="line">data2 = data[[<span class="string">"used"</span>, <span class="string">"loan amount"</span>, <span class="string">"company2"</span>, <span class="string">"percent2"</span>]]</span><br><span class="line">data3 = data[[<span class="string">"used"</span>, <span class="string">"loan amount"</span>, <span class="string">"company3"</span>, <span class="string">"percent3"</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将三组内容，重新命名之后合成一个新表</span></span><br><span class="line">data1 = data1.rename(columns=&#123;<span class="string">"company1"</span>: <span class="string">"company"</span>, <span class="string">"percent1"</span>: <span class="string">"percent"</span>&#125;)</span><br><span class="line">data2 = data2.rename(columns=&#123;<span class="string">"company2"</span>: <span class="string">"company"</span>, <span class="string">"percent2"</span>: <span class="string">"percent"</span>&#125;)</span><br><span class="line">data3 = data3.rename(columns=&#123;<span class="string">"company3"</span>: <span class="string">"company"</span>, <span class="string">"percent3"</span>: <span class="string">"percent"</span>&#125;)</span><br><span class="line"></span><br><span class="line">data4 = pd.concat([data1, data2, data3], ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据中的空值清除</span></span><br><span class="line">data4 = data4.dropna()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入新的数据</span></span><br><span class="line"><span class="comment"># 1. insert() 方法</span></span><br><span class="line">data4.insert(<span class="number">2</span>, <span class="string">"devide percent"</span>, data4[<span class="string">"percent"</span>]/<span class="number">100</span>)</span><br><span class="line">data4.insert(<span class="number">5</span>, <span class="string">"devide amount"</span>, data4[<span class="string">"loan amount"</span>]*data4[<span class="string">"deivide percent"</span>]/<span class="number">10000</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通索引方式插入</span></span><br><span class="line"><span class="comment"># data4["loan divide amount"] = data4["load amount"]*data4["deivide percent"]/10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加数据透视</span></span><br><span class="line">data5 = data4[[<span class="string">'company'</span>, <span class="string">'used'</span>, <span class="string">'loan amount'</span>]]</span><br><span class="line">data6 = pd.pivot_table(data5, values=<span class="string">"loan divide amount"</span>, columns=<span class="string">"used"</span>, index=<span class="string">"company"</span>,</span><br><span class="line">                       aggfunc=<span class="string">'sum'</span>, fill_value=<span class="number">0</span>, observed=<span class="literal">False</span>).reset_index()</span><br><span class="line">print(data6.head())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 透视表 </tag>
            
            <tag> read_excel() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简历中的水平</title>
      <link href="/hexo-blog/2019/08/05/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/knowledge-level-in-resume/"/>
      <url>/hexo-blog/2019/08/05/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/knowledge-level-in-resume/</url>
      
        <content type="html"><![CDATA[<p>在写自己的简历的时候，有时候会有对自己的水平不清楚，查了一些资料，大概了解了一下相关的水平。</p><p>了解 : 知道，不会做，找个人带着可以帮点忙</p><p>熟悉 : 知道，能做 60%-80% 的工作。但碰到难题需要指导一下</p><p>熟练（掌握）: 95% 以上的相关工作进季可 <strong>独立完成</strong> ，无需指导帮忙。且能在 <strong>工作技巧上指导</strong> “了解”、“熟悉”</p><p>精通 : “熟练” 那 5% 解决不了的，“精通” 可以攻关完成。“精通”最主要的价值是可以 <strong>技术预研，能改革现有程序或者方法，解决新问题</strong> 。精通另一点价值是能解脱民 <strong>单一领域多层次问题</strong> ，或 <strong>多领域单一层次问题</strong> 。</p><p>看了一些文章，很多招聘需求中都写着要精通某一技术，很多人说这个有点高了，但其实有可能这里的精通是指的熟练这一级别，毕竟 <strong>精通</strong> 可以说是达到了某一领域中的极限，很多工作并不需要这样的人，除非真的是非常重要的位置。而一般招聘信息中的可能是指的英文中的 <strong>Proficient</strong> 也就和 <strong>熟练（掌握）</strong> 同样的层级，一般英文级别是 <strong>Novice</strong> / <strong>Basic</strong> / <strong>Proficient</strong> / <strong>Advance</strong> / <strong>Expert</strong> 这五个级别。</p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
          <category> 简历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> resume </tag>
            
            <tag> level </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs Keymap 优先级</title>
      <link href="/hexo-blog/2019/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/emacs-keymap-priority/"/>
      <url>/hexo-blog/2019/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/emacs-keymap-priority/</url>
      
        <content type="html"><![CDATA[<p>编写 Emacs 的配置文件，无论如何也不能绕开快捷键，对于快捷键一般都是 <code>define-key</code> 方法来实现按键绑定，但是对于不同的 <strong>keymap</strong> 拥有不同的优先级，通过 <strong>keymap</strong> 优先级，可以了解到快捷键间的覆盖关系。</p><p><code>key-translation-map</code> : 最高级，就是把这个键的意义改变了，想使用原来的快捷键，要重新进行绑定</p><p><code>minor-mode-map</code> : 二级，只在 <strong>minor mode</strong> 激活时启作用，其它时候会被其它的快捷键覆盖掉</p><p><code>local-set-key</code> : 三级，在 <strong>major mode</strong> 中启作用</p><p><code>global-set-key</code> : 最弱的级别，但是也是最简单的键绑定方式</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keymap </tag>
            
            <tag> keybinds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>brew 不常用命令</title>
      <link href="/hexo-blog/2019/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/mac/brew-unused-command/"/>
      <url>/hexo-blog/2019/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/mac/brew-unused-command/</url>
      
        <content type="html"><![CDATA[<p><code>brew services</code> 命令是用来管理 Mac 系统中后台服务的，比如在 Mac 上安装了 MySQL ，当我希望将这个变成一个后台服务启动的时候，可以使用，有点像 Linux 下的 <code>service</code> 和 <code>systemctl</code> 两个命令。</p><p>具体的使用命令也非常简单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew services list  # 查看使用brew安装的服务列表</span><br><span class="line">brew services run formula|--all  # 启动服务（仅启动不注册）</span><br><span class="line">brew services start formula|--all  # 启动服务，并注册</span><br><span class="line">brew services stop formula|--all   # 停止服务，并取消注册</span><br><span class="line">brew services restart formula|--all  # 重启服务，并注册</span><br><span class="line">brew services cleanup  # 清除已卸载应用的无用的配置</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> brew </tag>
            
            <tag> 服务列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 中辅助键设置</title>
      <link href="/hexo-blog/2019/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/emacs-hyper-keybinds/"/>
      <url>/hexo-blog/2019/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/emacs-hyper-keybinds/</url>
      
        <content type="html"><![CDATA[<p>使用 Emacs 的人，一般都对快捷键的前缀 <em>C</em> 和 <em>M</em> 键不陌生，但其实在 Emacs 中，除了常见的 <em>C</em> 和 <em>M</em> 之外，还有 <em>s</em> 和 <em>H</em> 两个辅助键，但是在不同的操作系统中，辅助键的设置方法也是不一样的，但是我们可以通过在 <code>init.el</code> 文件中设置键位来保证快捷键的一致。</p><ul><li>在 windows 系统下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(setq w32-pass-lwindow-to-system nil)</span><br><span class="line">(setq w32-lwindow-modifier &#39;super) ; Left Windows key</span><br><span class="line"></span><br><span class="line">(setq w32-pass-rwindow-to-system nil)</span><br><span class="line">(setq w32-rwindow-modifier &#39;super) ; Right Windows key</span><br><span class="line"></span><br><span class="line">(setq w32-pass-apps-to-system nil)</span><br><span class="line">(setq w32-apps-modifier &#39;hyper) ; Menu&#x2F;App key</span><br></pre></td></tr></table></figure><ul><li>在 Mac 系统下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(setq mac-command-modifier &#39;meta) ; make cmd key do Meta</span><br><span class="line">(setq mac-option-modifier &#39;super) ; make opt key do Super</span><br><span class="line">(setq mac-control-modifier &#39;control) ; make Control key do Control</span><br><span class="line">(setq ns-function-modifier &#39;hyper)  ; make Fn key do Hyper</span><br></pre></td></tr></table></figure><p>在如此配置之后，绑定快捷键过程中，super 对应的是 <em>s</em> 前缀，hyper 对应的是 <em>H</em> 的前缀。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(global-set-key (kbd &quot;H-b&quot;) &#39;backward-word) ; 绑定的 Hyper 键</span><br><span class="line">(global-set-key (kbd &quot;s-b&quot;) &#39;backward-word) ; 绑定的 super 键</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keymap </tag>
            
            <tag> super </tag>
            
            <tag> hyper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 电脑上使用 Emacs</title>
      <link href="/hexo-blog/2019/07/29/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/emacs-in-mac/"/>
      <url>/hexo-blog/2019/07/29/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/emacs-in-mac/</url>
      
        <content type="html"><![CDATA[<p>在 Mac 上使用 Emacs 有两个方案，从 <a href="https://emacsformacosx.com/" target="_blank" rel="noopener">Emacs For Mac OS X</a> 手工下载，然后更新本地，或者是在 <strong>homebrew</strong> 中增加配置，然后利用 <code>brew upgrade</code> 从 <a href="https://github.com/railwaycat/homebrew-emacsmacport" target="_blank" rel="noopener">homebrw-emacsmacport</a> 上进行下载和更新。</p><p>两种方式获取的 Emacs 有少许不同，具体的见两个项目的简介。</p><p>第二种方法的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap railwaycat/emacsmacport</span><br><span class="line">brew install emacs-mac</span><br></pre></td></tr></table></figure><p>安装之后，如果要从启动台启动应用，需要在 <em>/applications</em> 和安装位置增加软链接，命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/opt/emacs-mac/Emacs.app/Applications</span><br></pre></td></tr></table></figure><p>这样之后就可以直接在 <strong>Alfred</strong> 中输入 <code>emacs</code> 直接启动。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> install Emacs </tag>
            
            <tag> Mac OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现自己的子弹笔记</title>
      <link href="/hexo-blog/2019/07/18/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/bullet-journal-for-myself/"/>
      <url>/hexo-blog/2019/07/18/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/bullet-journal-for-myself/</url>
      
        <content type="html"><![CDATA[<p>已经坚持记笔记和做手帐有大概 2 年的时间了，从最开始的只是记，到后来的坚持用手帐进行时间管理，让我获益良多，从最开始的记到后来的边记边思考，到再后来的不停的换手帐的内容，随着改变，也越来越习惯于手帐本身。</p><p>最近买了一本 <strong>《子弹笔记》</strong> 一直在阅读和学习其中的方法，确实比自己的要谘和有用，但是简单的照搬却又不太习惯，所以想整理一下其中有用的思想，然后进行个性化。</p><p>子弹笔记官方网站：<a href="https://bulletjournal.com/" target="_blank" rel="noopener">https://bulletjournal.com/</a></p><h2 id="思想清单"><a href="#思想清单" class="headerlink" title="思想清单"></a>思想清单</h2><ol><li>第一栏列出所有的 <strong>正在</strong> 做的事情</li><li>第二栏列出所有的 <strong>应该</strong> 做的事情</li><li>第三栏列出所有的 <strong>你想</strong> 做的事情</li></ol><h3 id="回顾思想清单"><a href="#回顾思想清单" class="headerlink" title="回顾思想清单"></a>回顾思想清单</h3><ol><li>画去不要紧的，或者不重要的内容</li><li>找出相关的内容，创建个性化的集子</li></ol><h3 id="迁移思想清单"><a href="#迁移思想清单" class="headerlink" title="迁移思想清单"></a>迁移思想清单</h3><ul><li>把未来事项移入未来记录</li><li>把当月事项移行进月度记录</li><li>为月度记录排列主次</li><li>把优先事项迁移进每日记录</li><li>把附加事项迁移进对应的修改化集子</li></ul><h2 id="关键内容"><a href="#关键内容" class="headerlink" title="关键内容"></a>关键内容</h2><p>索引 : 利用标题和页码定位笔记的内容，而索引无需连续；专用索引与集子类似，提供特定的主题的索引</p><p>未来记录 : 用来记录本月以外的任务和事件</p><p>月度记录 : 用于一览本月的时间安排和任务。也可以作为你本月的思想清单</p><p>每日记录 : 用于快速记录下每一天里所有的想法</p><p>快速记录 : 利用简短的符号快速捕捉想法，分成笔记、事件、任务三类，并排序。</p><p>集子 : 笔记中模块化的构成部分，用于储存紧密相关的内容。核心领子有索引、未来记录、月度记录、每日记录，但也支持个性化设计。</p><p>迁移 : 每月从笔记本中过滤掉的无意义的内容的过程</p><p>快速记录中，任务、事件、笔记三种的意义：</p><p>任务 : <strong>需要</strong> 做的事情，用 “.” 标记，同样的，迁移任务使用 “&gt;” 标记，计划中的任务用 “&lt;” 标记，移除的任务用 <del>删除线</del> 表示</p><p>事件 : <strong>经历</strong> 过的事情，用 “o” 标记</p><p>笔记 : <strong>不想遗忘</strong> 的事情，用 “-” 标记</p><p>特殊的一些标记，比如重点任务、灵感、长笔记</p><p>重点任务 : 在任务前加 “*”</p><p>灵感 : 在任务前增加 “!”</p><p>长笔记 : 有特殊的想法或者想额外的记录一些内容，使用 “+” 标记</p><h3 id="日历页"><a href="#日历页" class="headerlink" title="日历页"></a>日历页</h3><p>在日历页上，左侧按顺序列出日期，并在日期右侧附上星期，在左侧留出空白空间，以便后续增加特殊符号。</p><h3 id="任务页"><a href="#任务页" class="headerlink" title="任务页"></a>任务页</h3><p>月度记录中的任务页是不断的更新的思想清单，如果有最终的时候，可以未完成的时候进行迁移，也可以调整日期。</p><h3 id="未来记录"><a href="#未来记录" class="headerlink" title="未来记录"></a>未来记录</h3><p>未来记录主要是将本月无法完成的项目，提前写入到未来日记中，或者是读书、学习的特殊记划，这样在月度记录的时候，就能很好的规划我们的生活。</p><h3 id="引线法"><a href="#引线法" class="headerlink" title="引线法"></a>引线法</h3><p>索引有时候页码不连续，但是使用过程中，又不想过多翻回到索引页观看，可以使用引线法，比如在第二块的初始页面中，可以使用 <strong>“当前页码/前一部分页码”</strong> 的形式进行记录，而同理，结束部分则使用 <strong>“后一部分页码/当前页码”</strong> ，这种方式可以扩展到不同的本子中，比如使用 <strong>“第几册.第多少页”</strong> 这种形式记录。</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><h3 id="旅行计划"><a href="#旅行计划" class="headerlink" title="旅行计划"></a>旅行计划</h3><p>描述 : 包括要去什么地方，要做什么，和谁一起去，是旅行还是休闲</p><p>目的地 : 记录了这次要去的地方，包括景点、住宿等</p><p>活动 : 想做什么？旅伴想做什么？</p><p>时间 : 航班时间、当地交通、活动的时间等</p><p>预算 : 机票、租车、住宿、汽油、伙食、活动、购物、礼品</p><h3 id="行程计划"><a href="#行程计划" class="headerlink" title="行程计划"></a>行程计划</h3><p>要记录我们出行过程中的事情，比如从哪儿飞到哪儿，怎么入住，有什么特殊的事件吗，等等问题，可以按地点进行记录。</p><ul><li>第一栏记录机场，包含对应的事件的页码</li><li>第二栏记录时间，包括星期和日期</li><li>第三栏记录时间轴上的任务，比如入住酒店、退房、飞住什么地方、要做事情，可以有效的进行规划</li></ul><h2 id="个性化调整"><a href="#个性化调整" class="headerlink" title="个性化调整"></a>个性化调整</h2><h3 id="长笔记"><a href="#长笔记" class="headerlink" title="长笔记"></a>长笔记</h3><p>长笔记可以记录某一件事情的后续，或者是有什么想法，为什么有这个想法，或者是与人发生了什么样的交流，甚至是思考了什么问题，或者是对某件事的感想，这些可以培养记录的好习惯。</p><h3 id="习惯养成"><a href="#习惯养成" class="headerlink" title="习惯养成"></a>习惯养成</h3><p>这个是与月历相关，可以在页面上记录一个月的习惯养成情况，与日历上的日期一一对应，比如坚持运动、阅读等事情，或者是增加一些希望养成的习惯。</p><p>针对阅读，可以设定为阅读某一本书，或者是阅读多少时间，这样可以让任务更具体，而越是具体的任务，越容易完成。</p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
          <category> 手帐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 子弹笔记 </tag>
            
            <tag> 手帐体系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 刷机实践</title>
      <link href="/hexo-blog/2019/04/10/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/android-flashboot/"/>
      <url>/hexo-blog/2019/04/10/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/android-flashboot/</url>
      
        <content type="html"><![CDATA[<h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><p>#在刷机之前，需要在电脑上下载 <strong>Android Preview</strong> 包，一般我都是到<a href="https://developer.android.google.cn/preview/download#flash" target="_blank" rel="noopener">安卓中国</a> ，这里可以下载最新的包。</p><h2 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h2><p>相对下载包的获取，比较难的是有一部支持最新的安卓系统的手机，一般 <strong>Preview</strong> 版的系统都是默认支持 <strong>Google</strong> 自己的手机的。</p><p>目前只支持 Pixel 系列的手机，包括 XL 系列。</p><ul><li>Pixel n</li><li>Pixel n XL</li></ul><h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><p>刷机目前有两个比较麻烦的地方，第一就是需要安装 <code>adb</code> 的命令，也就是 <strong>Android</strong> 的功能模块，第二就是需要解锁手机。</p><h3 id="adb-配置"><a href="#adb-配置" class="headerlink" title="adb 配置"></a>adb 配置</h3><p>即将 <strong>Android SDK</strong> 下载下来，然后将其配置到环境变量中即可</p><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><ol><li>配置 <strong>ANDROID_HOME</strong> 变量到环境变量中</li><li>配置 <strong>%ANDROID_HOME%\platform-tools</strong> 到 <strong>path</strong> 中</li><li>配置 <strong>%ANDROID_HOME%\tools</strong> 到 <strong>path</strong> 中</li></ol><h4 id="Linux-amp-Mac"><a href="#Linux-amp-Mac" class="headerlink" title="Linux &amp; Mac"></a>Linux &amp; Mac</h4><p>打开 <strong>profile</strong> 文件，默认为 <em>.bash_profile</em> 如果使用的是 <strong>zsh</strong> 则编辑 <em>.zshrc</em> 文件。</p><p>将下面的内容放到 <strong>profile</strong> 文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ANDROID_HOME=~/developerTools/adt-mac/sdk</span><br><span class="line">export ANDROID_HOME</span><br><span class="line">PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</span><br></pre></td></tr></table></figure><h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><p>Mac 电脑提供了一个自动安装的内容，可以将 <code>adb</code> 相关的内容直接安装，但是如果是想开发 <strong>Android</strong> 应用的话，则必须要按上面的方案进行配置。</p><p>首先需要先安装 <strong>brew</strong> ，具体方案见 <a href="https://brew.sh/index%5Fzh-cn" target="_blank" rel="noopener">Homebrew</a> ，或者可以直接看其 <strong>GitHub</strong> 的主页 <a href="https://github.com/Homebrew/brew" target="_blank" rel="noopener">Homebrew/brew</a> 。</p><p>然后执行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install android-platform-tools</span><br></pre></td></tr></table></figure><p>如果执行刷机的时候，提示 <strong>fastboot is too old</strong> 则需要重新安装 <em>android-platform-tools</em> , 因为 <code>brew update</code> 更新是不能更新 <em>cask</em> 库的内容的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask reinstall android-platform-tools</span><br></pre></td></tr></table></figure><p>最后，在命令行中执行 <code>adb devices</code> 不报错刚配置成功。如果配置之后，还依然报错的话，可以检查一下是否在使用过程中，将 <strong>USB 调试功能</strong> 关闭了。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol><li><p>连接手机</p></li><li><p><code>adb devices</code> 获取手机的 <strong>device id</strong></p></li><li><p><code>adb reboot bootloader</code> 进入 <strong>bootloader</strong> 模式</p></li><li><p><strong>如果已经解锁了，则进入第8步，如果未解锁则进入第五步</strong></p></li><li><p>进入到 <strong>bootloader</strong> 之后，执行 <code>fastboot flashing unlock</code></p></li><li><p>如果是 <strong>Pixel 2 XL</strong> 则执行 <code>fastboot flashing unlock_critical</code></p></li><li><p>如果是更早的设备，则需要执行 <code>fastboot oem unlock</code></p></li><li><p>进入下载的目录，然后执行 <strong>flash-all</strong> 脚本，如果是 <em>Windows</em> 则是 <code>flash-all.bat</code> ，其它的则执行 <code>flash-all.sh</code></p></li><li><p>执行结束后，手机就已经刷好了，重启就可以使用了</p></li><li><p>如果执行失败的话，就需要解压目录下的 <em>image</em> 对应的包，然后执行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash vendor vendor.img</span><br><span class="line">fastboot flash boot boot.img</span><br><span class="line">fastboot flash system system.img</span><br></pre></td></tr></table></figure></li></ol><p>然后重启手机就可以了。</p><h3 id="V-版手机解锁"><a href="#V-版手机解锁" class="headerlink" title="V 版手机解锁"></a>V 版手机解锁</h3><p>需要刷入一个工具，才能解锁</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb push dePixel8 /data/local/tmp</span><br><span class="line">adb shell chmod 755 /data/local/tmp/dePixel8</span><br><span class="line">adb shell /data/local/tmp/dePixel8</span><br></pre></td></tr></table></figure><p>然后再执行 <code>adb reboot bootloader</code> 就可以正常解锁了。</p><p><a href="http://theroot.ninja/depixel8.html" target="_blank" rel="noopener">dePixel8.zip 下载</a></p><p>判断是否 V 版手机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop|grep cid</span><br></pre></td></tr></table></figure><p>如果出现 <strong>VZW_001</strong> 就是 V 版手机</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓系统 </tag>
            
            <tag> 手动更新手机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 功能键配置</title>
      <link href="/hexo-blog/2019/02/26/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/emacs-modifier-keys/"/>
      <url>/hexo-blog/2019/02/26/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/emacs-modifier-keys/</url>
      
        <content type="html"><![CDATA[<p>Emacs 和 Vim 最大的就是快捷键的体系不同，在 Emacs 中，快捷键要有对应的控制键配合，才能正常使用，比如打开 <strong>Agenda</strong> <code>C-c a</code> 一般指的是 <code>Ctrl + c a</code> 而在 Emacs 中，使用的控制键主要有以下几种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s- : supper</span><br><span class="line">S- : Shift</span><br><span class="line">M- : Meta &#x2F; Alt</span><br><span class="line">C- : Ctrl</span><br><span class="line">H- : Hyper</span><br></pre></td></tr></table></figure><p>其中 Ctrl、Meta/Alt、Shift这几种快捷键比较常见，但是 supper 这个键就比较少见了，而且在键盘上，一般也看不到，所以我们在配置的时候，需要在配置中声明这几个键被绑定在哪些键上。</p><p>如果是在 /Windows/ 系统下需要增加如下的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(setq w32-lwindow-modifier &#39;supper</span><br><span class="line">      w32-apps-modifier &#39;hyper)</span><br></pre></td></tr></table></figure><p>但是如果使用的是 /Mac/ 系统的话要增加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(setq mac-command-modifier &#39;meta</span><br><span class="line">      mac-option-modifier &#39;super</span><br><span class="line">      mac-control-modifier &#39;control</span><br><span class="line">      ns-function-modifier &#39;hyper)</span><br></pre></td></tr></table></figure><p>但是这样的情况又有另外一个问题，需要在特定的系统中使用，所以我们要在对应的配置上增加上对系统的判断，绑定的方案如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(when sys&#x2F;winntp</span><br><span class="line">  ;; 经过测试，在 windows 下，window 键是不能修改的</span><br><span class="line">  (setq ;;w32-lwindow-modifier &#39;supper</span><br><span class="line">    w32-apps-modifier &#39;hyper)</span><br><span class="line">  (w32-register-hot-key [s-t]))</span><br><span class="line"></span><br><span class="line">(when sys&#x2F;macp</span><br><span class="line">  (setq mac-command-modifier &#39;meta</span><br><span class="line">    mac-option-modifier &#39;super</span><br><span class="line">    mac-control-modifier &#39;control</span><br><span class="line">    ns-function-modifier &#39;hyper))</span><br></pre></td></tr></table></figure><p>这样我们就可以在不同的系统中正确的使用不同的功能键了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> modifier keys </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让自己生活的更好</title>
      <link href="/hexo-blog/2019/02/11/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/3-step-to-better-one/"/>
      <url>/hexo-blog/2019/02/11/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/3-step-to-better-one/</url>
      
        <content type="html"><![CDATA[<h2 id="学会早睡"><a href="#学会早睡" class="headerlink" title="学会早睡"></a>学会早睡</h2><p>想要早睡，需要减少自己的兴奋点，在生活中，如果无法早睡，白天的工作效率也就会降低，可能要拖拉到半夜才完成，这样就成了一个恶性循环了。</p><p>我尝试过早睡，但是未必能早起，主要是就算我10点躺下，也不可能在10点半入睡，毕竟手机、pad等等太好玩了。</p><p>所以想要早睡的会，要学会给自己降噪。</p><ol><li>早一点运动和洗澡，避免淋水让自己重回清醒状态；</li><li>调暗室内灯光，尽量用暖色灯；</li><li>点燃香薰，或者其它助眠的东西；</li><li>阅读简单轻快的小说或者看一些轻松的视频，不要让自己兴奋或者让自己思考；</li><li>放下手机；</li></ol><h2 id="努力运动"><a href="#努力运动" class="headerlink" title="努力运动"></a>努力运动</h2><p>作为已经迈入中年油腻男境界的人来说，其实可以好的，比如给自己更好的身材，就算光头也可以很有型，所以运动是必不可少的，不过现在的我还是先从减肥开始，这里就不会有更多的问题，就是坚持二字，必然会瘦下来。</p><h2 id="断舍离"><a href="#断舍离" class="headerlink" title="断舍离"></a>断舍离</h2><h3 id="生活断舍离"><a href="#生活断舍离" class="headerlink" title="生活断舍离"></a>生活断舍离</h3><p>“把不用的东西扔掉！”</p><p>这是非常简单的几乎所有人都知道的真理，但是在生活中，不用的东西到底是怎么定义的，我现在不用，将来也不会用到的一定是。但是我们怎么知道将来会不会呢？</p><p>所以应该把自己的物欲降低，先从不买或者真正有用或者想用的时候再买，千万不能图打折，图降价而购入一些不需要的东西。</p><p>特别是对于自己有吸引力的东西，对我来说，最常购买的东西就是图书，经常看到当当网、京东网、亚马逊有便宜的或者折扣的力收的时候就管不住自己的手，而有一些商家还经常用优惠来吸引人。结果导致了购买了许多的书，但是实际上看的书特别少。</p><p>所以在这里，自己定义了一个新的书单，用来记录自己实际读了什么、要读什么，再定一个计划，比如：阅读多少本已购书籍之后再购入新的书籍。</p><p>对于一些可能用又不可能不用，或者近一年都不会用的东西都扔掉，这样就可以让我们的家更整洁。等到一年后或许你发现你也不会用这个东西了。或者是再重新购入即可。</p><h3 id="思想断舍离"><a href="#思想断舍离" class="headerlink" title="思想断舍离"></a>思想断舍离</h3><p>除了我们的生活，对于我们的思想也应该 <strong>“断舍离”</strong> 。</p><p>当有了一个想法，如果一直想着，就会把时间和记忆固定在这里，而如果中途又遇到另外的事情，又特别容易将某些事情忘记，所以我们应该选择记下来，用实体的东西代替大脑，这样可以让我们思考更多的东西。</p><p>或者我们忽然读到了一篇好文章，但是现在不适合详读，我们可以在这个是时候把文章通过工具记录下来，等有时间了，再重新详读这篇文章。</p><p>比如在通勤的路上，会遇到一些比较好的文章，我会利用手机 app 将文章保存到 <strong>滴答</strong> 清单中，当有时间的时候，将好的文章再重新阅读一遍，或者重新学习一遍。</p><p>当然有时候，也会因为<del>懒怠</del>繁忙导致累积了许多内容没有读，最多的时候，滴答的待办清单中有500篇文章要读。</p><p>除了这些，还可以把自己心中的那些不满啊、忧愁啊都记下来，这样也可以有效的控制我们的感情，让自己更开心的生活。</p><p>这个主要用了两个东西，一个是电子版的笔记系统——Org Mode Journal系统，另外一个就是一个简单的横格本和一支笔就可以手工记录了，具体的可以看一些手帐相关的文章来学习如何简单清晰的记录生活。</p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 减法生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 查看端口占用情况</title>
      <link href="/hexo-blog/2018/09/04/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/linux/ensure-port-use-on-linux/"/>
      <url>/hexo-blog/2018/09/04/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/linux/ensure-port-use-on-linux/</url>
      
        <content type="html"><![CDATA[<p>Linux 查看启动的后台进程，可以使用下面两个命令。</p><h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><p><code>lsof -i:&lt;port&gt;</code> 用来查看某一端口占用情况，可以查询到对应的 COMMAND PID USER TYPE。</p><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p><code>netstat -tunlp | grep &lt;port&gt;</code> 用于查看指定的端口号的进程情况，可以查看端口的监听情况，最后一项则是对应的 COMMAND 和 PID。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lsof </tag>
            
            <tag> netstat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 上传文件超出最大值</title>
      <link href="/hexo-blog/2018/08/30/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/git/git-hung-up-unexpectedly/"/>
      <url>/hexo-blog/2018/08/30/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/git/git-hung-up-unexpectedly/</url>
      
        <content type="html"><![CDATA[<p>昨天在上传打包的程序的时候，git 意外报错了，试了一下，并不是因为有冲突什么的，仔细看了一下报错：</p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-rpc-error.png" class="" title="git-rpc-error"><p>发现是 OpenSSL 中报的错，确认了一下 error 发现是因为上传的文件过大导致的。需要将 <strong>postbuffer</strong> 调整一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config http.postbuffer 523288000</span><br></pre></td></tr></table></figure><p>再上传一次，果然可以了。查询一下看看到底修改了什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-http.png" class="" title="git-http"><p>确认是修改了对应的最大 <strong>post</strong> 的请求的值。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postbuffer </tag>
            
            <tag> hung up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmder 无法显示中文</title>
      <link href="/hexo-blog/2018/08/29/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/cmder-cannot-display-chinese/"/>
      <url>/hexo-blog/2018/08/29/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/cmder-cannot-display-chinese/</url>
      
        <content type="html"><![CDATA[<p>cmder 默认是不支持中文字符的，可以在 <strong>Setting &gt; Startup &gt; Environment</strong> 下增加一行语言设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set LANG=zh_CN.UTF8</span><br></pre></td></tr></table></figure><p>然后重启 cmder 即可。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写自己的 Hugo 主题</title>
      <link href="/hexo-blog/2018/08/22/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/create-new-theme-for-hugo/"/>
      <url>/hexo-blog/2018/08/22/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/create-new-theme-for-hugo/</url>
      
        <content type="html"><![CDATA[<h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h2><p>使用 <code>hugo new theme paladin</code> 直接创建一个新的主题，然后可以在当前博客中（已经完成了多篇文章，但是还想自己定义一个主题）或者在新主题中增加测试用的项目。</p><p>目前所实现的大概样式如下：</p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/sn01.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/sn02.png" alt=""></p><p>创建之后，在 <strong>themes</strong> 目录下可以看到整个项目结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">themes&#x2F;paladin</span><br><span class="line">├── LICENSE</span><br><span class="line">├── archetypes</span><br><span class="line">│   └── default.md</span><br><span class="line">├── layouts</span><br><span class="line">│   ├── 404.html</span><br><span class="line">│   ├── _default</span><br><span class="line">│   │   ├── baseof.html</span><br><span class="line">│   │   ├── list.html</span><br><span class="line">│   │   └── single.html</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── partials</span><br><span class="line">│       ├── footer.html</span><br><span class="line">│       └── header.html</span><br><span class="line">├── readme.md</span><br><span class="line">├── static</span><br><span class="line">│   └── css</span><br><span class="line">│       └── stylesheet.css</span><br><span class="line">└── theme.toml</span><br><span class="line">6 directories, 12 files</span><br></pre></td></tr></table></figure><p>可以看到目录下有一些已经创建好的 <strong>html</strong> 目录，有几个需要编辑的，分别是 <strong>single.html</strong> ， <strong>index.html</strong> ， <strong>404.html</strong> ， <strong>footer.html</strong> 和 <strong>header.html</strong> 这几个文件。</p><h2 id="default"><a href="#default" class="headerlink" title="_default"></a>_default</h2><p>这里放的，是主要几个网站模板，用来提交一些默认的配置的。</p><ul><li>single.html</li></ul><p>这个是用来渲染生成的单页文章的，主要是 <strong>content/</strong> 下的内容，可以用来渲染页面的名称、作者、时间和文章的具体内容。</p><ul><li>list.html</li></ul><p>这个是用来渲染生成的列表页的，包括文章列表页或者是标签列表和分类列表页。</p><h3 id="partials"><a href="#partials" class="headerlink" title="partials"></a>partials</h3><p>这个目录下主要是放需要利用的代码片断，通过 <strong>partial</strong> 方法调用。</p><ul><li>header.html</li></ul><p>这里主要定义 <code>&lt;head&gt;</code> 标签和导航栏 <code>&lt;nav&gt;</code> 相关内容。</p><ul><li>footer.html</li></ul><p>这里定义了网页脚标位置的相关内容。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>主题参照了 <a href="https://github.com/GenkunAbe/hugo-theme-hiruko" target="_blank" rel="noopener">hugo-theme-hiruko</a> 的样式，去掉了一些用不到的功能。</p><p>主要使用了<a href="https://getbootstrap.com" target="_blank" rel="noopener">bootstrap4</a>，其中的一些图标来源自<a href="http://www.iconfont.cn" target="_blank" rel="noopener">阿里巴巴的矢量库</a>，用起来方便快捷。</p><p>当文章过多时，可以使用连续页面的样式，如果不想使用，可以用上一页下一页的方式。通过参数 <strong>paginateOriginalStyle</strong> 来控制，如果为 <strong>true</strong> 则是上一页下一页的样子，如果是 <strong>false</strong> 则如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/sn03.png" alt=""></p><p>将社交链接和logo放到到 <strong>about.html</strong> 页面中，可以方便的看到作者的相关内容。</p><p><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/sn04.png" alt=""></p><p>如果想修改logo的话，需要修改主题目录下的 <strong>static/media/zlogo.png</strong> 文件即可。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> hugo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hugo </tag>
            
            <tag> theme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Python 爬取小说</title>
      <link href="/hexo-blog/2018/08/15/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/python/python-download-novel/"/>
      <url>/hexo-blog/2018/08/15/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/python/python-download-novel/</url>
      
        <content type="html"><![CDATA[<p>Python 爬取网络的内容是非常方便的，但是在使用之前，要有一些前端的知识，比如： HTML、 CSS、XPath 等知识，再会一点点 Python 的内容就可以了。</p><p>因为使用的是 Anaconda ，所以大多数的包都已经有了，但是在使用过程中也有一些小问题，但是最终程序是实现了的。</p><ul><li>BeautifulSoup 是一个可以从HTML或XML文件中提取数据的Python库。非常好用，具体的 <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">文档可以从这里跳转</a> ，利用这篇文章可以让你轻松的进行网页的解析。可以把仅有的一点前端知识也略去了。</li><li>requests 适合正常人类使用的一个 HTTP 解析工具</li><li>time 让网站以为你不是电脑</li><li>sys 显示和刷新</li></ul><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding:UTF-8 _*_</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">download 《武动乾坤》 from www.biqukan.com</span></span><br><span class="line"><span class="string">Parameters:</span></span><br><span class="line"><span class="string">    None</span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">    None</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">downloader</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.server = <span class="string">"http://www.biqukan.com"</span></span><br><span class="line">        self.target = <span class="string">"http://www.biqukan.com/3_3012"</span></span><br><span class="line">        self.names = []</span><br><span class="line">        self.urls = []</span><br><span class="line">        self.nums = <span class="number">0</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    To get Urls for download</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_download_url</span><span class="params">(self)</span>:</span></span><br><span class="line">        req = requests.get(url=self.target)</span><br><span class="line">        html = req.text</span><br><span class="line">        div_bf = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">        div = div_bf.find_all(<span class="string">"div"</span>, class_=<span class="string">"listmain"</span>)</span><br><span class="line">        a_bf = BeautifulSoup(str(div[<span class="number">0</span>]), <span class="string">"html.parser"</span>)</span><br><span class="line">        a = a_bf.find_all(<span class="string">"a"</span>)</span><br><span class="line">        self.nums = len(a[<span class="number">12</span>:])</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'武动乾坤目录.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> each <span class="keyword">in</span> a[<span class="number">12</span>:]:</span><br><span class="line">                f.write(each.string)</span><br><span class="line">                self.names.append(each.string)</span><br><span class="line">                f.write(self.server + each.get(<span class="string">"href"</span>))</span><br><span class="line">                self.urls.append(self.server + each.get(<span class="string">"href"</span>))</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    To get content</span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">        target - 下载链接</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        content - 章节内容</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_contents</span><span class="params">(self, target)</span>:</span></span><br><span class="line">        headers = requests.utils.default_headers()</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:61.0) Gecko/20100101 Firefox/61.0'</span></span><br><span class="line">        req = requests.get(url=target, headers=headers)</span><br><span class="line">        html = req.text</span><br><span class="line">        bf = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">        texts = bf.find_all(<span class="string">"div"</span>, class_=<span class="string">"showtxt"</span>)</span><br><span class="line">        content = texts[<span class="number">0</span>].text.replace(<span class="string">'\xa0'</span> * <span class="number">8</span>, <span class="string">'\n\n'</span>)</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    To save to text</span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">        name - 章节名称</span></span><br><span class="line"><span class="string">        path - 当前路径 + 小说名</span></span><br><span class="line"><span class="string">        text - 章节内容</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writer</span><span class="params">(self, name, path, text)</span>:</span></span><br><span class="line">       <span class="comment"># writer_flag = True</span></span><br><span class="line">        <span class="keyword">with</span> open(path, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(name + <span class="string">'\n'</span>)</span><br><span class="line">            f.writelines(text)</span><br><span class="line">            f.write(<span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    dl = downloader()</span><br><span class="line">    dl.get_download_url()</span><br><span class="line">    print(<span class="string">"第"</span>, dl.nums, <span class="string">"章"</span>)</span><br><span class="line">    print(<span class="string">"开始下载:"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(dl.nums):</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        dl.writer(dl.names[i], <span class="string">'武动乾坤.txt'</span>, dl.get_contents(dl.urls[i]))</span><br><span class="line">        sys.stdout.write(<span class="string">"  已下载:%.3f%%"</span> % float(i/dl.nums*<span class="number">100</span>) + <span class="string">'\r'</span>)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">    print(<span class="string">"下载完成"</span>)</span><br></pre></td></tr></table></figure><p>几个小点需要注意：</p><ol><li>不能访问的过快，所以在循环中进行一次等待，我这里用的是 <code>time.sleep(1)</code></li><li>为了不被反爬虫识别为爬虫，需要在访问的时候，增加一个 <strong>header</strong> ，利用 <code>headers = requests.utils.default_headers()</code> 和 <code>headers[&#39;User-Agent&#39;] = &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:61.0) Gecko/20100101 Firefox/61.0&#39;</code> 两行，就可以不被识别了</li><li>解析的时候，出现了一个问题，就是一开始从目录页获取的时候，只能读取 193 篇文章，经过排查，发现是在使用 BeautifulSoup 的时候解析的有点问题，将原本的 <code>&quot;lxml&quot;</code> 方式修改为<code>&quot;html.parser&quot;</code> 方式就可以了</li></ol><p>不过因为这本小说字数真的有点多，所以下载过程有点慢，不过整体来说还是可以使用的。</p>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> beautifusoup </tag>
            
            <tag> 下载小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apt-get 中 update 与 upgrade 的区别</title>
      <link href="/hexo-blog/2018/08/02/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/linux/apt-get-update-and-upgrade/"/>
      <url>/hexo-blog/2018/08/02/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/linux/apt-get-update-and-upgrade/</url>
      
        <content type="html"><![CDATA[<p><code>update</code> : 更新 <strong>/etc/apt/sources.list</strong> 和 <strong>/etc/apt/sources.list.d</strong> 中列出的源的地址,这样才能获取到最新的软件包。<br><code>upgrade</code> : 升级已安装的所有软件包，升级之后的版本就是本地地址里的，因此，在执行 <strong>upgrade</strong> 之前一定要执行 <strong>update</strong> , 这样才能更新到最新的。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apt-get </tag>
            
            <tag> apt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse 项目层次结构设置</title>
      <link href="/hexo-blog/2018/08/01/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/eclipse-package-presentation/"/>
      <url>/hexo-blog/2018/08/01/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/eclipse-package-presentation/</url>
      
        <content type="html"><![CDATA[<p><strong>Eclipse</strong> 中新建工程或者是导入一个工程，包层次默认为 <strong>Flat</strong> ，也就是完成名称，但是这种显示会让包结构非常复杂，而且非常不好找，一般我是将其配置为 <strong>Hierarchical</strong> 即分层次的。</p><p>路径在 <strong>Windows-&gt;Navigation-&gt;Show View Menu-&gt;Package Presentation-&gt;Hierarchical</strong> 下，调整后，包会按文件夹样式一层层显示。</p><p>当然，也可以使用快捷键 <code>Ctrl + F10</code> 打开，将 <strong>Package Presentation</strong> 调整为 <strong>Hierarchical</strong> 即可。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Eclispe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> presentation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Travis 自动部署博客</title>
      <link href="/hexo-blog/2018/07/15/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/deploy-blog-by-travis/"/>
      <url>/hexo-blog/2018/07/15/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/deploy-blog-by-travis/</url>
      
        <content type="html"><![CDATA[<p><strong>Travis CI</strong> 是一个非常好用持续集成工具。</p><p><strong>集成</strong> 主要是用来将多个用户的开发模块构建成一个可运行版本；而 <strong>持续集成</strong> 则是在集成之上，尽量将每一次提交都进行一次构建，这个个过程就是 <strong>持续集成</strong> 。</p><h2 id="Travis-自动构建"><a href="#Travis-自动构建" class="headerlink" title="Travis 自动构建"></a>Travis 自动构建</h2><p><strong>Travis Ci</strong> 的自动构建周期分为两步：</p><ol><li>install</li><li>Script</li></ol><p>但是我们可以根据这两步将相关的内容分成更细的步骤：</p><ol><li>before_install</li><li>install</li><li>befor_script</li><li>script</li><li>after_success 或者 after_failure</li><li>before_deploy</li><li>deploy</li><li>after_deploy</li><li>after_script</li></ol><p><strong>持续集成就是把一系列的手工操作合并成一个脚本的过程。</strong></p><p>所以可以这样实现部署脚本:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sudo: false</span><br><span class="line">language: go</span><br><span class="line">os: osx</span><br><span class="line">install:</span><br><span class="line">  brew install hugo</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - hugo --config jane-config.toml</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - source</span><br><span class="line">after_success:</span><br><span class="line">    - git add -A</span><br><span class="line">    - git commit -m "update blog"</span><br><span class="line">    - git push -u origin master</span><br></pre></td></tr></table></figure><p>这个脚本中，我们主要工作是生成 <strong>hugo</strong> 博客这一步，如果成功了，我们就进行提交，也就完成了。</p><h2 id="Travis-GitHub-Pages"><a href="#Travis-GitHub-Pages" class="headerlink" title="Travis GitHub Pages"></a>Travis GitHub Pages</h2><p>经过查阅之后，发现 <strong>Travis Ci</strong> 本身就支持直接部署到 <strong>GitHub Pages</strong> 上，并拥有单独的章节。</p><h3 id="个人令牌"><a href="#个人令牌" class="headerlink" title="个人令牌"></a>个人令牌</h3><p>在 <strong>GitHub</strong> 中的 <strong>Setting</strong> 下的 <strong>Developer settings</strong> 中，有一个 <strong>Personal access tokens</strong> 中，可以生成，然后配置到 <strong>Travis Ci</strong> 对应的 <strong>My Repositories</strong> 中的项目中，一般的话，使用 <strong>public_repo</strong> 权限就足够了。</p><p>如果在 <strong>My Repositories</strong> 中看不到 <strong>Settings</strong> ，可以在 <strong>More options</strong> 中找到 <strong>Settings</strong> 然后在 <strong>Environment Variables</strong> 中配置对应的令牌即可。</p><h3 id="个人配置"><a href="#个人配置" class="headerlink" title="个人配置"></a>个人配置</h3><p>在项目中新增 <strong>.travis.yml</strong> ，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip-cleanup: true</span><br><span class="line">  github-token: $GITHUB_TOKEN</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Set <span class="keyword">in</span> the settings page of your repository, as a secure variable</span></span><br><span class="line">  keep-history: true</span><br><span class="line">  on:</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>GitHub Pages 默认的一些参数：</p><ul><li>local-dir: 推送到 <strong>GitHub Pages</strong> 的目录，当前路径的相对路径，默认为当前路径</li><li>repo: 项目仓库的地址，默认为当前项目</li><li>keep-history: 可选参数，使用递增的推送信息代替强制推送，默认为 <strong>false</strong></li><li>target-branch: 将 <strong>local-dir</strong> 内容推送的分支，默认为 <strong>gh-pages</strong> ，如果 <strong>keep-history</strong> 为 <strong>true</strong> ，则强制推送 <code>git push -f</code></li><li>fqdn: 可选参数，设置用户的自定义域名，默认为无自定义域名</li><li>project-name: 默认为 <strong>fqdn</strong> 的值或者是仓库的固定路径，用于元数据</li><li>email: 可选参数，提交人信息，默认为 <strong><a href="mailto:deploy@travis-ci.org">deploy@travis-ci.org</a></strong></li><li>name: 可选参数，提交人，默认为 <strong>Deployment Bot</strong></li><li>committer-from-gh: 可选参数，默认为 <strong>false</strong> ，允许令牌拥有者使用，会覆盖掉 <strong>email</strong> 和 <strong>name</strong> 两个的值</li><li>allow-empty-commit: 可选参数，默认为 <strong>false</strong> ，仅在 <strong>keep-history</strong> 参数为 <strong>true</strong> 时启用</li><li>github-url: 可选参数，默认为 <strong>github.com</strong> ，是企业级自托管 <strong>GitHub</strong> 项目的 <strong>URL</strong> 地址</li><li>verbose: 可选参数，冗余的内部步骤，默认为 <strong>false</strong></li></ul><p>备注：</p><ol><li>默认情况下，travis 会自动执行 <code>git submodule init</code> ，但是需要使用 <strong>https</strong> 的路径，否则需要配置 <strong>ssh key</strong> ，而 GITHUB_TOKEN 要保证和 travis 设置的变量一致，名称和值都要一致</li><li>fqdn 如果需要设置自定义域名，可以设置这个参数，travis 会自动生成 <strong>CNAME</strong> 文件提交，同时要设置 <strong>config.toml</strong> 中的相应的 <strong>baseURL</strong></li><li><code>branches: only: source</code> 等价于 <code>deploy: on: branch: source</code></li></ol><h3 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h3><p>除了令牌之后，我们也可以将 <strong>name</strong> 、 <strong>email</strong> 等相关信息配置到这里，比如推送的分支，可以设置为 <strong>P_BRANCH</strong> 然后在推送的时候，使用 <strong>${P_BRANCH}</strong> 来引用。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> travis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hugo </tag>
            
            <tag> travis </tag>
            
            <tag> 自动部署博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新增 MySQL 用户</title>
      <link href="/hexo-blog/2018/07/12/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/mysql/mysql-create-new-user/"/>
      <url>/hexo-blog/2018/07/12/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/mysql/mysql-create-new-user/</url>
      
        <content type="html"><![CDATA[<ul><li>创建本地用户</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'test'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure><ul><li>创建局域网用户</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'test'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure><ul><li>刷新</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><ul><li>修改密码</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> <span class="keyword">for</span> <span class="string">'test'</span>@<span class="string">'localhost'</span> = <span class="keyword">password</span>(<span class="string">'newpassword'</span>);</span><br></pre></td></tr></table></figure><p>如果是当前用户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">"newpassword"</span>);</span><br></pre></td></tr></table></figure><ul><li>授权</li></ul><p>授权相关操作见: <a href="/hexo-blog/2016/04/29/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/mysql/mysql-authority-config/" title="MySQL 数据库设置远程权限">MySQL 数据库设置远程权限</a></p><p>这里补充一下 MySql 移除权限的命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> privilege <span class="keyword">ON</span> databasename.tablename <span class="keyword">FROM</span> <span class="string">'username'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><ul><li>删除用户</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">'username'</span>@<span class="string">'localhost'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> create user </tag>
            
            <tag> set password </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax 关闭异步请求</title>
      <link href="/hexo-blog/2018/06/20/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ajax-asyn-option/"/>
      <url>/hexo-blog/2018/06/20/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ajax-asyn-option/</url>
      
        <content type="html"><![CDATA[<p>在代码中，因为进行了后台的取值操作，导致有些内容还未加载就执行到了新的地方，所以想着 ajax 的异步关闭来解决。</p><p><code>async</code> 设置为 <code>false</code> 的时候，变成同步操作，默认( <code>true</code> )为异步操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    cache: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">false</span>,   <span class="comment">// 太关键了，学习了，同步和异步的参数</span></span><br><span class="line">&#125;);</span><br><span class="line">alert(<span class="string">"2"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async </tag>
            
            <tag> 异步请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.gitignore 文件配置</title>
      <link href="/hexo-blog/2018/05/28/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/git/git-ignore/"/>
      <url>/hexo-blog/2018/05/28/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/git/git-ignore/</url>
      
        <content type="html"><![CDATA[<p>git 使用过程中，有许多文件或者文件夹是不希望更新到远程仓库了，因为他们比较占地方，这个时候我们可以利用 <code>.gitignore</code> 文件忽略文件。</p><h2 id="按项目进行忽略"><a href="#按项目进行忽略" class="headerlink" title="按项目进行忽略"></a>按项目进行忽略</h2><p><strong>.gitignore</strong> 文件用于忽略文件</p><ul><li>所有空行或者以没注释符号 <strong>#</strong> 开头的行都会被 Git 忽略。</li><li>可以使用 glob 模式进行匹配。</li><li>匹配模式最后跟反斜杠 <code>(/)</code> 说明忽略的是目录。</li><li>要忽略指定模式以外的文件或者目录，可以在模式前加上惊叹号。</li></ul><h3 id="glob-模式"><a href="#glob-模式" class="headerlink" title="glob 模式"></a>glob 模式</h3><p>* : 表示任意个任意字符</p><p>? : 表示匹配一个任意字符</p><p>所以我们只需要在对应的 <strong>git</strong> 目录下，创建一个 <strong>.gitignore</strong> 文件，然后配置上 <strong>.DS_Store</strong> 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore</span><br><span class="line">echo */.DS_Store" &gt; .gitignore</span><br></pre></td></tr></table></figure><p>然后保存，就可以生效了。</p><h2 id="全局进行配置"><a href="#全局进行配置" class="headerlink" title="全局进行配置"></a>全局进行配置</h2><p>然后我们发现，只要是 Mac 下的 Git 项目我们都需要这样操作一次，太麻烦了，所以我们可以在 home 目录下创建一个 <strong>.gitignore_global</strong> 文件，然后按 <strong>.gitignore</strong> 文件的配置方式完成配置。</p><p>在每个项目下的 <strong>.gitignore</strong> 文件中，我们可以引用这个 global 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.excludesfile ~/.gitignore_global</span><br></pre></td></tr></table></figure><p>这样就可以将全局方法加载到项目配置文件中了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .gitignore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Mac 电脑制作 U 盘</title>
      <link href="/hexo-blog/2018/04/25/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/mac/create-usb-card-by-dd-in-mac/"/>
      <url>/hexo-blog/2018/04/25/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/mac/create-usb-card-by-dd-in-mac/</url>
      
        <content type="html"><![CDATA[<h2 id="Mac-下写入命令"><a href="#Mac-下写入命令" class="headerlink" title="Mac 下写入命令"></a>Mac 下写入命令</h2><ul><li>找出 U 盘挂载位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diskutil list</span><br></pre></td></tr></table></figure><ul><li>将 U 盘移除</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diskutil unmountDisk /dev/disk[num]</span><br></pre></td></tr></table></figure><ul><li>写入 U 盘</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dd if=isopath of=/dev/disk[num] bs=1m rdisk</span><br></pre></td></tr></table></figure><p><code>rdisk</code> 是指定方式后，可以加快写入速度。</p><h2 id="iso-转换为-dmg"><a href="#iso-转换为-dmg" class="headerlink" title="iso 转换为 dmg"></a>iso 转换为 dmg</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hdiutil convert -format UDRW -o linux.dmg kali.iso</span><br></pre></td></tr></table></figure><h2 id="弹出-U-盘"><a href="#弹出-U-盘" class="headerlink" title="弹出 U 盘"></a>弹出 U 盘</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diskutil eject /dev/disk[num]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dd </tag>
            
            <tag> diskutil </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 补遗</title>
      <link href="/hexo-blog/2018/04/20/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/git/git-tips/"/>
      <url>/hexo-blog/2018/04/20/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/git/git-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="文件退出暂存区，但是保留修改"><a href="#文件退出暂存区，但是保留修改" class="headerlink" title="文件退出暂存区，但是保留修改"></a>文件退出暂存区，但是保留修改</h2><p>在代码或者一些内容更新完成好，进行了 <code>git add .</code> 或者 <code>git add -A</code> 操作，但是发现操作错误了，不希望进行暂存区，但是又不想移除已经修改的内容，可以执行 <code>git reset --mixed</code> 操作，这样将文件退出暂存区，但是修改的内容保留。</p><h2 id="多次修改，一次-commit"><a href="#多次修改，一次-commit" class="headerlink" title="多次修改，一次 commit"></a>多次修改，一次 commit</h2><p>在进行一个功能的开发过程中，希望将整个功能仅做一次 <em>commit</em> ，可以在修改完成后，执行 <code>git add .</code> ， 然后再执行 <code>git commit --amend</code> ，这样可以把修改的内容分次写入到 <em>commit</em> 文件中，最后再进行提交。</p><h2 id="git-移除-cache-的内容"><a href="#git-移除-cache-的内容" class="headerlink" title="git 移除 cache 的内容"></a>git 移除 cache 的内容</h2><ul><li>git 删除暂存区的文件，不会移除文件，即保留工作区。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cache fileName</span><br></pre></td></tr></table></figure><blockquote><p>fileName 为对应的文件名</p></blockquote><ul><li>删除暂存区和工作区的文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -f fileName</span><br></pre></td></tr></table></figure><h2 id="git-删除错误的-commit"><a href="#git-删除错误的-commit" class="headerlink" title="git 删除错误的 commit"></a>git 删除错误的 commit</h2><blockquote><p>commitId 为对应的 id</p></blockquote><ul><li>仅仅撤销已经提交的版本库，不会个性暂存区和工作区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft commitId</span><br></pre></td></tr></table></figure><ul><li>撤销已提交的版本库和暂存区，不会修改工作区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --mixed commitId</span><br></pre></td></tr></table></figure><ul><li>彻底将工作区、暂存区和版本库记录恢复到指定的版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commitId</span><br></pre></td></tr></table></figure><blockquote><p>如果你希望保留修改，但是撤销提交，则使用 <code>--mixed</code> ，如果想彻底恢复，则使用 <code>--hard</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cache </tag>
            
            <tag> reset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Surround 笔记</title>
      <link href="/hexo-blog/2018/02/12/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/evil-surround-learning/"/>
      <url>/hexo-blog/2018/02/12/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/evil-surround-learning/</url>
      
        <content type="html"><![CDATA[<h2 id="surroud-插件"><a href="#surroud-插件" class="headerlink" title="surroud 插件"></a>surroud 插件</h2><p>项目的地址如下</p><ul><li><a href="https://github.com/tpope/vim-surround" target="_blank" rel="noopener">vim surround</a></li></ul><table><thead><tr><th>原文本</th><th>命令</th><th>新文本</th></tr></thead><tbody><tr><td>“Hellow world!”</td><td>ds”</td><td>Hellow world!</td></tr><tr><td>[123+456]/2</td><td>cs])</td><td>(123+456)/2</td></tr><tr><td>“Look ma, I’m *HTML!”</td><td>cs”<q></td><td><q>Look ma, I’m HTML!</q></td></tr><tr><td>if  x &gt; 3 {</td><td>ysW(</td><td>if( x&gt;3 ) {</td></tr><tr><td>my $str = whee!;</td><td>vllllS’</td><td>my $str = ‘whee!’;</td></tr><tr><td><code>&lt;div&gt;Yo!&lt;/div&gt;</code></td><td>dst</td><td>Yo!</td></tr><tr><td><code>&lt;div&gt;Yo!&lt;/div&gt;</code></td><td><code>cst&lt;p&gt;</code></td><td><code>&lt;p&gt;Yo!&lt;/p&gt;</code></td></tr></tbody></table><p>上面的示例中，添加成对的括号时，如果使用后半括号，是没有空格的，如第 2 个示例，如果使用前半个括号，则是有空格的，如第 4 个示例。另外对于一些常见的标记，需要记住：</p><ol><li>t 表示 xml 或者 html 中的 Tag</li><li>w word</li><li>W WORD</li><li>p paragraph</li></ol><h2 id="命令表格"><a href="#命令表格" class="headerlink" title="命令表格"></a>命令表格</h2><h3 id="Normal-mode"><a href="#Normal-mode" class="headerlink" title="Normal mode"></a>Normal mode</h3><p><code>ds</code> : 删除一对配对符号</p><p><code>cs</code> : 替换原来的配对符号</p><p><code>ys</code> : 加一对配对符号</p><p><code>yS</code> : 增加一对配对符号，并将内容新建一行，并缩进</p><p><code>yss</code> : 为整行增加一对配对符号</p><p><code>ySs</code> : 为整行增加一对配对符号，并新起一行，然后缩进</p><p><code>ySS</code> : 同 ySs</p><h3 id="Visual-mode"><a href="#Visual-mode" class="headerlink" title="Visual mode"></a>Visual mode</h3><p><code>s</code> : 增加一对匹配符号</p><p><code>S</code> : 增加一对匹配符号，并新起一行，然后缩进</p><h3 id="Insert-mode"><a href="#Insert-mode" class="headerlink" title="Insert mode"></a>Insert mode</h3><p><code>C-s</code> : 增加一对匹配符号</p><p><code>C-s C-s</code> : 增加一对匹配符号，并新起一行，然后缩进</p><p><code>C-g s</code> : 增加一对匹配符号</p><p><code>C-G S</code> : 增加一对匹配符号，新起一行然后进行缩进</p><h2 id="修改-surrounding-内文本为例："><a href="#修改-surrounding-内文本为例：" class="headerlink" title="修改 surrounding 内文本为例："></a>修改 <code>surrounding</code> 内文本为例：</h2><p><code>ci</code> : 修改匹配符号内的文本，并进入插入模式</p><p><code>di</code> : 剪切匹配符号之间的文本</p><p><code>yi</code> : 复制匹配符号之间的文本</p><p><code>ca</code> : 同 <code>ci</code> 但是也修改符号本身</p><p><code>da</code> : 同 <code>di</code> 但是也修改符号本身</p><p><code>ya</code> : 同 <code>yi</code> 但是也修改箱号本身</p><blockquote><p><strong>b 可以表示小括号，B 表示大括号</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> evil </tag>
            
            <tag> surround </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 合并多次提交</title>
      <link href="/hexo-blog/2017/08/02/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/git/git-combine-commit-messages/"/>
      <url>/hexo-blog/2017/08/02/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/git/git-combine-commit-messages/</url>
      
        <content type="html"><![CDATA[<p>在合并分支的时候，希望将多次提交合并成一个，然后再 cherry-pick 到主分支。</p><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>develop 分支做开发，可能会进行多次提交，但是在发布或者进行 PR 的时候，我们只希望看到一次提交。这个时候，我们需要进行 <code>git rebase</code> 之后进行合并。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> HEAD~3 表示将近三次提交都合并，如果是将 2 次合并则为 HEAD~2</span></span><br><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><p>这个时候，看到的是一上对 <strong>COMMIT</strong> 信息的提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pick 9ba5122 2017 年 8 月 2 日</span><br><span class="line">pick c6da035 ~~</span><br><span class="line"></span><br><span class="line"># Rebase 9b6bae1..c6da035 onto 9b6bae1 (2 commands)</span><br><span class="line">#</span><br><span class="line"># Commands:</span><br><span class="line"># p, pick &#x3D; use commit</span><br><span class="line"># r, reword &#x3D; use commit, but edit the commit message</span><br><span class="line"># e, edit &#x3D; use commit, but stop for amending</span><br><span class="line"># s, squash &#x3D; use commit, but meld into previous commit</span><br><span class="line"># f, fixup &#x3D; like &quot;squash&quot;, but discard this commit&#39;s log message</span><br><span class="line"># x, exec &#x3D; run command (the rest of the line) using shell</span><br><span class="line"># d, drop &#x3D; remove commit</span><br><span class="line">#</span><br><span class="line"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line">#</span><br><span class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line">#</span><br><span class="line"># However, if you remove everything, the rebase will be aborted.</span><br><span class="line">#</span><br><span class="line"># Note that empty commits are commented out</span><br></pre></td></tr></table></figure><p>第一列对应的是 <code>rebase</code> 具体的操作，其含义如下</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>pick(p)</td><td>git 会应用这个补丁，以同样的提交信息（commit message）保存提交</td></tr><tr><td>reword(r)</td><td>git 会应用这个补丁，但需要重新编辑提交信息</td></tr><tr><td>edit(e)</td><td>git 会应用这个补丁，但会因为 amending 而终止</td></tr><tr><td>squash(s)</td><td>git 会应用这个补丁，但会与之前的提交合并</td></tr><tr><td>fixup(f)</td><td>git 会应用这个补丁，但会丢掉提交日志</td></tr><tr><td>exec(x)</td><td>git 会在 shell 中运行这个命令</td></tr><tr><td>drop(d)</td><td>git 会移除这次 COMMIT</td></tr></tbody></table><p>将第二个 <code>pick c6da035 ~~~</code> 这一行修改成 <code>squash c6da035 ~~~</code> ，使之与之前的提交合并。</p><p>保存之后可以看到下面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">This is a combination of 2 commits.</span><br><span class="line"># This is the 1st commit message:</span><br><span class="line"></span><br><span class="line">2017 年 8 月 2 日</span><br><span class="line"></span><br><span class="line">删除无用配置，提高启动速度</span><br><span class="line"></span><br><span class="line">1. 更新 zucchini-org</span><br><span class="line">2. 增加 CHANGELOG 用来记录每次更新</span><br><span class="line">3. 更新 plantuml 配置</span><br><span class="line">   FIXED Can&#39;t find plantuml-jar-path</span><br><span class="line">4. 增加 parinfer 配置，用来优化 lisp 的编写速度</span><br><span class="line"></span><br><span class="line"># This is the commit message #2:</span><br><span class="line"></span><br><span class="line">~~</span><br><span class="line"></span><br><span class="line"># Please enter the commit message for your changes. Lines starting</span><br><span class="line"># with &#39;#&#39; will be ignored, and an empty message aborts the commit.</span><br><span class="line">#</span><br><span class="line"># Date:      Tue Aug 1 10:24:44 2017 +0800</span><br><span class="line">#</span><br><span class="line"># interactive rebase in progress; onto 9b6bae1</span><br><span class="line"># Last commands done (2 commands done):</span><br><span class="line">&quot;~&#x2F;spacemacs&#x2F;spacemacs.d&#x2F;.git&#x2F;COMMIT_EDITMSG&quot; 36L, 1003C</span><br></pre></td></tr></table></figure><p>修改成正确的 <code>commit</code> 信息之后，保存存并退出，可以看到下面的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rebase -i HEAD~2</span></span><br><span class="line">[detached HEAD 0238691] 2017 年 8 月 2 日</span><br><span class="line"> Date: Tue Aug 1 10:24:44 2017 +0800</span><br><span class="line"> 5 files changed, 65 insertions(+), 34 deletions(-)</span><br><span class="line"> create mode 100644 CHANGELOG.org</span><br><span class="line"> rewrite local/custom.el (66%)</span><br><span class="line">Successfully rebased and updated refs/heads/develop.</span><br></pre></td></tr></table></figure><p>这个时候，就已经将我们这几次的更改都合并到一次中了。</p><h2 id="cherry-pick-分支并更新"><a href="#cherry-pick-分支并更新" class="headerlink" title="cherry-pick 分支并更新"></a>cherry-pick 分支并更新</h2><p>这个时候，就可以更新我们的代码了。</p><p>首先 <code>git checkout master</code> 分支, 然后更新我们的代码 <code>git pull</code> 。</p><p>然后将我们合并之后的 <strong>develop</strong> 分支的内容更新过来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -b develop</span><br></pre></td></tr></table></figure><p>看到如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">commit 02386914b9e5ab13c23451a3463813bfdecb157a</span><br><span class="line">Author: 语乱 &lt;banshiliuli1990@sina.com&gt;</span><br><span class="line">Date:   Tue Aug 1 10:24:44 2017 +0800</span><br><span class="line"></span><br><span class="line">    2017 年 8 月 2 日</span><br><span class="line"></span><br><span class="line">    删除无用配置，提高启动速度</span><br><span class="line"></span><br><span class="line">    1. 更新 zucchini-org</span><br><span class="line">    2. 增加 CHANGELOG 用来记录每次更新</span><br><span class="line">    3. 更新 plantuml 配置</span><br><span class="line">       FIXED Can&#39;t find plantuml-jar-path</span><br><span class="line">    4. 增加 parinfer 配置，用来优化 lisp 的编写速度</span><br></pre></td></tr></table></figure><p>或者使用上次的操作的中的提示 <code>[detached HEAD 0238691] 2017 年 8 月 2 日</code> 其中的 <strong>0238691</strong> 就是我们需要</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick 0238691</span><br></pre></td></tr></table></figure><p>这样我们再推送到远程就可以实现合并更新了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rebase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Org mode 中不能执行 dot 、 Python 代码</title>
      <link href="/hexo-blog/2017/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/emacs-dot-and-python-cannot-run-in-spacemacs/"/>
      <url>/hexo-blog/2017/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/emacs-dot-and-python-cannot-run-in-spacemacs/</url>
      
        <content type="html"><![CDATA[<ul><li>无法执行的代码</li></ul><p>更新之后，<strong>dot</strong> 、 <strong>plantuml</strong> 的代码段在 <strong>Org-mode</strong> 下无法执行，需要引入对应的 <strong>ob-xxx.el</strong> 才能正常执行。</p><p>可以手工重新编译或者重新下载 <strong>Org</strong> 相关 <strong>package</strong> 即可，也可以使用下面的命令进行更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:spacemacs&#x2F;recompile-elpa</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spacemacs </tag>
            
            <tag> org babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷新 Manjaro 源</title>
      <link href="/hexo-blog/2017/06/08/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/linux/flash-scoure-in-manjaro/"/>
      <url>/hexo-blog/2017/06/08/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/linux/flash-scoure-in-manjaro/</url>
      
        <content type="html"><![CDATA[<p>刷新 <strong>Manjaro</strong> 源，由快到慢并指定为中国源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -gb testing -c China</span><br></pre></td></tr></table></figure><p>然后更新系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syyu</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pacman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 解决分支冲突</title>
      <link href="/hexo-blog/2017/05/07/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/git/git-rebase-merge/"/>
      <url>/hexo-blog/2017/05/07/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/git/git-rebase-merge/</url>
      
        <content type="html"><![CDATA[<p>在使用 git 进行版本管理的开发过程中，经常遇到上传或者拉取分支的时候冲突，在遇到冲突的时候，经常使用下面两个方式解决，虽然第一个方案看起来比较复杂，但是如果按我之前的文章: <a href="/hexo-blog/2016/03/17/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/git/git-workflow/" title="Git 工作流">Git 工作流</a> 进行工作的话，只需要执行3、4、5三步即可。</p><p>虽然提供的解决方案，但是最好还是从根源上降低冲突出现的频率才是最好的方案。</p><h2 id="新建分支方法"><a href="#新建分支方法" class="headerlink" title="新建分支方法"></a>新建分支方法</h2><p>本文主要讨论 Git feature 与 <strong>master(develop)</strong> 分支冲突解决方案。</p><ol><li><code>git pull</code> : 同步远程分支，发现当前的开发流有了新的提交，且与自己开发的功能有冲突。</li><li><code>git checkout -b feature</code> : Checkout 到 feature 分支。</li><li><code>git checkout master</code> <code>git pull origin master</code> : 切换到 master 分支并拉取最新的内容。</li><li><code>git checkout feature</code> <code>git rebase master</code>: 切换到 feature 分支并将 master 的修改合并，并解决冲突。</li><li><code>git add -A</code> <code>git rebase --continue</code> : 将修改内容保存并继续 rebase 操作。</li><li><code>applying: xxxx</code> : 看到这个提示表示已经完成了合并。</li><li><code>git checkout master</code> <code>git merge feature</code> : 切换到 master 分支并将 feature 分支内容合并过来。</li></ol><h2 id="暂存提交方案"><a href="#暂存提交方案" class="headerlink" title="暂存提交方案"></a>暂存提交方案</h2><p>在修改的时候，忘记新建对应的分支了，可以按上面的方案，但保存，然后创建新的分支，再将远程分支对应分支的内容 <code>reset</code> 回未修改的状态。或者使用 <code>git stash</code> 系列命令解决冲突。</p><ol><li><code>git stash</code> : 暂存修改的内容</li><li><code>git pull</code> : 拉取最新的内容</li><li><code>git stash apply</code> or <code>git stash pop</code> : 将暂存的内容合并进来</li></ol><h2 id="git-stash-命令"><a href="#git-stash-命令" class="headerlink" title="git stash 命令"></a>git stash 命令</h2><p><code>git stash apply</code> : 应用暂存内容但是不删除，可以是最近的一次暂存，也可以按序号应用 <code>git stash apply stash@{0}</code><br><code>git stash drop</code> : 移除暂存的内容<br><code>git stash pop</code> : 应用的同时从列表中移除，只能操作最近的一次 stash 的内容<br><code>git stash list</code> : 查看整个的暂存列表<br><code>git stash save</code> : 来查看对应的所有的修改，这样就可以非常方便的找到最好的实现方案<br><code>git stash show -p stash@{1}</code> : 不输入对应的 <code>stash@{}</code> 内容则将最近的 stash 与当前分支做比较，如果加了则用指定的暂存</p><ul><li>Git stash apply 的时候，报错 :</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error Your local changes to the follow files would be overwritten by merge: xxxx</span><br><span class="line">Please commit your changes or stash them before you merge .</span><br></pre></td></tr></table></figure><p>可以先add 修改的文件，然后再apply</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add test.txt</span><br><span class="line">git stash apply</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rebase </tag>
            
            <tag> merge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 学习之旅</title>
      <link href="/hexo-blog/2017/03/02/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/emacs-learning-way/"/>
      <url>/hexo-blog/2017/03/02/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/emacs-learning-way/</url>
      
        <content type="html"><![CDATA[<p><strong>Emacs 的使用过程，就像是程序员的生涯一样——路漫漫其修远兮，吾将上下而求索。</strong></p><h2 id="万物始于-Emacs"><a href="#万物始于-Emacs" class="headerlink" title="万物始于 Emacs"></a>万物始于 Emacs</h2><p>最早知道 <strong>Emacs</strong> 是从编辑器的圣战开始的，即编辑器之神——Vi，和神的编辑器——Emacs。两个编辑器在经历了几十年的战争之后，仍然是编辑世界不可超越的高峰。</p><p>但在一开始，我选择的是 Vi，因为在 <strong>*nix</strong> 中，都是有安装的，在服务器编辑文件——即使是很大的文件，Vi 也可以非常轻易的打开编辑，在一段时间内，我几乎是跪着使用 Vi 的。</p><p>后来随着想用的功能越来越多，而 Vi 只能做为编辑器使用，再加上被一些大神安利，我就选择尝试使用 Emacs 来<del>装逼</del>记笔记。于是下载了当时正流行的 <em>Purcell</em> 大神的配置，并开始尝试使用，不过没过多少就放弃了。</p><p>期间阅读了许多入门学习的内容，对 Emacs 有了一个大概的了解。</p><p>推荐阅读内容：</p><ul><li><a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org" target="_blank" rel="noopener">《一年成为 Emacs 高手（像神一样使用编辑器）》</a></li><li><a href="https://github.com/bbatsov/prelude" target="_blank" rel="noopener">Prelude 入门级 Emacs 配置</a></li><li><a href="https://github.com/purcell/emacs.d" target="_blank" rel="noopener">Purcell 大神的配置</a></li></ul><h2 id="Emacs-始于-Org"><a href="#Emacs-始于-Org" class="headerlink" title="Emacs 始于 Org"></a>Emacs 始于 Org</h2><p>Emacs 学习的无疾而终，让我的装逼大计一度沉沦。直到我开始尝试利用 <strong>Org-mode</strong> 进行博客写和作日程管理，阅读了一些文章之后，才真正开始了 Emacs 的学习苦旅。</p><p>如果说 Emacs 是神的编辑器的话， <strong>Org</strong> 可能是神器之中的神器，随着对 Org 的学习和使用，我从最初的装逼，到后来的<del>逼格提升</del>真正开始利用Emacs，都是因为Org-mode 。</p><p>推荐阅读内容：</p><ul><li><a href="https://github.com/mudan/mudan.github.io/blob/master/Emacs/The%5FOrg%5FManual/The%5FOrg%5FManual.org" target="_blank" rel="noopener">mudan 大神的 Org-mode 入门级手册</a></li><li><a href="https://github.com/mudan/mudan.github.io/blob/master/read/dx.org" target="_blank" rel="noopener">mudan 大神的漂亮的文言文排版</a></li><li><a href="http://forrestchang.com/14824097554043.html" target="_blank" rel="noopener">Tisoga 大神的 Org + GitHub 的博客教学</a></li></ul><h2 id="终于-Spacemacs-的战争"><a href="#终于-Spacemacs-的战争" class="headerlink" title="终于 Spacemacs 的战争"></a>终于 Spacemacs 的战争</h2><p>从最开始的学习，到现在已经习惯于使用 Emacs ，主要因为其确实是可以提升效率的，当然这里要把配置时间拿走。虽然开始使用的原因有所不同，但是大家最后的目标却都是一样的——即提高工作（学习）效率。</p><p>但是经过了 Emacs 几次强行配置之后，学习了一些 Emacs 的填坑方案。</p><p>后来加入了一个 Emacs 的微信群——毫不夸张的说，这是我加入过的群里面质量最高的，学习效果最好的，而且所有的成员都自发的维护群里的闲聊问题，每一次讨论都是提问解决和讨论的过程。</p><p>在偶然的一次机会，被安利了一把 Spacemacs，Vi 的操作加上 Emacs 的扩展，不要太吸引人！</p><p>推荐关注的大神：</p><ul><li><a href="https://github.com/hick" target="_blank" rel="noopener">Hick</a> 高质量 <strong>Emacs</strong> 微信群群主，应该也是发起人，水的人自觉加入闲聊群，是我所有技术相关微信群中质量最高的。</li><li><a href="https://github.com/zilongshanren" target="_blank" rel="noopener">子龙山人</a> <strong>Spacemacs Rock</strong> 视频作者，我的配置里抄的最多的就是这位大神的。</li><li><a href="https://github.com/lujun9972" target="_blank" rel="noopener">DarkSun</a>  黑日大神，大神的文章非常多，而且质量都非常高，还维护着一个 Emacs 推广相关的项目，多读读，可以找到一些自己需要的配置。</li><li><a href="https://github.com/tumashu" target="_blank" rel="noopener">tumashu</a> 天然二呆，呆神，之前看到呆神在闲聊群里水，后来又看到呆神在帮忙解决问题，好奇的关注了一下 GitHub ，才发现，竟然这几个好用的 package 都是呆神写的，而且呆神竟然不是<del>程序员</del>靠程序吃饭！</li></ul><p>大神太多了，不一一推荐，如果需要，可以联系 Hick 加一下群，就都有了。</p><p>再推荐一下中文的 Emacs 论坛，可以提问，也可以讨论：</p><ul><li><a href="https://emacs-china.org" target="_blank" rel="noopener">Emacs China</a> 一堆大神在维护的论坛，经常看看，非常好用。</li></ul><h2 id="我的-Emacs-配置"><a href="#我的-Emacs-配置" class="headerlink" title="我的 Emacs 配置"></a>我的 Emacs 配置</h2><h3 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h3><p>为了更好管理配置，推荐使用 <strong>.spacemacs.d</strong> 文件夹进行管理配置，而不是使用 <strong>.spacemacs</strong> 文件。也为了方便后续的扩展。</p><h3 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h3><p>如果是在 Windows 下使用，需要注意几个问题：</p><ol><li>推荐用编译版本，或者用官方网站加部分 <em>.dll</em> 文件来解决</li><li>使用过程中，为了配置的时候好用——更适合 Linux，我是使用在环境变量中增加默认的 <em>HOME</em> 的方案，也可以使用其它方法</li><li>直接下载就可以使用，维护的是 <em>develop</em> 分支，后续会慢慢往 <em>master</em> 分支中合并</li></ol><h3 id="最终选择"><a href="#最终选择" class="headerlink" title="最终选择"></a>最终选择</h3><p>在几经周折之后，最后还是选择自己从头开始配置一套 <strong>.emacs.d</strong> ，主要是因为以下几个问题：</p><ol><li>随着使用的人越来越多，维护的东西也越来越多，项目太大了</li><li>最终希望的是使用 Vi 的快捷键方案，可以使用 <code>evil-mode</code> 来替代</li><li>个人使用的特性话的内容太多，完全引用项目不如借鉴项目的配置方案</li></ol><p><a href="https://github.com/AboutEmacs/.emacs.d" target="_blank" rel="noopener">我的 emacs 原生配置</a></p><h3 id="我的博客地址"><a href="#我的博客地址" class="headerlink" title="我的博客地址"></a>我的博客地址</h3><p>如果想看我的博客，可以访问：<a href="https://www.zucchiniy.cn">hugo博客</a> 或者 <a href="https://zcodingtime.github.io" target="_blank" rel="noopener">hexo博客</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Emacs </tag>
            
            <tag> org mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 数据库设置远程权限</title>
      <link href="/hexo-blog/2016/04/29/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/mysql/mysql-authority-config/"/>
      <url>/hexo-blog/2016/04/29/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/mysql/mysql-authority-config/</url>
      
        <content type="html"><![CDATA[<h2 id="设置访问单个数据库权限"><a href="#设置访问单个数据库权限" class="headerlink" title="设置访问单个数据库权限"></a>设置访问单个数据库权限</h2><ul><li>设置用户名为 root，密码为空，可以访问数据库 test</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">grant all privileges on <span class="built_in">test</span>.* to <span class="string">'root'</span>@<span class="string">'%'</span>;</span></span><br></pre></td></tr></table></figure><h2 id="设置访问全部数据库权限"><a href="#设置访问全部数据库权限" class="headerlink" title="设置访问全部数据库权限"></a>设置访问全部数据库权限</h2><ul><li>设置用户名为 root，密码为空，可以访问所有数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">grant all privileges on *.* to <span class="string">'root'</span>@<span class="string">'%'</span>;</span></span><br></pre></td></tr></table></figure><h2 id="设置指定用户名访问权限"><a href="#设置指定用户名访问权限" class="headerlink" title="设置指定用户名访问权限"></a>设置指定用户名访问权限</h2><ul><li>指定用户名为 liuhui，密码为空，可以访问所有数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">grant all privileges on *.* to <span class="string">'liuhui'</span>@<span class="string">'%'</span>;</span></span><br></pre></td></tr></table></figure><h2 id="设置密码访问权限"><a href="#设置密码访问权限" class="headerlink" title="设置密码访问权限"></a>设置密码访问权限</h2><ul><li>设置用户名为 liuhui，密码为 liuhui，可以访问所有数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">grant all privileges on *.* to <span class="string">'liuhui'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'liuhui'</span>;</span></span><br></pre></td></tr></table></figure><h2 id="设置指定可访问主机权限"><a href="#设置指定可访问主机权限" class="headerlink" title="设置指定可访问主机权限"></a>设置指定可访问主机权限</h2><ul><li>设置用户名为 liuhui，密码为 liuhui，可以访问所有数据库，只有 10.1.1.1 这台机器有权限访问</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">grant all privileges on *.* to <span class="string">'liuhui'</span>@<span class="string">'10.1.1.1'</span>;</span></span><br></pre></td></tr></table></figure><h2 id="设置对应的密码级别"><a href="#设置对应的密码级别" class="headerlink" title="设置对应的密码级别"></a>设置对应的密码级别</h2><ul><li>参数解释<ul><li><code>validate_password_dictionary_file</code>: 用于难密码强度的字典文件路径</li><li><code>validate_password_length</code>: 密码最小长度，参数默认为 8，</li><li><code>validate_password_mixed_case_count</code>: 密码至少要包含的小写字母个数和大写字母个数</li><li><code>validate_password_number_count</code>: 密码至少要包含的数字个数</li><li><code>validate_password_policy</code>: 密码强度难 0/LOW 1/MEDIUM 2/STRONG</li><li><code>validate_password_special_char_count</code>: 密码至少要包含的特殊字符数</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">show variables like <span class="string">'validate_password%'</span>;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台技术 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grant privileges </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 基础命令</title>
      <link href="/hexo-blog/2016/04/27/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/git/git-basic-command/"/>
      <url>/hexo-blog/2016/04/27/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/git/git-basic-command/</url>
      
        <content type="html"><![CDATA[<h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在当前目录新建一个 git 代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个目录，将其初始化为 git 代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init [project-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">下载一个项目和它的整个代码历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> [url]</span></span><br></pre></td></tr></table></figure><h2 id="全局配置和项目配置"><a href="#全局配置和项目配置" class="headerlink" title="全局配置和项目配置"></a>全局配置和项目配置</h2><p>git 的设置文件为 <code>.gitconfig</code> ，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">显示当前 git 配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --list</span></span><br><span class="line"><span class="meta">#</span><span class="bash">编辑 git 配置文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config -e [--global]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置提交代码时的用户信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.name <span class="string">"[name]"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.email <span class="string">"[email address]"</span></span></span><br></pre></td></tr></table></figure><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加指定文件到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add [file1] [file2] ...</span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加指定目录到暂存区，包括子目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add [dir]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加当前目录的所有文件到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除工作区文件，并且将这次删除放入到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm [file1] [file2] ...</span></span><br><span class="line"><span class="meta">#</span><span class="bash">停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm --cached [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">改名文件，并将这个改名放入暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git mv [file-original] [file-renamed]</span></span><br></pre></td></tr></table></figure><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">提交暂存区到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m [message]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">提交暂存区的指定文件到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit [file1] [file2] ... -m [message]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">提交工作区自上次 commit 之后的变化，直接到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -a</span></span><br><span class="line"><span class="meta">#</span><span class="bash">提交时显示所有 diff 信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -v</span></span><br><span class="line"><span class="meta">#</span><span class="bash">使用一次新的 commit,替代上一次提交</span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果代码没有变化，则用来改写上一次的 commit 的提交信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit --amend -m [message]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重做上一次 commit, 并包括指定文件的新变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit --amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">列出所有本地分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line"><span class="meta">#</span><span class="bash">列出所有远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -r</span></span><br><span class="line"><span class="meta">#</span><span class="bash">列出所有本地分支和远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -a</span></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将原有分支名称 old branch name 修改为 new name</span></span><br><span class="line">git branch -m &lt;old branch name&gt; &lt;new name&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改当前分支名称为 new name</span></span><br><span class="line">git branch -m &lt;new name&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个分支，并切换到当该分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个分支，指向指定 commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch] [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --track [branch] [remote-branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">建立追踪关系，在现有分支与指定的远程分支之前</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">合并指定分支到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge [branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">选择一个 commit,合并进当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除与远程分支关联</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除远程分支 2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -r -d origin/[branch-name]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :[branch-name]</span></span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">列出所有 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在当前 commit，新建一个 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在指定 commit，新建一个 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag [tag] [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除本地 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -d [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除远程 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :refs/tags/[tagName]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看 tag 信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">提交指定的 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">提交所有 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --tags</span></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个分支，指向某个 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch] [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重命名 tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -f [new-tagName] [old-tagName]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -d [old-tagName]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">将本地 tag 推送到远程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :refs/tags/[old-tagName]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push --tags</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取 tag</span></span><br><span class="line">git fatch origin tag tag_name</span><br></pre></td></tr></table></figure><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">显示所有变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示当前分支的版本历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示 commit 历史，以及每次 commit 发生变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某个 commit 之后的所有变动，每个 commit 占据一行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某个 commit 之后的所有变动，其“提交说明”必须符合条件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --grep feature</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git whatchanged [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示指定文件相关的每一次 diff</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git blame [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示暂存区与工作区的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示暂存区和上一个 commit 的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --cached [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示工作区与当前分支最新 commit 之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff HEAD</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示两次提交之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff [first-branch] ... [second-branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某次提交发生的变化的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show --name-only [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]:[filename]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示当前分支的最近几次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载运程仓库的所有变动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch [remote]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示所有远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某个远程仓库的信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote show [remote]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add [shortname] [url]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull [remote] [branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] [branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --force</span></span><br><span class="line"><span class="meta">#</span><span class="bash">推送所有分支到远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --all</span></span><br></pre></td></tr></table></figure><h2 id="修改远程仓库地址"><a href="#修改远程仓库地址" class="headerlink" title="修改远程仓库地址"></a>修改远程仓库地址</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先删除远程分支地址</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote rm origin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后重新增加远程分支地址</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin [url]</span></span><br></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">恢复暂存区的指定文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">恢复某个 commit 的指定文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [commit] [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">恢复上一个 commit 的所有文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout .</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重置暂存区与工作区，与上一次 commit 保持一致</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重置当前分支的 HEAD 为指定 commit，同时重置暂存区和工作区，与指定 commit 一致</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重置当前 HEAD 为指定 commit，但保持暂存区和工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --keep [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">新建一个 commit, 用来撤销指定 commit</span></span><br><span class="line"><span class="meta">#</span><span class="bash">后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git revert [commit]</span></span><br></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">生成一个可供发布的压缩包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git archive</span></span><br></pre></td></tr></table></figure><h2 id="git-提升内容"><a href="#git-提升内容" class="headerlink" title="git 提升内容"></a>git 提升内容</h2><ul><li>储藏暂存内容</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 想要切换分支，但是还不想要提交之前的工作，可以储存修改信息，将新的储藏推送到栈上</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash / git stash save</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在这时，能够轻易的切换分支并在其他地方工作，你的修改被存储在栈上。要查看储藏的东西，可以使用 git stash list</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash list</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以将刚刚的储藏重新加载回来</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash apply</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以通过储藏的序号进行加载</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash apply stash@&#123;1&#125;</span></span><br></pre></td></tr></table></figure><ul><li>核武器级选项 filter-branch</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从每一个提交移除一个文件：指 git add . 的内容完整的上传到仓库，但是当希望开源这个内容的时候，需要移除一些无用的文件，--tre-filter 选项在的每一个提交后，运行指定的命令，然后重新提交结果。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git filter-branch --tree-filter <span class="string">'rm -f passwords.txt'</span> HEAD</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使一个子目录做为新的根目录：假设已经从另一个源代码控制系统中导入，并且有几个没意义的子目录（trunk/tags 等等）。如果想要让 trunk 子目录作为每一个提交的新的项目根目录，filter-branch 也可以帮助你那么做，再在新项目根目录是 trunk 子目录且 Git 会自动移除所有不影响子目录的提交。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git filter-branch --subdirectory-filter trunk HEAD</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在开始工作时忘记运行 git config 来设置你的名字与邮箱地址，或者你想要开源一个项目，并且修改所有你的工作邮箱地址为你的个人邮箱地址。任何情形下，你也可以通过 filter-branch 来一次性修改多个提交中的邮箱地址。需要小心的是只修改你自己的邮箱地址，所以使用 --commit-filter 来修改：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git filter-branch --commit-filter <span class="string">'</span></span></span><br><span class="line">    if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];</span><br><span class="line">    then</span><br><span class="line">        GIT_AUTHOR_NAME = "scott Chacon";</span><br><span class="line">        GIT_AUTHOR_EMAIL = "schacon@example.com";</span><br><span class="line">        git commit-tree "$@";</span><br><span class="line">    else</span><br><span class="line">        git commit-tree "$@";</span><br><span class="line">    fi' HEAD</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 快捷键使用</title>
      <link href="/hexo-blog/2016/04/26/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/emacs-keybinds-basic/"/>
      <url>/hexo-blog/2016/04/26/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/emacs-keybinds-basic/</url>
      
        <content type="html"><![CDATA[<ul><li>设置 Emacs 的默认编码格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(prefer-coding-system &#39;utf-8-unix)</span><br></pre></td></tr></table></figure><ul><li>改变文件编码格式</li></ul><p><code>C-x C-m f utf-8-unix RET</code> : 将当前文件转换为 <strong>utf-8</strong> 编码</p><p><code>C-x C-m c RET C-x C-w RET</code> : 将当前文件另存为指定编码</p><ul><li>查看需要的库文件</li></ul><p><code>M-: image-library-alist RET</code> : 查看 <strong>emacs</strong> 支持需要的库文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">((xpm "libxpm.dll" "xpm4.dll" "libXpm-nox4.dll")</span><br><span class="line">(png "libpng16.dll" "libpng16-16.dll")</span><br><span class="line">(tiff "libtiff-5.dll" "libtiff3.dll" "libtiff.dll")</span><br><span class="line">(jpeg "libjpeg-9.dll")</span><br><span class="line">(gif "libgif-7.dll")</span><br><span class="line">(svg "librsvg-2-2.dll")</span><br><span class="line">(gdk-pixbuf "libgdk_pixbuf-2.0-0.dll")</span><br><span class="line">(glib "libglib-2.0-0.dll")</span><br><span class="line">(gobject "libgobject-2.0-0.dll")</span><br><span class="line">(gnutls "libgnutls-28.dll" "libgnutls-26.dll")</span><br><span class="line">(libxml2 "libxml2-2.dll" "libxml2.dll")</span><br><span class="line">(zlib "zlib1.dll" "libz-1.dll"))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> coding system </tag>
            
            <tag> image library </tag>
            
            <tag> keybind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 工作流</title>
      <link href="/hexo-blog/2016/03/17/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/git/git-workflow/"/>
      <url>/hexo-blog/2016/03/17/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/git/git-workflow/</url>
      
        <content type="html"><![CDATA[<h2 id="中心化的工作流"><a href="#中心化的工作流" class="headerlink" title="中心化的工作流"></a>中心化的工作流</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>首先它让每个开发者都有自己的本地的完整项目副本。隔离的环境使得每个开发都的工作独立于项目的其它修改 —— 他们可以在自己的本地仓库中添加提交，完全无视上游的开发，直到需要的时候。</li><li>其次，它让你接触到了 Git 分支和合并模型。Git 分支被设计为故障安全的机制，用来在仓库之间整合代码和共享更改。</li></ul><h3 id="如何工作"><a href="#如何工作" class="headerlink" title="如何工作"></a>如何工作</h3><ul><li>中心化的工作将中央仓库作为项目中所有修改的唯一入口。默认的开发分支叫做 master，所有的更改都被提交到这个分支。这种工作流不需要 master 之外的其它分支。</li><li>开发者将中央仓库克隆到本地后开始工作。在他们的本地项目副本中，他们可以像 SVN 一样修改文件和提交更改；不过这些新的提交被保存在本地 —— 它们和中央仓库完全隔离。这使得开发者可以将和上游的同步推迟到他们方便的时候。</li><li>为了向官方项目发布修改，开发者将他们本地 master 分支“推送”到中央仓库。这一步等同于 svn commit，除了 Git 添加的是所有不在中央 master 分支上的提交。</li></ul><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-images-01.png" class=""><h3 id="管理冲突"><a href="#管理冲突" class="headerlink" title="管理冲突"></a>管理冲突</h3><ul><li>中央仓库代码官方项目，因此它的提交历史应该被视为不可更改的。如果开发者的本地提交和中央仓库分叉了，Git 会拒绝将它们的修改推送上去，因为这会覆盖官方提交。</li></ul><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-images-02.png" class=""><ul><li>在开发在提交功能之前，需要 fetch 更新中央提交，在它们之上 rebase 自己的更改。</li><li>如果本地修改和上游提交的冲突时，Git 会暂停 rebase 流程，给你机会手工解决这些冲突。Git 很赞的一点是，它将 git status 和 git add 命令同时用来生成提交和解决合并冲突。这使得开发能够轻而易举的管理他们的合并。另外，如果他们改错了什么，Git 能让他们轻易的退出 rebase 过程，然后重试。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul><li><p>项目管理员生成一个空的版本库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@host git init --bare /path/to/repo.git</span><br></pre></td></tr></table></figure></li><li><p>三个人 A, B, C 同时编写同一个项目，需要先在本地创建一个完整的项目副本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh://user@host/path/to/repo.git</span><br></pre></td></tr></table></figure></li></ul><p>此时，Git 自动添加了一个名为 origin 的运程连接，指向中央仓库，以方便提交。<br>A 可以使用标准 Git 提交流程开发功能：编辑、缓存、提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git add &lt;some file&gt;</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><p>同时，B 也在本地进行自己的开发工作。</p><ul><li><p>A 发布了他们修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li></ul><p>此时中央仓库会将 master -&gt; origin/master</p><ul><li><p>B 试图发布修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li></ul><p>但是因为 A 已经提交了功能到中央仓库，导致 B 的本地历史和中央仓库分叉，Git 会拒绝本次提交。</p><ul><li>B 如果想提交，必须要先 rebase 本地仓库</li></ul><p>可以使用 git pull 来拉取并修改，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><ul><li>–rebase 命令告诉 Git，在同步中央仓库的修改之后，将 B 的所有提交移到 master 分支的顶端。</li></ul><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-images-02.png" class=""><ul><li><p>如果没有冲突的文件，B 就可以直接进行提交了，但是如果存在冲突，可以根据提示查找冲突的文件，修改之后，可以继续 rebase 操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;some-file&gt;</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure></li></ul><p>同样的，如果此时不知道自己做了什么，可以回滚一次操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure><ul><li>然后再进行 push 就可以提交到中央版本库了。</li></ul><h2 id="基于功能人分支的工作流"><a href="#基于功能人分支的工作流" class="headerlink" title="基于功能人分支的工作流"></a>基于功能人分支的工作流</h2><h3 id="Feature-分支工作流"><a href="#Feature-分支工作流" class="headerlink" title="Feature 分支工作流"></a>Feature 分支工作流</h3><ul><li>掌握了中心化工作流的使用姿势，在你的开发流程中添加功能分支是一个简单的方式，来促进协作和开发者之间的交流。这种封装使得多个开发专注自己的功能，而不会打扰主代码库。它还能保证 master 分支永远不会包含损坏的代码，给持续集成环境带来了很大的好处。</li><li>封装功能的开发使得 pull request 的使用成为可能，用来启动围绕一个分支的讨论。它给了其他开发者在功能并入主项目之前参与决策的机会。或者，如果你开发功能时卡在一半，可以发起一个 pull request，向同事寻求建议。重点是：pull request 使得团队在评论其他人的工作时，变得非常简单。</li></ul><h3 id="如何工作-1"><a href="#如何工作-1" class="headerlink" title="如何工作"></a>如何工作</h3><ul><li>Feature 分支工作流同样使用中央仓库，master 同样代码官方的项目历史。但是与其直接提交在本地的 master 分支，开发者每次进行新的工作时创建一个新的分支。Feature 分支应该包含描述性的名称，比如 animated-menu-items(菜单项动画)或 issue-*1061。每个分支都应该有一个清晰、高度集中的目的。</li><li>Git 在技术上无法区别 master 和功能分支，所以开发者可以在 feature 分支上编辑、缓存、提交，就和中心化工作流中一样。</li><li>此外，feature 分支可以被推送到中央仓库。这使得你和其他开发者共享这个功能，而又不改变官方代码。既然 master 只是一个“特殊”的分支，在中央仓库中储存多个 feature 分支不会引出什么问题。当然，这也是备份每个开发者本地提交的好办法。</li></ul><h3 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h3><ul><li>除了隔离功能开发之外，分支使得通过 pull request 讨论修改成为可能。一旦有人完成了一个功能，他们不会立即将它并入 master。他们将 feature 分支推送到中央服务器上，发布一个 pull request，请求将他们的修改并入 master。这给了其他开发者在修改并入主代码库之前审查的机会。</li><li>代码审查是 pull request 的主要好处，但他们事实上被设计成为讨论代码的一般场所。你可以把 pull request 看作是专注某个分支的讨论版。也就是说他们可以用于开发流程之前。比如，一个开发者在某个功能上需要帮助，他只需要发起一个 pull request。感兴趣的小伙伴会自动收到通知，看到相关提交中的问题。</li><li>一旦 pull request 被接受了，发布功能的行为和中心化的工作流是一样的。首先，确定你本地的 master 和上游的 master 已经同步。然后，将 feature 分支并入 master 已经同步。然后可以将 feature 分支并入 master，将更新的 master 推送回中央仓库。</li></ul><h2 id="Gitflow-工作流"><a href="#Gitflow-工作流" class="headerlink" title="Gitflow 工作流"></a>Gitflow 工作流</h2><ul><li>GitFlow 工作流围绕项目发布定义了一个严格的分支模型。有些地方比功能分支工作流更复杂，为管理大型项目提供了框架。</li><li>和功能分支工作流相比，这种工作流没有增加任何新的概念或命令。它给不同的分支指定了特定的角色，定义它们应该如何、什么时候交流。除了功能分支之外，它还为准备发布、维护发布、记录发布分别使用了单独的分支。当然，还能享受到功能分支工作流带来的所有好处：pull request、隔离实验和更高效的协作。</li></ul><h3 id="如何工作-2"><a href="#如何工作-2" class="headerlink" title="如何工作"></a>如何工作</h3><ul><li>GitFlow 工作流仍然使用中央仓库作为开发者沟通的中心。和其它工作流一样，开发者在本地工作，将分支推送到中央仓库。唯一的区别在于项目的分支结构。</li></ul><h4 id="历史分支"><a href="#历史分支" class="headerlink" title="历史分支"></a>历史分支</h4><ul><li>和单独的 master 分支不同，这种工作流使用两个分支来记录项目历史。master 分支储存官方发布历史，develop 分支用来整合功能分支。同时，这还方便了在 master 分支上给所有提交打上版本号标签。</li></ul><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-images-02.png" class=""><ul><li>工作流剩下的部分围绕这两个分支的差别展开。</li></ul><h4 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h4><ul><li>每个新功能都放置在自己的分支中，可以在备份/协作时推送到中央仓库。但是与其合并到 master，功能分支将开发分支作为父分支。当一个功能完成时，它将被合并回 develop。功能永远不应该支持在 master 上交互。</li></ul><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-images-02.png" class=""><ul><li>功能分支加上 develop 分支就是我们之前据说的功能分支工作流。</li></ul><h4 id="发布分支"><a href="#发布分支" class="headerlink" title="发布分支"></a>发布分支</h4><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-images-02.png" class=""><ul><li>一旦 develop 分支的新功能足够发布，你可以从 develop 分支 fork 一个发布分支。这个分支的创建开始了下个发布周期，只有和发布相关的任务应该在这个分支进行，如修复 bug、生成文档等。一旦准备好发布，发布分支将合并进 master，打上版本号的标签。另外，它也应该合并回 develop，后者可能在发布启动之后有了新的进展。</li><li>使用一个专门的分支来准备发布确保一个团队完善当前的发布，其它团队可以继续开发下一个发布的功能。它还建立了清晰的开发阶段。</li><li>通常约定：<ul><li>从 develop 创建分支</li><li>合并进 master 分支</li><li>命名规范 release-* 或者 release/*</li></ul></li></ul><h4 id="维护分支"><a href="#维护分支" class="headerlink" title="维护分支"></a>维护分支</h4><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/git-images-02.png" class=""><ul><li>维护或者“紧急修复”分支用来快速给产品发布打上补丁。这是唯一可以从 master 上 fork 的分支。一旦修复完成了，它应该被并入 master 和 develop 分支，master 应该打上更新的版本号的标签。</li><li>有一个专门的 bug 修复开发线使得团队能够处理 issue，而不打断其它工作流或是要等到下一个发布周期。你可以将维护分支看作在 master 分支上工作的临时发布分支。</li></ul><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><h4 id="创建一个开发分支"><a href="#创建一个开发分支" class="headerlink" title="创建一个开发分支"></a>创建一个开发分支</h4><ul><li><p>为默认的 master 分支创建一个互补的 develop 分支。最简单的办法是在本地创建一个空的 develop 分支，将他推送到服务器上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch develop</span><br><span class="line">git push -u origin develop</span><br></pre></td></tr></table></figure></li><li><p>这个分支将会包含项目中所有的历史，而 master 将包含不完全的版本。其他开发者应该将中央仓库克隆到本地，创建一个分支来追踪 develop 分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone http://xxx/xx/repo.git</span><br><span class="line">git checkout -b develop origin/develop</span><br></pre></td></tr></table></figure></li></ul><h4 id="开始了新的功能"><a href="#开始了新的功能" class="headerlink" title="开始了新的功能"></a>开始了新的功能</h4><ul><li><p>当两个人都需要在不同分支上开始工作，即为自己的功能创建单独的分支。且他们的分支都是基于 develop 而不是 master：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b some-feature develop</span><br></pre></td></tr></table></figure></li><li><p>他们都使用“编辑、缓存、提交”的一般约定来向功能分支添加提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git add &lt;some-file&gt;</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure></li></ul><h3 id="完成功能"><a href="#完成功能" class="headerlink" title="完成功能"></a>完成功能</h3><ul><li><p>添加了一些提交后，可以使用 pull request，现在正是发起的好时机，请求将新功能并入 develop 分支。否则可以先并入本地的 develop 分支，推送到中央仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git pull origin develop</span><br><span class="line">git checkout develop</span><br><span class="line">git merge some-feature</span><br><span class="line">git push</span><br><span class="line">git branch -d some-feature</span><br></pre></td></tr></table></figure></li><li><p>第一个命令在尝试并入功能分支之前确保 develop 分支已经是最新的。注意，功能绝不该直接并入 master。冲突的处理方式和中心化工作流相同。</p></li></ul><h3 id="发布新功能"><a href="#发布新功能" class="headerlink" title="发布新功能"></a>发布新功能</h3><ul><li><p>当另外的开发人员，仍在他自己的分支上工作时，开始准备项目的第一个官方发布。和开发功能一样，新建一个分支来封装发布的准备工作。这也正是发布的版本号创建的第一步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b release-0.1 develop</span><br></pre></td></tr></table></figure></li><li><p>这个分支用来整理提交，充分测试，更新文档，为即将到来的发布做各种准备。它就像是一个专门用来完善发布的功能分支。</p></li><li><p>一旦发布准备稳妥，即将其并入 master 和 develop，然后删除发布分支。合并回 develop 很重要，因为可能已经有关键的更新添加到发布分支上，而开发新功能需要用到它们。同样的，如果团队重视代码审查，现在将是发起 pull request 的完美时机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge release-0.1</span><br><span class="line">git push</span><br><span class="line">git checkout develop</span><br><span class="line">git merge release-0.1</span><br><span class="line">git push</span><br><span class="line">git branch -d release-0.1</span><br></pre></td></tr></table></figure></li><li><p>发布分支是功能开发（develop）分支和公开发布（master）之间的过渡阶段。不论什么时候，将提交并入 msater 时，你应该为提交打上方便引用的标签：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -a 0.1 -m "Initial public release" master</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure></li><li><p>Git 提供了许多钩子，即仓库中特定事件发生时被执行的脚本。当你向中央仓库推送 master 分支或者标签时，你可以配置一个钩子来自动化构建公开发布。</p></li></ul><h3 id="终端用户发现一个-Bug"><a href="#终端用户发现一个-Bug" class="headerlink" title="终端用户发现一个 Bug"></a>终端用户发现一个 Bug</h3><ul><li><p>正式发布之后，两个开发一起为下一个发布开发功能。这时，一个终端用户开了一个 issue 抱怨说当前发布中存在一个 Bug。为了解决这个 bug，先从 master 创建一个维护分支，用几个提交修复这个 issue，然后直接合并回 master。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b issue*001 master</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Fix the bug</span></span></span><br><span class="line">git checkout master</span><br><span class="line">git merge issue-*001</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p>和发布分支一样，维护分支包含了 develop 中需要的重要更新，因此需要执行同样的合并。接下来，可以删除这个分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge issue-*001</span><br><span class="line">git push</span><br><span class="line">git branch -d issue-*001</span><br></pre></td></tr></table></figure></li></ul><h3 id="各分支的意义"><a href="#各分支的意义" class="headerlink" title="各分支的意义"></a>各分支的意义</h3><ul><li>feature (多个) 主要是自己玩了，差不多的时候要合并回 develop 去。不与 master 交互。</li><li>develop (同时间一个) 主要是和 feature 以及 release 交互</li><li>release (同时间一个) 总是基于 develop，最后又合并回 develop。当然对应的 tag 要合并到 master 分支，生命周期短，仅是为了发布程序</li><li>hotfix (同一时间一个) 总是基于 master，并最后合并到 master 和 develop。生命同期较短，用来修复 bug 或小粒度修改发布</li><li>master (仅一个) 关联 tag 和发布</li></ul><h3 id="模型中各个模块内容的使用"><a href="#模型中各个模块内容的使用" class="headerlink" title="模型中各个模块内容的使用"></a>模型中各个模块内容的使用</h3><ul><li>在这个模型中，master 和 develop 都具有象征意义。master 分支上的代码总是稳定的 (stable build)，随时可以发布出去。develop 上的代码总是从 feature 上合并过来的，可以进行 Nightly Builds，但不直接在 develop 上进行开发。当 develop 上的 featur 足够多以致于可以进行新版本的发布时，可以创建 release 分支。</li><li>release 分支基于 develop，进行委阴简单的修改后就被合并到 master，并打上 tag，表示可以发布了。紧接着 release 将被合并到 develop；此时 Develop 可能往前跑了一段，出现合并冲突，需要手工解决冲突后再次合并，这步完成后就删除 release 分支</li><li>当从已发布版本中发现 bug 要修复时，就应用到 hotfix 分支了。hotfix 基于 master 分支，完成 bug 修复或者紧急修改后，要 merge 回 master，打上一个新的 tag，并 merge 回 develop，删除 hotfix 分支。</li><li>由此可见 release 和 hotfix 的生命周期都较短，而 master 和 develop 虽然总是存在，但去不常使用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> workflow </tag>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graphviz dot 笔记</title>
      <link href="/hexo-blog/2016/01/08/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/emacs-graphviz-dot/"/>
      <url>/hexo-blog/2016/01/08/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs/emacs-graphviz-dot/</url>
      
        <content type="html"><![CDATA[<h2 id="Dot-生成图的默认命令"><a href="#Dot-生成图的默认命令" class="headerlink" title="Dot 生成图的默认命令"></a>Dot 生成图的默认命令</h2><p><code>dot -T&lt;type&gt; -o &lt;outfile&gt; &lt;infile.dot&gt;</code></p><p>dot 可以替换为circo等其他算法，详细见<a href="#命令的选择">命令的选择</a>章节。</p><p>输入文件是 <strong>&lt;infile.dot&gt;</strong> ，生成的格式由 <strong><type></strong> 指定，生成的文件是 <strong><outfile></strong> 。其中 <strong>-T<type></strong> 包括：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-Tps (PostScript)</span><br><span class="line">-Tsvg -Tsvgz (Structured Vector Graphics)</span><br><span class="line">-Tfig (XFIG  graphics)</span><br><span class="line">-Tmif  (FrameMaker graphics)</span><br><span class="line">-Thpgl (HP pen plotters)</span><br><span class="line">-Tpcl (Laserjet printers)</span><br><span class="line">-Tpng -Tgif (bitmap graphics)</span><br><span class="line">-Tdia (GTK+ based diagrams)</span><br><span class="line">-Timap (imagemap files for httpd servers for each node or edge  that  has a non-null "href" attribute.)</span><br><span class="line">-Tcmapx (client-side imagemap for use in html and xhtml)</span><br></pre></td></tr></table></figure><h2 id="rank"><a href="#rank" class="headerlink" title="rank"></a>rank</h2><p>rank 约束了子图的节点位置，有向图中，一个箭头的指向，带有级别，一般是尾端高于尖端，即 <code>a-&gt;b</code> a 的级别要高于 b 的级别。</p><p>same : 所有节点在同一级别的节点处</p><p>min : 所有节点在最小级别节点处</p><p>source : 所有节点在最低级别，且只有子图属性为 <strong>source</strong> 或者 <strong>min</strong> 的时候，才能使用同样的级别</p><p>max : 类似于 <strong>source</strong></p><p>sink : 类似于 <strong>source</strong></p><blockquote><p><strong>NOTE:</strong> 最低级别，可以是 <strong>最上</strong> 、 <strong>最下</strong> 、 <strong>最左</strong> 、 <strong>最右</strong></p></blockquote><h2 id="rankdir"><a href="#rankdir" class="headerlink" title="rankdir"></a>rankdir</h2><ul><li>TB : top-to-bottom</li><li>LR : left-to-right</li><li>BT : bottom-to-top</li><li>RL : right-to-left</li></ul><h2 id="dot-线条"><a href="#dot-线条" class="headerlink" title="dot 线条"></a>dot 线条</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">splines &#x3D; ortho #直角拆线</span><br><span class="line">splines &#x3D; spline #曲线（不遮挡）</span><br><span class="line">splines &#x3D; cuvved #曲线（可遮挡）</span><br><span class="line">splines &#x3D; line #直线（可遮挡）</span><br><span class="line">splines &#x3D; polyline #直线（不遮挡）</span><br></pre></td></tr></table></figure><h2 id="命令的选择"><a href="#命令的选择" class="headerlink" title="命令的选择"></a>命令的选择</h2><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>dot</td><td>渲染图具有明确的方向性</td></tr><tr><td>neato</td><td>图缺乏方向性</td></tr><tr><td>twopi</td><td>图采用放射性布局</td></tr><tr><td>circo</td><td>图采用环形布局</td></tr><tr><td>fdp</td><td>图缺乏方向性</td></tr><tr><td>sfdp</td><td>用来渲染大型图，且图片缺乏方向性</td></tr></tbody></table><h2 id="静默执行代码"><a href="#静默执行代码" class="headerlink" title="静默执行代码"></a>静默执行代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(setq org-confirm-babel-evaluate nil) ;;执行静默语句块</span><br></pre></td></tr></table></figure><h2 id="dot-实例"><a href="#dot-实例" class="headerlink" title="dot 实例"></a>dot 实例</h2><ul><li><p>绘制流程图:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">digraph structs &#123;</span><br><span class="line">node[shape&#x3D;record]</span><br><span class="line">struct1 [label&#x3D;&quot;&lt;f0&gt; left|&lt;f1&gt; mid\ dle|&lt;f2&gt; right&quot;];</span><br><span class="line">struct2 [label&#x3D;&quot;&#123;&lt;f0&gt; one|&lt;f1&gt; two\n\n\n&#125;&quot; shape&#x3D;Mrecord];</span><br><span class="line">struct3 [label&#x3D;&quot;hello\nworld |&#123; b |&#123;c|&lt;here&gt; d|e&#125;| f&#125;| g | h&quot;];</span><br><span class="line">struct1:f1 -&gt; struct2:f0;</span><br><span class="line">struct1:f0 -&gt; struct3:f1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/dot04.png" class="" title="dot-04"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">  digraph g &#123;</span><br><span class="line">  size&#x3D;&quot;8,6&quot;</span><br><span class="line">  ratio&#x3D;expand</span><br><span class="line">  edge [dir&#x3D;both]</span><br><span class="line">  plcnet [shape&#x3D;box, label&#x3D;&quot;plc network&quot;]</span><br><span class="line">  subgraph cluster_wrapline &#123;</span><br><span class="line">    label&#x3D;&quot;wrapline control system&quot;</span><br><span class="line">    color&#x3D;purple</span><br><span class="line">    subgraph &#123;</span><br><span class="line">    rank&#x3D;same</span><br><span class="line">    exec</span><br><span class="line">    sharedmem [style&#x3D;filled, fillcolor&#x3D;lightgrey, shape&#x3D;box]</span><br><span class="line">    &#125;</span><br><span class="line">    edge[style&#x3D;dotted, dir&#x3D;none]</span><br><span class="line">    exec -&gt; opserver</span><br><span class="line">    exec -&gt; db</span><br><span class="line">    plc -&gt; exec</span><br><span class="line">    edge [style&#x3D;line, dir&#x3D;both]</span><br><span class="line">    exec -&gt; sharedmem</span><br><span class="line">    sharedmem -&gt; db</span><br><span class="line">    plc -&gt; sharedmem</span><br><span class="line">    sharedmem -&gt; opserver</span><br><span class="line">  &#125;</span><br><span class="line">  plcnet -&gt; plc [constraint&#x3D;false]</span><br><span class="line">  millwide [shape&#x3D;box, label&#x3D;&quot;millwide system&quot;]</span><br><span class="line">  db -&gt; millwide</span><br><span class="line">  subgraph cluster_opclients &#123;</span><br><span class="line">    color&#x3D;blue</span><br><span class="line">    label&#x3D;&quot;operator client&quot;</span><br><span class="line">    rankdir&#x3D;lr</span><br><span class="line">    labelloc&#x3D;b</span><br><span class="line">    node[label&#x3D;client]</span><br><span class="line">    opserver -&gt; client1</span><br><span class="line">    opserver -&gt; client2</span><br><span class="line">    opserver -&gt; client3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/dot01.png" class="" title="dot-01"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">digraph G &#123;</span><br><span class="line">rankdir&#x3D;LR</span><br><span class="line">node [shape&#x3D;plaintext]</span><br><span class="line">a [</span><br><span class="line">label&#x3D;&lt;</span><br><span class="line">&lt;TABLE BORDER&#x3D;&quot;0&quot; CELLBORDER&#x3D;&quot;1&quot; CELLSPACING&#x3D;&quot;0&quot;&gt;</span><br><span class="line">&lt;TR&gt;&lt;TD ROWSPAN&#x3D;&quot;3&quot; BGCOLOR&#x3D;&quot;yellow&quot;&gt;class&lt;&#x2F;TD&gt;&lt;&#x2F;TR&gt;</span><br><span class="line">&lt;TR&gt;&lt;TD PORT&#x3D;&quot;here&quot; BGCOLOR&#x3D;&quot;lightblue&quot;&gt;qualifier&lt;&#x2F;TD&gt;&lt;&#x2F;TR&gt;</span><br><span class="line">&lt;&#x2F;TABLE&gt;&gt;</span><br><span class="line">]</span><br><span class="line">b [shape&#x3D;ellipse style&#x3D;filled</span><br><span class="line">label&#x3D;&lt;</span><br><span class="line">&lt;TABLE BGCOLOR&#x3D;&quot;bisque&quot;&gt;</span><br><span class="line">&lt;TR&gt;&lt;TD COLSPAN&#x3D;&quot;3&quot;&gt;elephant&lt;&#x2F;TD&gt;</span><br><span class="line">&lt;TD ROWSPAN&#x3D;&quot;2&quot; BGCOLOR&#x3D;&quot;chartreuse&quot;</span><br><span class="line">VALIGN&#x3D;&quot;bottom&quot; ALIGN&#x3D;&quot;right&quot;&gt;two&lt;&#x2F;TD&gt; &lt;&#x2F;TR&gt;</span><br><span class="line">&lt;TR&gt;&lt;TD COLSPAN&#x3D;&quot;2&quot; ROWSPAN&#x3D;&quot;2&quot;&gt;</span><br><span class="line">&lt;TABLE BGCOLOR&#x3D;&quot;grey&quot;&gt;</span><br><span class="line">&lt;TR&gt; &lt;TD&gt;corn&lt;&#x2F;TD&gt; &lt;&#x2F;TR&gt;</span><br><span class="line">&lt;TR&gt; &lt;TD BGCOLOR&#x3D;&quot;yellow&quot;&gt;c&lt;&#x2F;TD&gt; &lt;&#x2F;TR&gt;</span><br><span class="line">&lt;TR&gt; &lt;TD&gt;f&lt;&#x2F;TD&gt; &lt;&#x2F;TR&gt;</span><br><span class="line">&lt;&#x2F;TABLE&gt; &lt;&#x2F;TD&gt;</span><br><span class="line">&lt;TD BGCOLOR&#x3D;&quot;white&quot;&gt;penguin&lt;&#x2F;TD&gt;</span><br><span class="line">&lt;&#x2F;TR&gt;</span><br><span class="line">&lt;TR&gt; &lt;TD COLSPAN&#x3D;&quot;2&quot; BORDER&#x3D;&quot;4&quot; ALIGN&#x3D;&quot;right&quot; PORT&#x3D;&quot;there&quot;&gt;4&lt;&#x2F;TD&gt; &lt;&#x2F;TR&gt;</span><br><span class="line">&lt;&#x2F;TABLE&gt;&gt;</span><br><span class="line">]</span><br><span class="line">c [</span><br><span class="line">label&#x3D;&lt;long line 1&lt;BR&#x2F;&gt;line 2&lt;BR ALIGN&#x3D;&quot;LEFT&quot;&#x2F;&gt;line 3&lt;BR ALIGN&#x3D;&quot;RIGHT&quot;&#x2F;&gt;&gt;</span><br><span class="line">]</span><br><span class="line">subgraph &#123; rank&#x3D;same b c &#125;</span><br><span class="line">a:here -&gt; b:there [dir&#x3D;both arrowtail &#x3D; diamond]</span><br><span class="line">c -&gt; b</span><br><span class="line">d [shape&#x3D;triangle]</span><br><span class="line">d -&gt; c [label&#x3D;&lt;</span><br><span class="line">&lt;TABLE&gt;</span><br><span class="line">&lt;TR&gt;&lt;TD BGCOLOR&#x3D;&quot;red&quot; WIDTH&#x3D;&quot;10&quot;&gt; &lt;&#x2F;TD&gt;</span><br><span class="line">&lt;TD&gt;Edge labels&lt;BR&#x2F;&gt;also&lt;&#x2F;TD&gt;</span><br><span class="line">&lt;TD BGCOLOR&#x3D;&quot;blue&quot; WIDTH&#x3D;&quot;10&quot;&gt; &lt;&#x2F;TD&gt;</span><br><span class="line">&lt;&#x2F;TR&gt;</span><br><span class="line">&lt;&#x2F;TABLE&gt;&gt;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/zucchiniy/blog-assets@master/images/dot02.png" class="" title="dot-02">]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dot </tag>
            
            <tag> graphviz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS  语法入门</title>
      <link href="/hexo-blog/2016/01/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/css-learning-notes/"/>
      <url>/hexo-blog/2016/01/06/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/css-learning-notes/</url>
      
        <content type="html"><![CDATA[<p>CSS 是前端开发的基础。CSS 規則由兩個主要的部分構成:選擇器，以及一條或者多條聲明。<br>CSS 是前端开发的基础，主要由两个部分构成：</p><ol><li>选择器</li><li>声明，可以是单条，也可以是多条</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selector &#123; declaration1; declaration2; ... declarationN;&#125;</span><br></pre></td></tr></table></figure><p>选择器通常是 HTML 中的元素。每条声明都是由一个属性和一个值构成，属性是希望设置的样式、属性，每个属性都有一个值，并用冒号分开。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">selector</span> &#123;<span class="attribute">property</span>: value&#125;</span><br></pre></td></tr></table></figure><p>下面代码的作用是将 <code>h1</code> 元素内的文字的颜色定义为红色，同时将字体的大小设置为 14 像素。</p><p>在这个例子中，<code>h1</code> 是选择器，<em>color</em> 和 <em>font-size</em> 是属性，<em>red</em> 和 <em>14px</em> 是值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">color </span>: red; <span class="attribute">font-size</span>: <span class="number">14px</span>;&#125;</span><br></pre></td></tr></table></figure><p>如果值是多个词组，可以给值增加引号。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-family</span>: <span class="string">"sans serif"</span>;&#125;</span><br></pre></td></tr></table></figure><p>如果林定义不止一个声明，则需要用分号将每个声明隔开。</p><p>下面的示例是将段落的字体定义为红色且居中。</p><p>虽然最后一个属性是不需要增加分号的，但是为了以后修改，最好在每条属性后面都增加分号分隔符。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="attribute">font-family</span>: arial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子元素总是继承你元素的属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">     <span class="attribute">font-family</span>: Vrdana, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，在 body 属性下的元素：p, td, ul, ol, li, dl, dt, dd 等都会继承 body 中定义的字体，同样继承来的值也可以进行重写。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-family</span>: Vrdana;&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-family</span>: Times;&#125;</span><br></pre></td></tr></table></figure><p>选择器、派生选择器：通过依据元素位置的上下文件关系来定义的样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">strong</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ID 选择器：可以为标有特定 ID 的元素指定样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#red</span> &#123; <span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><p>ID 选择器也可以和派生选择器一起使用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0.5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单独选择器：可以单独发挥作用的选择器。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dotted <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类选择器：以一个点号作为开头。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123; <span class="attribute">text-align</span>: center;&#125;</span><br></pre></td></tr></table></figure><p>也可以用作派生选择器上。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fancy</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f60</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元素也可以基于它们的类而被选择。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">td</span><span class="selector-class">.fancy</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f60</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的两个示例中，第一个是类名为 fancy 的元素内容属性设置，下面的则是指 <code>&lt;td class=&#39;fancy&#39;&gt;</code> 的元素的属性设置。</p><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>[attribut]</td><td>用于选取带有指定属性的元素</td></tr><tr><td>[attribut=value]</td><td>用于选取带有指定属性和值的元素</td></tr><tr><td>[attribut~=value]</td><td>用于选取属性值中包含指定词条的元素</td></tr><tr><td>[attribut&vert;=value]</td><td>用于选取带有以指定开头的属性值的元素，该值必须是整个单词</td></tr><tr><td>[attribut^=value]</td><td>匹配属性值以指定值开头的每个元素</td></tr><tr><td>[attribut$=value]</td><td>匹配属性值以指定值结尾的每个元素</td></tr><tr><td>[attribut*=value]</td><td>匹配属性值中包含指定值的每个元素</td></tr></tbody></table><p>CSS 允许应用纯色做为背景，也允许使用背景图片创建一个繁杂的效果。</p><p>可以使用 <strong>background-color</strong> 指定背景色，这个属性接受任务合法的颜色值。可以利用这个将背景色配置为灰色。<strong>background-color</strong> 是不能被继承的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">background-color</span>: gray;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">background-color</span>: gray; <span class="attribute">padding</span>:<span class="number">20px</span>;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gcc/g++ 命令</title>
      <link href="/hexo-blog/2015/12/23/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/gcc-g++-command/"/>
      <url>/hexo-blog/2015/12/23/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/gcc-g++-command/</url>
      
        <content type="html"><![CDATA[<p>gcc -E sourcefile.c :  -E，只执行到预编译，直接输出预编译结果</p><p>gcc -S sourcefile.c :  -S，只执行到源代码到汇编代码的转换，输出汇编代码</p><p>gcc -c sourcefile.c :  -c，只执行到编译，输出目标文件</p><p>gcc (-E/-S/-c) sourcefile.c -o output-file :  -o，指定输出文件名，可以使用以上三种标签中的一种。</p><p>-o 参数可以被省略，这种情况下编译器按以下默认名方式输出: <br /><br>-E 预编译结果将被输出到标准输出端口<br /><br>-S 生成名为 sourcefile.s 的汇编文件<br /><br>-c 生成名为 sourcefile.o 的目标文件<br /></p><p><strong>无标签的时候，生成名为 a.out 的可执行文件</strong></p><dl><dt>gcc -g sourcefile.c</dt><dd>-g 生成供调用的可执行文件，可以在 gdb 中运行。由于文件中包含了调试信息，因此运行效率很低，且文件也大了不少。</dd></dl><p>这里可以用 strip 把文件中的 debug 信息删除。 <code>strip a.out</code></p><dl><dt>gcc -s sourcefile.c</dt><dd>-s 直接生成与运用 strip 同样的效果的可执行文件</dd></dl><dl><dt>gcc -O sourcefile.c</dt><dd>-O 编译器对代码进行自动化编译，输出效率更高的可执行文件</dd></dl><pre><code>&lt;p class=&quot;verse&quot;&gt;-O2 可以跟上数字表示优化等级 gcc -O2 sourcefile.c 数字越大越加优化。但是也会有出 bug 的风险&lt;br /&gt;&lt;/p&gt;</code></pre><dl><dt>gcc -Wall sourcefile.c</dt><dd>-W 在编译中开启一些额外的警告信息。-Wall，将所有的警告信息全开。</dd></dl><dl><dt>gcc sourcefile.c -L/path/to/lib -lxxx -l/path/to/include</dt><dd><p class="verse"><br>    - -l 指定所使用到的函数库，本例中是尝试链接名为 libxxx.a 的函数库<br /><br>    - -L 指定函数库所在的文件，本例中链接器会尝试搜索/path/to/lib 文件夹<br /><br>    - -I 指定文件所在的文件夹，本例中预编译器会尝试搜索/path/to/include 文件夹<br /><br>    </p></dd></dl>]]></content>
      
      
      <categories>
          
          <category> 工具环境 </category>
          
          <category> GCC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gcc </tag>
            
            <tag> g++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
