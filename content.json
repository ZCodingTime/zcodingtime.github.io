{"meta":{"title":"Z 空间","subtitle":"世事洞明皆学问，人情练达即文章。","description":"喜欢 Python 的靠 Java 和 JavaScript 吃饭的中年人，不谢顶。","author":"zucchiniy","url":"https://www.zucchiniy.cn/hexo-blog","root":"/hexo-blog/"},"pages":[{"title":"关于","date":"2019-12-23T07:29:10.000Z","updated":"2019-12-23T07:29:10.000Z","comments":true,"path":"about/index.html","permalink":"https://www.zucchiniy.cn/hexo-blog/about/index.html","excerpt":"","text":"个人信息 Dylan Yang 邮箱：banshiliuli1990@sina.com 技术博客：https://www.zucchiniy.cn github：https://github.com/zucchiniy Emacs 用户，喜欢学习，喜欢折腾 重度手残，五笔用户 学习 Python 中希望能成为 Pythonista 。 技能清单以下内容评级按照 简历中的水平 进行评定 熟悉 Linux 系统 熟悉 Mac、Linux 下的环境配置 熟悉 MySQL 了解 Java、C、C++ 熟练使用 Vim、Emacs 熟悉 Python 并努力上升到熟练中"},{"title":"","date":"2019-12-23T07:23:12.167Z","updated":"2019-12-23T07:23:12.167Z","comments":true,"path":"projects/index.html","permalink":"https://www.zucchiniy.cn/hexo-blog/projects/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2019-12-23T07:16:06.278Z","updated":"2019-12-23T07:16:06.278Z","comments":true,"path":"blog/categories/index.html","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-12-23T07:16:54.303Z","updated":"2019-12-23T07:16:54.303Z","comments":true,"path":"blog/tags/index.html","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"搭建个人博客","slug":"工具环境/build-blog-with-hexo","date":"2020-01-04T16:00:00.000Z","updated":"2020-01-04T16:26:20.690Z","comments":true,"path":"2020/01/05/工具环境/build-blog-with-hexo/","link":"","permalink":"https://www.zucchiniy.cn/hexo-blog/2020/01/05/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/build-blog-with-hexo/","excerpt":"我们无法选择生活的样子，但我们可以记下来。 博客的开始其实，一切都是为了更好的装逼。好吧，我着相了。 最开始想做一个自己博客，主要是因为看到了很多人都有，觉得自己没有太 Low 了。于是申请了 CSDN 的用户，但是太丑了，于是又申请了博客园，感觉这些都不是我想要的，而做为一个 Emacser 不使用 Github 搭建一个自己的博客，感觉就已经落伍了。 于是就有这最初的一个，相当简陋的利用 Emacs 的 Org-mode 搭建的博客，后来看了 Org-page 这个包，但是，我配置不好啊！为什么为什么！ 最后，从 Hugo 和 Hexo 之间，我选择了 Hexo，虽然 Hugo 在 Windows 上使用起来更方便，但是我还是觉得 Hexo 更适合我。","text":"我们无法选择生活的样子，但我们可以记下来。 博客的开始其实，一切都是为了更好的装逼。好吧，我着相了。 最开始想做一个自己博客，主要是因为看到了很多人都有，觉得自己没有太 Low 了。于是申请了 CSDN 的用户，但是太丑了，于是又申请了博客园，感觉这些都不是我想要的，而做为一个 Emacser 不使用 Github 搭建一个自己的博客，感觉就已经落伍了。 于是就有这最初的一个，相当简陋的利用 Emacs 的 Org-mode 搭建的博客，后来看了 Org-page 这个包，但是，我配置不好啊！为什么为什么！ 最后，从 Hugo 和 Hexo 之间，我选择了 Hexo，虽然 Hugo 在 Windows 上使用起来更方便，但是我还是觉得 Hexo 更适合我。 利用 Hexo 的坑 有些插件需要翻墙，有些不用，我也不记得哪个用哪个不用了，实在不行可以使用淘宝的npm 源进行安装。 环境配置好之后，最好更新一下模板，把一些常用的内容写到 Hexo的模板里，这样在后续的使用中，可以快速的增加标签、分类和简介等内容。 学习 Markdown , 这个并不是一个坑，而是一个忠告，作为一个常年游荡在GitHub 的好同志来说，但是对于一个 Emacser 来说，我更喜欢 Org-mode，但是 Org-mode 并不能直接用来发布 Hexo博客，有些人会说可以利用一些工具，但是与其增加一些工具，不如学习一下Markdown, 这根本用不了几分钟，虽然 Org-mode很强大（忍不住安利一波），但是 Markdown作为一个大众的标记语言，简单的语法还是需要我们掌握的。 记住常用的命令 hexo new markdown_file 新建文章 hexo new page html_file 新建页面 hexo generate 生成静态页面到 public 目录 hexo server 开启预览访问端口，4000， Ctrl+c 关闭 server hexo deploy 将 .deploy 目录部署到 GitHub 这里需要配置 deploy 的项目地址并安装了 hexo-deployer-git 插件，才能使用这个功能 最后一个坑，挑选一个合适的主题，好吧，我选择了很久——大概四天吧，可能很多人能非常快的决定，但是对于我来说，把所有好看的主题都看一遍，才是我想做的事，最后我选择了 Next 主题，简单美观，还有非常齐全的配置说明 部署使用的命令有三个 hexo clean / hexo generate / hexo deploy，这三个命令之后，就可以登录你的静态博客页面去查看了。 博客的生活我很喜欢调试自己的博客，但是写博客就不是那么喜欢了，但是我希望能养成一个定期写博客的习惯。 所以，我需要博客，主要是用来装…咳，主要是用来记录我们的生活、工作的内容，这样在下次使用的时候，就能更好的做到了。 Hexo 相关安装在几次试验之后，Node.js 环境还是使用 nvm管理比较好用，下载的时候可以使用 npm --registry=https://registry.npm.taobao.org install 进行安装下面的模块。 12345678910npm install -g hexo-clinpm install hexo-deployer-git --savenpm install hexo-generator-search --savenpm install hexo-generator-feed --savenpm install -g ternnpm install -g js-beautifynpm install -g jshintnpm install -g js-yamlnpm install hexo-renderer-jade --savenpm install hexo-renderer-sass --save hugoHugo 是由 Go 语言实现的一个 Static Site Generator 工具，特点就是快，而且默认是支持 Org mode 这种文本的。 虽然对于 hexo 而言少了许多好看的主题，但是对于 Org mode 的默认支持让我有了决心一用的冲动。 在使用了一段时间之后，发现这个工具完美的解决了我所有的问题，并能让我专心于博客写作本身而不是工具，虽然有一些不方便，但最后还是决定继续使用，而且要减少对工具本身的使用，而加强写作本身。 在长时间的使用之后，发现 Hugo 对 Org mode 的支持也比较一般，对于一些比较好用的特性，功能都不支持，最好的方案还是从 Org 转成 Markdown ，所以在最终使用 ox-hugo 工具配合 Hugo 使用，然后通过 capture 功能直接生成对应的博客文章，方便快捷。 ox-hugo 配置使用 ox-hugo 主要需要配置两个内容，一是将 ox-hugo 增加到配置中，然后是在 启动 org-capture 的时候，增加一个新的选项，可以将自动新增一篇文章。 1234567891011121314151617181920212223242526(use-package ox-hugo :after ox)(with-eval-after-load &#39;org-capture (defun org-hugo-new-subtree-post-capture-template () &quot;Return &#96;org-capture&#39; template string for new Hugo post.&quot; (let* ((date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time))) (title (read-from-minibuffer &quot;Post Title: &quot;)) (file-name (read-from-minibuffer &quot;File Name: &quot;)) (fname (org-hugo-slug file-name))) (mapconcat #&#39;identity &#96;( ,(concat &quot;* TODO &quot; title) &quot;:PROPERTIES:&quot; ,(concat &quot;:EXPORT_FILE_NAME: &quot; fname) ,(concat &quot;:EXPORT_DATE: &quot; date) &quot;:END:&quot; &quot;%?\\n&quot;) &quot;\\n&quot;))) (add-to-list &#39;org-capture-templates &#39;(&quot;h&quot; &quot;Hugo post&quot; entry (file &quot;~&#x2F;workspace&#x2F;blog&#x2F;hugo-posts.org&quot;) (function org-hugo-new-subtree-post-capture-template)))) 在这里，我是将所有的文章写到对应的一个文件中，然后将文件中的所有内容生成到对应的 hugo 文件夹中。 文件头配置如下： 123#+HUGO_BASE_DIR: ~&#x2F;workspace&#x2F;blog&#x2F;content&#x2F;#+SEQ_TODO: TODO DRAFT DONE#+OPTIONS: ^:&#123;&#125; 然后在这个文件中使用导出的快捷键，就可以看到对应的选项了，将 org-export-dispatch 命令绑定到自己的快捷键上就可以看到对应的输出命令。","categories":[{"name":"工具环境","slug":"工具环境","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/"},{"name":"静态博客","slug":"工具环境/静态博客","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/hexo/"},{"name":"hugo","slug":"hugo","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/hugo/"},{"name":"GitHub Pages","slug":"GitHub-Pages","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/GitHub-Pages/"}]},{"title":"读书/观影清单","slug":"生活总结/book-movie-list","date":"2020-01-03T16:00:00.000Z","updated":"2020-01-04T15:55:51.105Z","comments":true,"path":"2020/01/04/生活总结/book-movie-list/","link":"","permalink":"https://www.zucchiniy.cn/hexo-blog/2020/01/04/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/book-movie-list/","excerpt":"","text":"2020 年读书观影清单东野圭吾小说阅读非系列小说 白夜行 幻夜 解忧杂货店 超杀人事件 彷徨之刃 秘密 流星之绊 时生 信 放学后 &lt;2019-12-06 Fri&gt; 单恋 虚无的十字架 宿命 杀人之门分身 导论13 绑架游戏 使命与魂的尽头 湖边杀人案 平等世界 爱情故事 四笑小说 怪笑小说 毒笑小说 黑笑小说 歪笑小说 滑雪场系列 疾风回旋曲 &lt;2017-11-24 Fri&gt; 2.0 风雪追击 加贺一郎系列 毕业 &lt;2019-12-14 Sat&gt; 沉睡的森林 &lt;2019-12-16 Mon&gt; 谁杀了她 &lt;2019-12-17 Tue&gt; 恶意 &lt;2019-12-18 Wed&gt; 我杀了他 &lt;2019-12-22 Sun&gt; 只差一个谎言 &lt;2019-12-29 Sun&gt; 红手指 &lt;2019-12-31 Tue&gt; 新参者 &lt;2020-01-02 Thu&gt; 麒麟之翼 &lt;2020-01-03 Fri&gt; 祈祷落幕时 &lt;2019-12-12 Thu&gt; 神探伽利略系列 侦探伽利略 预知梦 嫌疑人 x 的献身 &lt;2019-12-09 Mon&gt; 圣女的救济 伽利略的苦恼 盛夏的方程式 虚像小丑 禁忌魔术 其它推理小说 罗杰疑案 东方快车谋杀案 无人生还 啤酒谋杀案 ABC 杀人案 福尔摩斯探案全集 消失的爱人 告白 逻辑王子的演绎 化工女王的逆袭 物理教师时空诡计 代上帝之手 无证之罪 坏小孩 长夜难明 络新妇之理 姑获鸟之夏 福尔摩斯探案集 占星术杀人魔法 死了七次的男人 一桩事先张扬的凶杀案 半落 别相信任何人 护士学院杀人事件 所罗门的伪证 达芬奇密码 金色梦乡 余生皆假期 铁鼠之槛 罗杰疑案 尼罗河上的惨案 十角馆事件 一朵桔梗花 夏与冬的奏鸣曲 异邦骑士 七个证人 电影 控方证人 消失的爱人 彗星来的那一夜 穆赫兰道 搏击俱乐部 东方快车谋杀案 致命ID 七宗罪 连续剧 神探伽利略 &lt;2020-01-04 Sat&gt; 犯罪心理2 犯罪心理3 犯罪心理4 犯罪心理5 犯罪心理6 犯罪心理7 犯罪心理8 不死法医 劳拉之谜 大小谎言 Lie to me 神探夏洛克 布雷德利夫人探案 骇人命案事件簿 无妄之灾 我的恐怖妻子 2019 年读书观影清单小说 尸语者 无声的证词 十一根手指 清道夫 幸存者 偷窥者 天谴者 大唐狄公案 一 大唐狄公案 二 大唐狄公案 三 大唐狄公案 四 大唐狄公案 五 大唐狄公案 六 心理罪系列 电影 惊奇队长 复仇者联盟 4 惊声尖笑 1 惊声尖笑 2 惊声尖笑 3 惊声尖笑 4 x 战警：黑凤凰 黑衣人：全球追缉 蜘蛛侠：英雄远征 看不见的客人 深夜食堂 &lt;2019-10-04 Fri&gt; 大侦探皮卡丘 &lt;2019-10-05 Sat&gt; 超能陆战队 &lt;2019-10-06 Sun&gt; 沉默的证人 &lt;2019-10-10 Thu&gt; 连续剧 东宫 知否知否应是绿肥红瘦 犯罪心理1 无人生还 心理法医 专题电影记录漫威系列 《钢铁侠》 《钢铁侠》 《无敌浩克》 《钢铁侠2》 《雷神》 《美国队长》 《复仇者联盟》 《钢铁侠3》 《雷神2》 《美国队长2》 《银河护卫队》 《复仇者联盟2》 《蚊人》 《美国队长3》 《奇异博士》 《银河护卫队2》 《蜘蛛侠》 《雷神3》 《黑豹》 《复仇者联盟3》 《死待》 《死待2》 《蜘蛛侠-英雄归来》 『2017-9-15』 《复仇者联盟3:无限战争》『2018-5-13』 《蚁人2:黄蜂女现身》『2018-8-24』 《毒液:致命守护者》『2018-11-11』 《蜘蛛侠》 《蜘蛛侠2》 《蜘蛛侠3》 DC 影业 《正义联盟》『2017-11-22』 《海王》『2018-12-09』 其它 《神奇动物在哪里：格林德沃之罪》『2018-11-24』 《你的名字》『2017-11-20』 《银魂》『2017-9-1』 《疯狂动物城》 《看不见的客人》 『2017-9-17』 《天才枪手》 《环太平洋 雷霆再起》『2018-6-24』 《神探》『2018-5-25』 《古墓丽影 缘起之战》『2018-6-27』 《玛丽与魔女之花》 『2018-6-28』 《泄密者》『2018-7-19』 《唐人街探案2》『2018-2-22』 《无双》","categories":[{"name":"生活总结","slug":"生活总结","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/"},{"name":"年度清单","slug":"生活总结/年度清单","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/%E5%B9%B4%E5%BA%A6%E6%B8%85%E5%8D%95/"}],"tags":[{"name":"读书清单","slug":"读书清单","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/%E8%AF%BB%E4%B9%A6%E6%B8%85%E5%8D%95/"},{"name":"电影清单","slug":"电影清单","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/%E7%94%B5%E5%BD%B1%E6%B8%85%E5%8D%95/"},{"name":"电视清单","slug":"电视清单","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/%E7%94%B5%E8%A7%86%E6%B8%85%E5%8D%95/"}]},{"title":"Valine 评论使用报错 504","slug":"前端开发/valine-504-error","date":"2019-12-19T09:50:20.000Z","updated":"2020-01-03T06:50:40.476Z","comments":true,"path":"2019/12/19/前端开发/valine-504-error/","link":"","permalink":"https://www.zucchiniy.cn/hexo-blog/2019/12/19/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/valine-504-error/","excerpt":"最近准备重新配置一下 个人博客 ，由原来的 Hugo 改到 Hexo 来做。 评论系统也由之前的 disqus 改成现在的 valine 。 主题也使用了非常好看的 Material Design 的样式的 Material-x ，并在此之上进行修改。 完成初始的配置之后，做一下测试。 恩。。。报错了？！","text":"最近准备重新配置一下 个人博客 ，由原来的 Hugo 改到 Hexo 来做。 评论系统也由之前的 disqus 改成现在的 valine 。 主题也使用了非常好看的 Material Design 的样式的 Material-x ，并在此之上进行修改。 完成初始的配置之后，做一下测试。 恩。。。报错了？！ 虽然报错，但是可以正确的显示对应的服务，查询了一下原因，发现是因为长时间未使用 LeanCode 的服务，导致文件上传域名无法访问了，需要在 设置-&gt;应用 Keys 下面，选择重启 文件上传域名 和 文件访问域名 的服务即可。 具体的位置如下：","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"hexo","slug":"前端开发/hexo","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/hexo/"},{"name":"valine","slug":"valine","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/valine/"},{"name":"Code 504","slug":"Code-504","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/Code-504/"}]},{"title":"利用 Python 生成数据透视表","slug":"后台技术/python-process-excel","date":"2019-08-08T22:53:00.000Z","updated":"2020-01-04T15:20:41.298Z","comments":true,"path":"2019/08/09/后台技术/python-process-excel/","link":"","permalink":"https://www.zucchiniy.cn/hexo-blog/2019/08/09/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/python-process-excel/","excerpt":"简介 利用 read_excel() 的 usecols 参数来指定表的某一列，以方便排除不必要的干扰列 养成数据加载以后，使用 head() 进行预览的习惯 养成使用 shape() 及 info() 了解表格基本情况的习惯 利用 info() 方法查看数据中是否有空值，如果有空值的话，则可以使用 dropna() 方法将其移除。 需要掌握的主要有两个方法: DataFrame.insert() 方法，用来增加对应的列 DataFrame.pivot_table() 产生透视图，展示重要的数据","text":"简介 利用 read_excel() 的 usecols 参数来指定表的某一列，以方便排除不必要的干扰列 养成数据加载以后，使用 head() 进行预览的习惯 养成使用 shape() 及 info() 了解表格基本情况的习惯 利用 info() 方法查看数据中是否有空值，如果有空值的话，则可以使用 dropna() 方法将其移除。 需要掌握的主要有两个方法: DataFrame.insert() 方法，用来增加对应的列 DataFrame.pivot_table() 产生透视图，展示重要的数据 具体方法 DataFrame.insert(self, loc, column, value, allow_duplicates=False) loc : int 表示第几列；0 &lt;= loc &lt;= len(columns)column : string, number, or hashable object;给插入的列取名，如 column=’新的一列’value : int ，array，seriesallow_duplicates : bool 是否允许列名重复，选择 True 表示允许新的列名与已存在的列名重复。 DataFrame.pivot_table(self, values=None, index=None, columns=None, aggfunc=&#39;mean&#39;, fill_value=None, margins=False, dropna=True, margins_name=&#39;All&#39;, observed=False) values : 要进行透视展示的数据index : 需要重新进行展示成列，是原始数据中的某一个行columns : 要重新展示为行的内容，是原来的列或者是其它的属性，可以是列表aggfunc : 要进行统计的行，可以是 numpy.sum / numpy.mean 等，也可以按列进行统计 aggfunc={&#39;c1&#39; : numpy.mean, &#39;c2&#39; : numpy.sum}fill_value : 将缺失值替换的值，幽灵将 Nan 换成 0 : fill_value=0margins : bool, 增加行或者列的汇总信息dropna : bool ，是否要删除为空的信息margin_name : string , 默认为 all ，或者自定义一个名称 observed bool , True 显示分类中的数据，False 显示所有数据，默认为 False 示例代码1234567891011121314151617181920212223242526272829303132333435import pandas as pdfrom datetime import datetimedata = pd.read_excel(r'python_learning.xlsx', usecols=[1, 4, 6, 7, 8, 9, 10, 11, 12], sheet_name='sheetName')data = data[data['合同生效日'] &gt; datetime(2018, 12, 31)]# 按逻辑，将一组数据拆成三组data1 = data[[\"used\", \"loan amount\", \"company1\", \"percent1\"]]data2 = data[[\"used\", \"loan amount\", \"company2\", \"percent2\"]]data3 = data[[\"used\", \"loan amount\", \"company3\", \"percent3\"]]# 将三组内容，重新命名之后合成一个新表data1 = data1.rename(columns=&#123;\"company1\": \"company\", \"percent1\": \"percent\"&#125;)data2 = data2.rename(columns=&#123;\"company2\": \"company\", \"percent2\": \"percent\"&#125;)data3 = data3.rename(columns=&#123;\"company3\": \"company\", \"percent3\": \"percent\"&#125;)data4 = pd.concat([data1, data2, data3], ignore_index=True)# 将数据中的空值清除data4 = data4.dropna()# 插入新的数据# 1. insert() 方法data4.insert(2, \"devide percent\", data4[\"percent\"]/100)data4.insert(5, \"devide amount\", data4[\"loan amount\"]*data4[\"deivide percent\"]/10000, False)# 普通索引方式插入# data4[\"loan divide amount\"] = data4[\"load amount\"]*data4[\"deivide percent\"]/10000# 增加数据透视data5 = data4[['company', 'used', 'loan amount']]data6 = pd.pivot_table(data5, values=\"loan divide amount\", columns=\"used\", index=\"company\", aggfunc='sum', fill_value=0, observed=False).reset_index()print(data6.head())","categories":[{"name":"后台技术","slug":"后台技术","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/"},{"name":"Python","slug":"后台技术/Python","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF/Python/"}],"tags":[{"name":"透视表","slug":"透视表","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/%E9%80%8F%E8%A7%86%E8%A1%A8/"},{"name":"read_excel()","slug":"read-excel","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/read-excel/"}]},{"title":"Emacs Keymap 优先级","slug":"工具环境/emacs-keymap-priority","date":"2019-07-31T01:09:00.000Z","updated":"2020-01-02T09:48:21.600Z","comments":true,"path":"2019/07/31/工具环境/emacs-keymap-priority/","link":"","permalink":"https://www.zucchiniy.cn/hexo-blog/2019/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-keymap-priority/","excerpt":"编写 Emacs 的配置文件，无论如何也不能绕开快捷键，对于快捷键一般都是 define-key 方法来实现按键绑定，但是对于不同的 keymap 拥有不同的优先级，通过 keymap 优先级，可以了解到快捷键间的覆盖关系。 key-translation-map : 最高级，就是把这个键的意义改变了，想使用原来的快捷键，要重新进行绑定 minor-mode-map : 二级，只在 minor mode 激活时启作用，其它时候会被其它的快捷键覆盖掉 local-set-key : 三级，在 major mode 中启作用 global-set-key : 最弱的级别，但是也是最简单的键绑定方式","text":"编写 Emacs 的配置文件，无论如何也不能绕开快捷键，对于快捷键一般都是 define-key 方法来实现按键绑定，但是对于不同的 keymap 拥有不同的优先级，通过 keymap 优先级，可以了解到快捷键间的覆盖关系。 key-translation-map : 最高级，就是把这个键的意义改变了，想使用原来的快捷键，要重新进行绑定 minor-mode-map : 二级，只在 minor mode 激活时启作用，其它时候会被其它的快捷键覆盖掉 local-set-key : 三级，在 major mode 中启作用 global-set-key : 最弱的级别，但是也是最简单的键绑定方式","categories":[{"name":"工具环境","slug":"工具环境","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/"},{"name":"Emacs","slug":"工具环境/Emacs","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/Emacs/"}],"tags":[{"name":"keymap","slug":"keymap","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/keymap/"},{"name":"keybinds","slug":"keybinds","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/keybinds/"}]},{"title":"brew 不常用命令","slug":"工具环境/brew-unused-command","date":"2019-07-31T00:52:00.000Z","updated":"2020-01-04T16:04:45.864Z","comments":true,"path":"2019/07/31/工具环境/brew-unused-command/","link":"","permalink":"https://www.zucchiniy.cn/hexo-blog/2019/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/brew-unused-command/","excerpt":"brew services 命令是用来管理 Mac 系统中后台服务的，比如在 Mac 上安装了 MySQL ，当我希望将这个变成一个后台服务启动的时候，可以使用，有点像 Linux 下的 service 和 systemctl 两个命令。","text":"brew services 命令是用来管理 Mac 系统中后台服务的，比如在 Mac 上安装了 MySQL ，当我希望将这个变成一个后台服务启动的时候，可以使用，有点像 Linux 下的 service 和 systemctl 两个命令。 具体的使用命令也非常简单： 123456brew services list # 查看使用brew安装的服务列表brew services run formula|--all # 启动服务（仅启动不注册）brew services start formula|--all # 启动服务，并注册brew services stop formula|--all # 停止服务，并取消注册brew services restart formula|--all # 重启服务，并注册brew services cleanup # 清除已卸载应用的无用的配置","categories":[{"name":"工具环境","slug":"工具环境","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/"},{"name":"Mac","slug":"工具环境/Mac","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/Mac/"}],"tags":[{"name":"brew","slug":"brew","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/brew/"},{"name":"服务列表","slug":"服务列表","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8/"}]},{"title":"Emacs 中辅助键设置","slug":"工具环境/emacs-hyper-keybinds","date":"2019-07-31T00:50:00.000Z","updated":"2020-01-02T11:31:01.979Z","comments":true,"path":"2019/07/31/工具环境/emacs-hyper-keybinds/","link":"","permalink":"https://www.zucchiniy.cn/hexo-blog/2019/07/31/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-hyper-keybinds/","excerpt":"使用 Emacs 的人，一般都对快捷键的前缀 C 和 M 键不陌生，但其实在 Emacs 中，除了常见的 C 和 M 之外，还有 s 和 H 两个辅助键，但是在不同的操作系统中，辅助键的设置方法也是不一样的，但是我们可以通过在 init.el 文件中设置键位来保证快捷键的一致。 在 windows 系统下 12345678(setq w32-pass-lwindow-to-system nil)(setq w32-lwindow-modifier &#39;super) ; Left Windows key(setq w32-pass-rwindow-to-system nil)(setq w32-rwindow-modifier &#39;super) ; Right Windows key(setq w32-pass-apps-to-system nil)(setq w32-apps-modifier &#39;hyper) ; Menu&#x2F;App key 在 Mac 系统下 1234(setq mac-command-modifier &#39;meta) ; make cmd key do Meta(setq mac-option-modifier &#39;super) ; make opt key do Super(setq mac-control-modifier &#39;control) ; make Control key do Control(setq ns-function-modifier &#39;hyper) ; make Fn key do Hyper","text":"使用 Emacs 的人，一般都对快捷键的前缀 C 和 M 键不陌生，但其实在 Emacs 中，除了常见的 C 和 M 之外，还有 s 和 H 两个辅助键，但是在不同的操作系统中，辅助键的设置方法也是不一样的，但是我们可以通过在 init.el 文件中设置键位来保证快捷键的一致。 在 windows 系统下 12345678(setq w32-pass-lwindow-to-system nil)(setq w32-lwindow-modifier &#39;super) ; Left Windows key(setq w32-pass-rwindow-to-system nil)(setq w32-rwindow-modifier &#39;super) ; Right Windows key(setq w32-pass-apps-to-system nil)(setq w32-apps-modifier &#39;hyper) ; Menu&#x2F;App key 在 Mac 系统下 1234(setq mac-command-modifier &#39;meta) ; make cmd key do Meta(setq mac-option-modifier &#39;super) ; make opt key do Super(setq mac-control-modifier &#39;control) ; make Control key do Control(setq ns-function-modifier &#39;hyper) ; make Fn key do Hyper 在如此配置之后，绑定快捷键过程中，super 对应的是 s 前缀，hyper 对应的是 H 的前缀。 12(global-set-key (kbd &quot;H-b&quot;) &#39;backward-word) ; 绑定的 Hyper 键(global-set-key (kbd &quot;s-b&quot;) &#39;backward-word) ; 绑定的 super 键","categories":[{"name":"工具环境","slug":"工具环境","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/"},{"name":"Emacs","slug":"工具环境/Emacs","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/Emacs/"}],"tags":[{"name":"keymap","slug":"keymap","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/keymap/"},{"name":"super","slug":"super","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/super/"},{"name":"hyper","slug":"hyper","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/hyper/"}]},{"title":"Mac 电脑上使用 Emacs","slug":"工具环境/emacs-in-mac","date":"2019-07-28T19:17:00.000Z","updated":"2020-01-02T09:28:57.834Z","comments":true,"path":"2019/07/29/工具环境/emacs-in-mac/","link":"","permalink":"https://www.zucchiniy.cn/hexo-blog/2019/07/29/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-in-mac/","excerpt":"在 Mac 上使用 Emacs 有两个方案，从 Emacs For Mac OS X 手工下载，然后更新本地，或者是在 homebrew 中增加配置，然后利用 brew upgrade 从 homebrw-emacsmacport 上进行下载和更新。 两种方式获取的 Emacs 有少许不同，具体的见两个项目的简介。 第二种方法的命令如下： 12brew tap railwaycat/emacsmacportbrew install emacs-mac 安装之后，如果要从启动台启动应用，需要在 /applications 和安装位置增加软链接，命令如下 1ln -s /usr/local/opt/emacs-mac/Emacs.app/Applications 这样之后就可以直接在 Alfred 中输入 emacs 直接启动。","text":"在 Mac 上使用 Emacs 有两个方案，从 Emacs For Mac OS X 手工下载，然后更新本地，或者是在 homebrew 中增加配置，然后利用 brew upgrade 从 homebrw-emacsmacport 上进行下载和更新。 两种方式获取的 Emacs 有少许不同，具体的见两个项目的简介。 第二种方法的命令如下： 12brew tap railwaycat/emacsmacportbrew install emacs-mac 安装之后，如果要从启动台启动应用，需要在 /applications 和安装位置增加软链接，命令如下 1ln -s /usr/local/opt/emacs-mac/Emacs.app/Applications 这样之后就可以直接在 Alfred 中输入 emacs 直接启动。","categories":[{"name":"工具环境","slug":"工具环境","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/"},{"name":"Emacs","slug":"工具环境/Emacs","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/Emacs/"}],"tags":[{"name":"install Emacs","slug":"install-Emacs","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/install-Emacs/"},{"name":"Mac OS","slug":"Mac-OS","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/Mac-OS/"}]},{"title":"Android 刷机实践","slug":"工具环境/android-flashboot","date":"2019-04-10T00:44:00.000Z","updated":"2020-01-04T15:14:51.355Z","comments":true,"path":"2019/04/10/工具环境/android-flashboot/","link":"","permalink":"https://www.zucchiniy.cn/hexo-blog/2019/04/10/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/android-flashboot/","excerpt":"获取#在刷机之前，需要在电脑上下载 Android Preview 包，一般我都是到安卓中国 ，这里可以下载最新的包。 手机相对下载包的获取，比较难的是有一部支持最新的安卓系统的手机，一般 Preview 版的系统都是默认支持 Google 自己的手机的。 目前只支持 Pixel 系列的手机，包括 XL 系列。 Pixel n Pixel n XL","text":"获取#在刷机之前，需要在电脑上下载 Android Preview 包，一般我都是到安卓中国 ，这里可以下载最新的包。 手机相对下载包的获取，比较难的是有一部支持最新的安卓系统的手机，一般 Preview 版的系统都是默认支持 Google 自己的手机的。 目前只支持 Pixel 系列的手机，包括 XL 系列。 Pixel n Pixel n XL 刷机刷机目前有两个比较麻烦的地方，第一就是需要安装 adb 的命令，也就是 Android 的功能模块，第二就是需要解锁手机。 adb 配置即将 Android SDK 下载下来，然后将其配置到环境变量中即可 Windows 配置 ANDROID_HOME 变量到环境变量中 配置 %ANDROID_HOME%\\platform-tools 到 path 中 配置 %ANDROID_HOME%\\tools 到 path 中 Linux &amp; Mac打开 profile 文件，默认为 .bash_profile 如果使用的是 zsh 则编辑 .zshrc 文件。 将下面的内容放到 profile 文件中 123ANDROID_HOME=~/developerTools/adt-mac/sdkexport ANDROID_HOMEPATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools MacMac 电脑提供了一个自动安装的内容，可以将 adb 相关的内容直接安装，但是如果是想开发 Android 应用的话，则必须要按上面的方案进行配置。 首先需要先安装 brew ，具体方案见 Homebrew ，或者可以直接看其 GitHub 的主页 Homebrew/brew 。 然后执行下面的命令 1brew cask install android-platform-tools 如果执行刷机的时候，提示 fastboot is too old 则需要重新安装 android-platform-tools , 因为 brew update 更新是不能更新 cask 库的内容的。 1brew cask reinstall android-platform-tools 最后，在命令行中执行 adb devices 不报错刚配置成功。如果配置之后，还依然报错的话，可以检查一下是否在使用过程中，将 USB 调试功能 关闭了。 操作 连接手机 adb devices 获取手机的 device id adb reboot bootloader 进入 bootloader 模式 如果已经解锁了，则进入第8步，如果未解锁则进入第五步 进入到 bootloader 之后，执行 fastboot flashing unlock 如果是 Pixel 2 XL 则执行 fastboot flashing unlock_critical 如果是更早的设备，则需要执行 fastboot oem unlock 进入下载的目录，然后执行 flash-all 脚本，如果是 Windows 则是 flash-all.bat ，其它的则执行 flash-all.sh 执行结束后，手机就已经刷好了，重启就可以使用了 如果执行失败的话，就需要解压目录下的 image 对应的包，然后执行下面的命令 123fastboot flash vendor vendor.imgfastboot flash boot boot.imgfastboot flash system system.img 然后重启手机就可以了。 V 版手机解锁需要刷入一个工具，才能解锁 123adb push dePixel8 /data/local/tmpadb shell chmod 755 /data/local/tmp/dePixel8adb shell /data/local/tmp/dePixel8 然后再执行 adb reboot bootloader 就可以正常解锁了。 dePixel8.zip 下载 判断是否 V 版手机 1adb shell getprop|grep cid 如果出现 VZW_001 就是 V 版手机","categories":[{"name":"工具环境","slug":"工具环境","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/"},{"name":"Android","slug":"工具环境/Android","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/Android/"}],"tags":[{"name":"安卓系统","slug":"安卓系统","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F/"},{"name":"手动更新手机系统","slug":"手动更新手机系统","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%96%B0%E6%89%8B%E6%9C%BA%E7%B3%BB%E7%BB%9F/"}]},{"title":"Emacs 功能键配置","slug":"工具环境/emacs-tips","date":"2019-02-25T22:10:00.000Z","updated":"2020-01-02T09:46:27.583Z","comments":true,"path":"2019/02/26/工具环境/emacs-tips/","link":"","permalink":"https://www.zucchiniy.cn/hexo-blog/2019/02/26/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-tips/","excerpt":"Emacs 和 Vim 最大的就是快捷键的体系不同，在 Emacs 中，快捷键要有对应的控制键配合，才能正常使用，比如打开 Agenda C-c a 一般指的是 Ctrl + c a 而在 Emacs 中，使用的控制键主要有以下几种： 12345s- : supperS- : ShiftM- : Meta &#x2F; AltC- : CtrlH- : Hyper","text":"Emacs 和 Vim 最大的就是快捷键的体系不同，在 Emacs 中，快捷键要有对应的控制键配合，才能正常使用，比如打开 Agenda C-c a 一般指的是 Ctrl + c a 而在 Emacs 中，使用的控制键主要有以下几种： 12345s- : supperS- : ShiftM- : Meta &#x2F; AltC- : CtrlH- : Hyper 其中 Ctrl、Meta/Alt、Shift这几种快捷键比较常见，但是 supper 这个键就比较少见了，而且在键盘上，一般也看不到，所以我们在配置的时候，需要在配置中声明这几个键被绑定在哪些键上。 如果是在 /Windows/ 系统下需要增加如下的配置： 12(setq w32-lwindow-modifier &#39;supper w32-apps-modifier &#39;hyper) 但是如果使用的是 /Mac/ 系统的话要增加如下配置： 1234(setq mac-command-modifier &#39;meta mac-option-modifier &#39;super mac-control-modifier &#39;control ns-function-modifier &#39;hyper) 但是这样的情况又有另外一个问题，需要在特定的系统中使用，所以我们要在对应的配置上增加上对系统的判断，绑定的方案如下： 1234567891011(when sys&#x2F;winntp ;; 经过测试，在 windows 下，window 键是不能修改的 (setq ;;w32-lwindow-modifier &#39;supper w32-apps-modifier &#39;hyper) (w32-register-hot-key [s-t]))(when sys&#x2F;macp (setq mac-command-modifier &#39;meta mac-option-modifier &#39;super mac-control-modifier &#39;control ns-function-modifier &#39;hyper)) 这样我们就可以在不同的系统中正确的使用不同的功能键了。","categories":[{"name":"工具环境","slug":"工具环境","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/"},{"name":"Emacs","slug":"工具环境/Emacs","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/Emacs/"}],"tags":[{"name":"modifier keys","slug":"modifier-keys","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/modifier-keys/"}]},{"title":"让自己生活的更好","slug":"生活总结/3-step-to-better-one","date":"2019-02-11T00:13:00.000Z","updated":"2020-01-04T15:55:36.938Z","comments":true,"path":"2019/02/11/生活总结/3-step-to-better-one/","link":"","permalink":"https://www.zucchiniy.cn/hexo-blog/2019/02/11/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/3-step-to-better-one/","excerpt":"学会早睡想要早睡，需要减少自己的兴奋点，在生活中，如果无法早睡，白天的工作效率也就会降低，可能要拖拉到半夜才完成，这样就成了一个恶性循环了。 我尝试过早睡，但是未必能早起，主要是就算我10点躺下，也不可能在10点半入睡，毕竟手机、pad等等太好玩了。 所以想要早睡的会，要学会给自己降噪。 早一点运动和洗澡，避免淋水让自己重回清醒状态； 调暗室内灯光，尽量用暖色灯； 点燃香薰，或者其它助眠的东西； 阅读简单轻快的小说或者看一些轻松的视频，不要让自己兴奋或者让自己思考； 放下手机；","text":"学会早睡想要早睡，需要减少自己的兴奋点，在生活中，如果无法早睡，白天的工作效率也就会降低，可能要拖拉到半夜才完成，这样就成了一个恶性循环了。 我尝试过早睡，但是未必能早起，主要是就算我10点躺下，也不可能在10点半入睡，毕竟手机、pad等等太好玩了。 所以想要早睡的会，要学会给自己降噪。 早一点运动和洗澡，避免淋水让自己重回清醒状态； 调暗室内灯光，尽量用暖色灯； 点燃香薰，或者其它助眠的东西； 阅读简单轻快的小说或者看一些轻松的视频，不要让自己兴奋或者让自己思考； 放下手机； 努力运动作为已经迈入中年油腻男境界的人来说，其实可以好的，比如给自己更好的身材，就算光头也可以很有型，所以运动是必不可少的，不过现在的我还是先从减肥开始，这里就不会有更多的问题，就是坚持二字，必然会瘦下来。 断舍离生活断舍离“把不用的东西扔掉！” 这是非常简单的几乎所有人都知道的真理，但是在生活中，不用的东西到底是怎么定义的，我现在不用，将来也不会用到的一定是。但是我们怎么知道将来会不会呢？ 所以应该把自己的物欲降低，先从不买或者真正有用或者想用的时候再买，千万不能图打折，图降价而购入一些不需要的东西。 特别是对于自己有吸引力的东西，对我来说，最常购买的东西就是图书，经常看到当当网、京东网、亚马逊有便宜的或者折扣的力收的时候就管不住自己的手，而有一些商家还经常用优惠来吸引人。结果导致了购买了许多的书，但是实际上看的书特别少。 所以在这里，自己定义了一个新的书单，用来记录自己实际读了什么、要读什么，再定一个计划，比如：阅读多少本已购书籍之后再购入新的书籍。 对于一些可能用又不可能不用，或者近一年都不会用的东西都扔掉，这样就可以让我们的家更整洁。等到一年后或许你发现你也不会用这个东西了。或者是再重新购入即可。 思想断舍离除了我们的生活，对于我们的思想也应该 “断舍离” 。 当有了一个想法，如果一直想着，就会把时间和记忆固定在这里，而如果中途又遇到另外的事情，又特别容易将某些事情忘记，所以我们应该选择记下来，用实体的东西代替大脑，这样可以让我们思考更多的东西。 或者我们忽然读到了一篇好文章，但是现在不适合详读，我们可以在这个是时候把文章通过工具记录下来，等有时间了，再重新详读这篇文章。 比如在通勤的路上，会遇到一些比较好的文章，我会利用手机 app 将文章保存到 滴答 清单中，当有时间的时候，将好的文章再重新阅读一遍，或者重新学习一遍。 当然有时候，也会因为懒怠繁忙导致累积了许多内容没有读，最多的时候，滴答的待办清单中有500篇文章要读。 除了这些，还可以把自己心中的那些不满啊、忧愁啊都记下来，这样也可以有效的控制我们的感情，让自己更开心的生活。 这个主要用了两个东西，一个是电子版的笔记系统——Org Mode Journal系统，另外一个就是一个简单的横格本和一支笔就可以手工记录了，具体的可以看一些手帐相关的文章来学习如何简单清晰的记录生活。","categories":[{"name":"生活总结","slug":"生活总结","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/"},{"name":"生活","slug":"生活总结/生活","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"减法生活","slug":"减法生活","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/%E5%87%8F%E6%B3%95%E7%94%9F%E6%B4%BB/"}]},{"title":"apt-get 中 update 与 upgrade 的区别","slug":"工具环境/apt-get-update-and-upgrade","date":"2018-08-02T01:14:00.000Z","updated":"2020-01-02T15:22:06.534Z","comments":true,"path":"2018/08/02/工具环境/apt-get-update-and-upgrade/","link":"","permalink":"https://www.zucchiniy.cn/hexo-blog/2018/08/02/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/apt-get-update-and-upgrade/","excerpt":"update : 更新 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的地址,这样才能获取到最新的软件包。upgrade : 升级已安装的所有软件包，升级之后的版本就是本地地址里的，因此，在执行 upgrade 之前一定要执行 update , 这样才能更新到最新的。","text":"update : 更新 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的地址,这样才能获取到最新的软件包。upgrade : 升级已安装的所有软件包，升级之后的版本就是本地地址里的，因此，在执行 upgrade 之前一定要执行 update , 这样才能更新到最新的。","categories":[{"name":"工具环境","slug":"工具环境","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/"},{"name":"Linux","slug":"工具环境/Linux","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/Linux/"}],"tags":[{"name":"apt-get","slug":"apt-get","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/apt-get/"},{"name":"apt","slug":"apt","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/apt/"}]},{"title":"Ajax 关闭异步请求","slug":"前端开发/ajax-asyn-option","date":"2018-06-19T23:21:00.000Z","updated":"2020-01-02T14:53:10.160Z","comments":true,"path":"2018/06/20/前端开发/ajax-asyn-option/","link":"","permalink":"https://www.zucchiniy.cn/hexo-blog/2018/06/20/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ajax-asyn-option/","excerpt":"在代码中，因为进行了后台的取值操作，导致有些内容还未加载就执行到了新的地方，所以想着 ajax 的异步关闭来解决。 async 设置为 false 的时候，变成同步操作，默认( true )为异步操作。 12345$.ajax(&#123; cache: false, async: false, // 太关键了，学习了，同步和异步的参数&#125;);alert(\"2\");","text":"在代码中，因为进行了后台的取值操作，导致有些内容还未加载就执行到了新的地方，所以想着 ajax 的异步关闭来解决。 async 设置为 false 的时候，变成同步操作，默认( true )为异步操作。 12345$.ajax(&#123; cache: false, async: false, // 太关键了，学习了，同步和异步的参数&#125;);alert(\"2\");","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"ajax","slug":"前端开发/ajax","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ajax/"}],"tags":[{"name":"async","slug":"async","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/async/"},{"name":"异步请求","slug":"异步请求","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/"}]},{"title":"Emacs 学习之旅","slug":"工具环境/emacs-learning-way","date":"2017-03-01T22:38:00.000Z","updated":"2020-01-04T15:16:20.371Z","comments":true,"path":"2017/03/02/工具环境/emacs-learning-way/","link":"","permalink":"https://www.zucchiniy.cn/hexo-blog/2017/03/02/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-learning-way/","excerpt":"Emacs 的使用过程，就像是程序员的生涯一样——路漫漫其修远兮，吾将上下而求索。 万物始于 Emacs最早知道 Emacs 是从编辑器的圣战开始的，即编辑器之神——Vi，和神的编辑器——Emacs。两个编辑器在经历了几十年的战争之后，仍然是编辑世界不可超越的高峰。 但在一开始，我选择的是 Vi，因为在 *nix 中，都是有安装的，在服务器编辑文件——即使是很大的文件，Vi 也可以非常轻易的打开编辑，在一段时间内，我几乎是跪着使用 Vi 的。 后来随着想用的功能越来越多，而 Vi 只能做为编辑器使用，再加上被一些大神安利，我就选择尝试使用 Emacs 来装逼记笔记。于是下载了当时正流行的 Purcell 大神的配置，并开始尝试使用，不过没过多少就放弃了。 期间阅读了许多入门学习的内容，对 Emacs 有了一个大概的了解。 推荐阅读内容： 《一年成为 Emacs 高手（像神一样使用编辑器）》 Prelude 入门级 Emacs 配置 Purcell 大神的配置 Emacs 始于 OrgEmacs 学习的无疾而终，让我的装逼大计一度沉沦。直到我开始尝试利用 Org-mode 进行博客写和作日程管理，阅读了一些文章之后，才真正开始了 Emacs 的学习苦旅。 如果说 Emacs 是神的编辑器的话， Org 可能是神器之中的神器，随着对 Org 的学习和使用，我从最初的装逼，到后来的逼格提升真正开始利用Emacs，都是因为Org-mode 。 推荐阅读内容： mudan 大神的 Org-mode 入门级手册 mudan 大神的漂亮的文言文排版 Tisoga 大神的 Org + GitHub 的博客教学","text":"Emacs 的使用过程，就像是程序员的生涯一样——路漫漫其修远兮，吾将上下而求索。 万物始于 Emacs最早知道 Emacs 是从编辑器的圣战开始的，即编辑器之神——Vi，和神的编辑器——Emacs。两个编辑器在经历了几十年的战争之后，仍然是编辑世界不可超越的高峰。 但在一开始，我选择的是 Vi，因为在 *nix 中，都是有安装的，在服务器编辑文件——即使是很大的文件，Vi 也可以非常轻易的打开编辑，在一段时间内，我几乎是跪着使用 Vi 的。 后来随着想用的功能越来越多，而 Vi 只能做为编辑器使用，再加上被一些大神安利，我就选择尝试使用 Emacs 来装逼记笔记。于是下载了当时正流行的 Purcell 大神的配置，并开始尝试使用，不过没过多少就放弃了。 期间阅读了许多入门学习的内容，对 Emacs 有了一个大概的了解。 推荐阅读内容： 《一年成为 Emacs 高手（像神一样使用编辑器）》 Prelude 入门级 Emacs 配置 Purcell 大神的配置 Emacs 始于 OrgEmacs 学习的无疾而终，让我的装逼大计一度沉沦。直到我开始尝试利用 Org-mode 进行博客写和作日程管理，阅读了一些文章之后，才真正开始了 Emacs 的学习苦旅。 如果说 Emacs 是神的编辑器的话， Org 可能是神器之中的神器，随着对 Org 的学习和使用，我从最初的装逼，到后来的逼格提升真正开始利用Emacs，都是因为Org-mode 。 推荐阅读内容： mudan 大神的 Org-mode 入门级手册 mudan 大神的漂亮的文言文排版 Tisoga 大神的 Org + GitHub 的博客教学 终于 Spacemacs 的战争从最开始的学习，到现在已经习惯于使用 Emacs ，主要因为其确实是可以提升效率的，当然这里要把配置时间拿走。虽然开始使用的原因有所不同，但是大家最后的目标却都是一样的——即提高工作（学习）效率。 但是经过了 Emacs 几次强行配置之后，学习了一些 Emacs 的填坑方案。 后来加入了一个 Emacs 的微信群——毫不夸张的说，这是我加入过的群里面质量最高的，学习效果最好的，而且所有的成员都自发的维护群里的闲聊问题，每一次讨论都是提问解决和讨论的过程。 在偶然的一次机会，被安利了一把 Spacemacs，Vi 的操作加上 Emacs 的扩展，不要太吸引人！ 推荐关注的大神： Hick 高质量 Emacs 微信群群主，应该也是发起人，水的人自觉加入闲聊群，是我所有技术相关微信群中质量最高的。 子龙山人 Spacemacs Rock 视频作者，我的配置里抄的最多的就是这位大神的。 DarkSun 黑日大神，大神的文章非常多，而且质量都非常高，还维护着一个 Emacs 推广相关的项目，多读读，可以找到一些自己需要的配置。 tumashu 天然二呆，呆神，之前看到呆神在闲聊群里水，后来又看到呆神在帮忙解决问题，好奇的关注了一下 GitHub ，才发现，竟然这几个好用的 package 都是呆神写的，而且呆神竟然不是程序员靠程序吃饭！ 大神太多了，不一一推荐，如果需要，可以联系 Hick 加一下群，就都有了。 再推荐一下中文的 Emacs 论坛，可以提问，也可以讨论： Emacs China 一堆大神在维护的论坛，经常看看，非常好用。 我的 Emacs 配置初始为了更好管理配置，推荐使用 .spacemacs.d 文件夹进行管理配置，而不是使用 .spacemacs 文件。也为了方便后续的扩展。 可能会遇到的问题如果是在 Windows 下使用，需要注意几个问题： 推荐用编译版本，或者用官方网站加部分 .dll 文件来解决 使用过程中，为了配置的时候好用——更适合 Linux，我是使用在环境变量中增加默认的 HOME 的方案，也可以使用其它方法 直接下载就可以使用，维护的是 develop 分支，后续会慢慢往 master 分支中合并 最终选择在几经周折之后，最后还是选择自己从头开始配置一套 .emacs.d ，主要是因为以下几个问题： 随着使用的人越来越多，维护的东西也越来越多，项目太大了 最终希望的是使用 Vi 的快捷键方案，可以使用 evil-mode 来替代 个人使用的特性话的内容太多，完全引用项目不如借鉴项目的配置方案 我的 emacs 原生配置 我的博客地址如果想看我的博客，可以访问：hugo博客 或者 hexo博客。","categories":[{"name":"总结思考","slug":"总结思考","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E6%80%BB%E7%BB%93%E6%80%9D%E8%80%83/"},{"name":"Emacs","slug":"总结思考/Emacs","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E6%80%BB%E7%BB%93%E6%80%9D%E8%80%83/Emacs/"}],"tags":[{"name":"Emacs","slug":"Emacs","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/Emacs/"},{"name":"org mode","slug":"org-mode","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/org-mode/"}]},{"title":"Emacs 快捷键使用","slug":"工具环境/emacs-keybinds-basic","date":"2016-04-26T03:12:00.000Z","updated":"2020-01-03T08:11:25.282Z","comments":true,"path":"2016/04/26/工具环境/emacs-keybinds-basic/","link":"","permalink":"https://www.zucchiniy.cn/hexo-blog/2016/04/26/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/emacs-keybinds-basic/","excerpt":"设置 Emacs 的默认编码格式 1(prefer-coding-system &#39;utf-8-unix) 改变文件编码格式 C-x C-m f utf-8-unix RET : 将当前文件转换为 utf-8 编码 C-x C-m c RET C-x C-w RET : 将当前文件另存为指定编码 查看需要的库文件 M-: image-library-alist RET : 查看 emacs 支持需要的库文件","text":"设置 Emacs 的默认编码格式 1(prefer-coding-system &#39;utf-8-unix) 改变文件编码格式 C-x C-m f utf-8-unix RET : 将当前文件转换为 utf-8 编码 C-x C-m c RET C-x C-w RET : 将当前文件另存为指定编码 查看需要的库文件 M-: image-library-alist RET : 查看 emacs 支持需要的库文件 123456789101112((xpm \"libxpm.dll\" \"xpm4.dll\" \"libXpm-nox4.dll\")(png \"libpng16.dll\" \"libpng16-16.dll\")(tiff \"libtiff-5.dll\" \"libtiff3.dll\" \"libtiff.dll\")(jpeg \"libjpeg-9.dll\")(gif \"libgif-7.dll\")(svg \"librsvg-2-2.dll\")(gdk-pixbuf \"libgdk_pixbuf-2.0-0.dll\")(glib \"libglib-2.0-0.dll\")(gobject \"libgobject-2.0-0.dll\")(gnutls \"libgnutls-28.dll\" \"libgnutls-26.dll\")(libxml2 \"libxml2-2.dll\" \"libxml2.dll\")(zlib \"zlib1.dll\" \"libz-1.dll\"))","categories":[{"name":"工具环境","slug":"工具环境","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/"},{"name":"Emacs","slug":"工具环境/Emacs","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/categories/%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83/Emacs/"}],"tags":[{"name":"coding system","slug":"coding-system","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/coding-system/"},{"name":"image library","slug":"image-library","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/image-library/"},{"name":"keybind","slug":"keybind","permalink":"https://www.zucchiniy.cn/hexo-blog/blog/tags/keybind/"}]}]}