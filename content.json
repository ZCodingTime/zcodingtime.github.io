{"meta":{"title":"Z 空间","subtitle":"世事洞明皆学问，人情练达即文章。","description":"喜欢 Python 的靠 Java 和 JavaScript 吃饭的中年人，不谢顶。","author":"zucchiniy","url":"https://www.zucchiniy.cn","root":"/"},"pages":[{"title":"关于","date":"2019-12-23T07:29:10.000Z","updated":"2019-12-23T07:29:10.000Z","comments":true,"path":"about/index.html","permalink":"https://www.zucchiniy.cn/about/index.html","excerpt":"","text":"个人信息 Dylan Yang 邮箱：banshiliuli1990@sina.com 技术博客：https://www.zucchiniy.cn github：https://github.com/zucchiniy Emacs 用户，喜欢学习，喜欢折腾 重度手残，五笔用户 学习 Python 中希望能成为 Pythonista 。 技能清单以下内容评级按照 简历中的水平 进行评定 熟悉 Linux 系统 熟悉 Mac、Linux 下的环境配置 熟悉 MySQL 了解 Java、C、C++ 熟练使用 Vim、Emacs 熟悉 Python 并努力上升到熟练中"},{"title":"","date":"2019-12-23T07:23:12.167Z","updated":"2019-12-23T07:23:12.167Z","comments":true,"path":"projects/index.html","permalink":"https://www.zucchiniy.cn/projects/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-12-23T07:16:54.303Z","updated":"2019-12-23T07:16:54.303Z","comments":true,"path":"blog/tags/index.html","permalink":"https://www.zucchiniy.cn/blog/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2019-12-23T07:16:06.278Z","updated":"2019-12-23T07:16:06.278Z","comments":true,"path":"blog/categories/index.html","permalink":"https://www.zucchiniy.cn/blog/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Valine 评论使用报错 504","slug":"valine-504-error","date":"2019-12-19T09:50:20.000Z","updated":"2019-12-27T02:57:16.635Z","comments":true,"path":"2019/12/19/valine-504-error/","link":"","permalink":"https://www.zucchiniy.cn/2019/12/19/valine-504-error/","excerpt":"最近准备重新配置一下 个人博客 ，由原来的 Hugo 改到 Hexo 来做。 评论系统也由之前的 disqus 改成现在的 valine 。 主题也使用了非常好看的 Material Design 的样式的 Material-x ，并在此之上进行修改。 完成初始的配置之后，做一下测试。 恩。。。报错了？！","text":"最近准备重新配置一下 个人博客 ，由原来的 Hugo 改到 Hexo 来做。 评论系统也由之前的 disqus 改成现在的 valine 。 主题也使用了非常好看的 Material Design 的样式的 Material-x ，并在此之上进行修改。 完成初始的配置之后，做一下测试。 恩。。。报错了？！ 虽然报错，但是可以正确的显示对应的服务，查询了一下原因，发现是因为长时间未使用 LeanCode 的服务，导致文件上传域名无法访问了，需要在 设置-&gt;应用 Keys 下面，选择重启 文件上传域名 和 文件访问域名 的服务即可。 具体的位置如下：","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://www.zucchiniy.cn/blog/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.zucchiniy.cn/blog/tags/hexo/"},{"name":"valine","slug":"valine","permalink":"https://www.zucchiniy.cn/blog/tags/valine/"},{"name":"Code 504","slug":"Code-504","permalink":"https://www.zucchiniy.cn/blog/tags/Code-504/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-12-18T08:16:08.941Z","updated":"2019-12-18T08:16:08.941Z","comments":true,"path":"2019/12/18/hello-world/","link":"","permalink":"https://www.zucchiniy.cn/2019/12/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"emacs/emacs-keymap-priority","slug":"emacs/emacs-keymap-priority","date":"2019-11-21T03:20:30.369Z","updated":"2019-11-21T03:20:30.369Z","comments":true,"path":"2019/11/21/emacs/emacs-keymap-priority/","link":"","permalink":"https://www.zucchiniy.cn/2019/11/21/emacs/emacs-keymap-priority/","excerpt":"","text":"+++title = “Emacs Keymap 优先级”author = [“Dylan Yang”]date = 2019-07-31T17:09:00+08:00tags = [“keybinds”, “priority”]categories = [“Emacs”]draft = false+++ 编写 Emacs 的配置文件，无论如何也不能绕开快捷键，对于快捷键一般都是define-key 来实现绑定，但是对于不同的 keymap 拥有不同的优先级，了解了这个，就知道了为什么有时候快捷键不启作用了。 key-translation-map最高级，就是把这个键的意义改变了，想使用原来的快捷键，要重新进行绑定minor-mode-map二级，只在 minor mode 激活时启作用，其它时候会被其它的快捷键覆盖掉local-set-key三级，在 major mode 中启作用global-set-key最弱的级别，但是也是遇简单的方式","categories":[],"tags":[]},{"title":"emacs/emacs-learning-way","slug":"emacs/emacs-learning-way","date":"2019-11-21T03:20:30.369Z","updated":"2019-12-24T09:27:27.378Z","comments":true,"path":"2019/11/21/emacs/emacs-learning-way/","link":"","permalink":"https://www.zucchiniy.cn/2019/11/21/emacs/emacs-learning-way/","excerpt":"","text":"title = “Emacs 学习之旅”author = [“Dylan Yang”]date = 2017-03-02T14:38:00+08:00tags = [“Emacs”]categories = [“随笔”]draft = false Emacs 的使用过程，就像是程序员的生涯一样——路漫漫其修远兮，吾将上下而求索。 万物始于 Emacs最早知道 Emacs 是从编辑器的圣战开始的，即编辑器之神——Vi，和神的编辑器——Emacs。两个编辑器在经历了几十年的战争之后，仍然是编辑世界不可超越的高峰。 但在一开始，我选择的是 Vi，因为在 *nix 中，基本都是有的，在服务器编辑文件——即使是很大的文件，Vi 也可以非常容易的使用，所以在一段时间内，我几乎是跪着使用 Vi 的。 后来随着想用的功能越来越多，而被一些大神安利，我就选择了使用 Emacs 来记笔记（装逼）。于是下载了当时正流行的 Purcell 大神的配置，并开始尝试使用，不过没过多少就放弃了。 推荐内容： 《一年成为 Emacs 高手（像神一样使用编辑器）》 Prelude 入门级 Emacs 配置 Purcell 大神的配置 Emacs 始于 OrgEmacs 学习的无疾而终，让我的装逼大计一度沉沦。直到我看到另外两个大神，利用 Org-mode 进行博客写作日程管理，并详细阅读了他们的文章之后，才真正开始了 Emacs 的学习苦旅。 如果说 Emacs 是神的编辑器的话， Org 可能是神器之中的神器，随着对 Org 的学习和使用，我从最初的装逼，到后来的逼格提升，都是因为 Org-mode 。 推荐内容： mudan 大神的 Org-mode 入门级手册 mudan 大神的漂亮的文言文排版 Tisoga 大神的 Org + GitHub 的博客教学 终于 Spacemacs 的战争从最开始的学习，到现在已经习惯于使用 Emacs 的人来说，Emacs 确实是可以提升工具效率的，当然这里要把配置他的时间拿走。虽然开始使用的原因有所不同，但是大家最后的目标却都是一样的——提高工作（学习）效率。 但是经过了 Emacs 几次配置之后，虽然说不上大神，也就知道了一些 Emacs 的坑是如何解决的。 后来加入了一个 Emacs 的微信群——毫不夸张的说，这是我加入过的群里面质量最高的，学习效果最好的，而且所有的成员都自发的维护群里的闲聊问题，每一次讨论都是提问解决和讨论的过程。 在偶然的一次机会，被安利了一把 Spacemacs，Vi 的操作加上 Emacs 的扩展，不要太吸引人！ 推荐关注的大神： Hick 高质量 Emacs 微信群群主，应该也是发起人，水的人自觉加入闲聊群，是我所有技术相关微信群中质量最高的。 子龙山人 Spacemacs Rock 视频作者，我的配置里抄的最多的就是这位大神的。 DarkSun 黑日大神，大神的文章非常好，多读读，可以找到一些自己需要的配置。 tumashu 天然二呆，呆神，之前看到呆神在闲聊群里水，后来又看到呆神在帮忙解决问题，好奇的关注了一下 GitHub ，才发现，竟然这几个好用的 package都是呆神写的，而且呆神竟然不是程序员！ 大神太多了，不一一推荐，如果需要，可以联系 Hick 加一下群，就都有了。 再推荐一下中文的 Emacs 论坛，可以提问，也可以讨论： Emacs China 一堆大神在维护的论坛，经常看看，非常好用 语乱的 Spacemacs 配置初始为了更好管理配置，推荐使用 .spacemacs.d 文件夹进行管理配置，而不是使用.spacemacs 文件。也为了方便后续的扩展。 可能会遇到的问题如果是在 Windows 下使用，需要注意几个问题： 推荐用编译版本，或者用官方网站加部分 .dll 文件来解决 使用过程中，为了配置的时候好用——更适合 Linux，我是使用在环境变量中增加默认的 HOME 的方案，也可以使用其它方法 直接下载就可以使用，维护的是 develop 分支，后续会慢慢往 master分支中合并 最终选择在几经周折之后，最后还是选择自己从头开始配置一套 .emacs.d 的内容，但是 .spacemacs.d 的相关内容也没有清楚。 我的 emacs 原生配置 我的博客地址如果想看我的博客，可以访问：我的博客地址","categories":[],"tags":[]},{"title":"Emacs 中辅助键设置","slug":"emacs/emacs-hyper-keybinds","date":"2019-07-31T00:50:00.000Z","updated":"2019-12-27T02:59:27.248Z","comments":true,"path":"2019/07/31/emacs/emacs-hyper-keybinds/","link":"","permalink":"https://www.zucchiniy.cn/2019/07/31/emacs/emacs-hyper-keybinds/","excerpt":"使用 Emacs 的人，一般都对快捷键的前缀 C 和 M 键不陌生，但其实在 Emacs 中，除了常见的 C 和 M 之外，还有 s 和 H 两个辅助键，但是在不同的操作系统中，辅助键的设置方法也是不一样的，但是我们可以通过在 init.el 文件中设置键位来保证快捷键的一致。 在 windows 系统下 12345678(setq w32-pass-lwindow-to-system nil)(setq w32-lwindow-modifier &#39;super) ; Left Windows key(setq w32-pass-rwindow-to-system nil)(setq w32-rwindow-modifier &#39;super) ; Right Windows key(setq w32-pass-apps-to-system nil)(setq w32-apps-modifier &#39;hyper) ; Menu&#x2F;App key 在 Mac 系统下 1234(setq mac-command-modifier &#39;meta) ; make cmd key do Meta(setq mac-option-modifier &#39;super) ; make opt key do Super(setq mac-control-modifier &#39;control) ; make Control key do Control(setq ns-function-modifier &#39;hyper) ; make Fn key do Hyper","text":"使用 Emacs 的人，一般都对快捷键的前缀 C 和 M 键不陌生，但其实在 Emacs 中，除了常见的 C 和 M 之外，还有 s 和 H 两个辅助键，但是在不同的操作系统中，辅助键的设置方法也是不一样的，但是我们可以通过在 init.el 文件中设置键位来保证快捷键的一致。 在 windows 系统下 12345678(setq w32-pass-lwindow-to-system nil)(setq w32-lwindow-modifier &#39;super) ; Left Windows key(setq w32-pass-rwindow-to-system nil)(setq w32-rwindow-modifier &#39;super) ; Right Windows key(setq w32-pass-apps-to-system nil)(setq w32-apps-modifier &#39;hyper) ; Menu&#x2F;App key 在 Mac 系统下 1234(setq mac-command-modifier &#39;meta) ; make cmd key do Meta(setq mac-option-modifier &#39;super) ; make opt key do Super(setq mac-control-modifier &#39;control) ; make Control key do Control(setq ns-function-modifier &#39;hyper) ; make Fn key do Hyper 在如此配置之后，绑定快捷键过程中，super 对应的是 s 前缀，hyper 对应的是 H 的前缀。 12(global-set-key (kbd &quot;H-b&quot;) &#39;backward-word) ; 绑定的 Hyper 键(global-set-key (kbd &quot;s-b&quot;) &#39;backward-word) ; 绑定的 super 键","categories":[{"name":"Emacs","slug":"Emacs","permalink":"https://www.zucchiniy.cn/blog/categories/Emacs/"}],"tags":[{"name":"super","slug":"super","permalink":"https://www.zucchiniy.cn/blog/tags/super/"},{"name":"hyper","slug":"hyper","permalink":"https://www.zucchiniy.cn/blog/tags/hyper/"}]},{"title":"Mac 电脑上使用 Emacs","slug":"emacs/emacs-in-mac","date":"2019-07-28T19:17:00.000Z","updated":"2019-12-27T01:19:56.007Z","comments":true,"path":"2019/07/29/emacs/emacs-in-mac/","link":"","permalink":"https://www.zucchiniy.cn/2019/07/29/emacs/emacs-in-mac/","excerpt":"在 Mac 上使用 Emacs 有两个方案，从 Emacs For Mac OS X 手工下载，然后更新本地，或者是在 homebrew 中增加配置，然后利用 brew upgrade 从 homebrw-emacsmacport 上进行下载和更新。 两种方式获取的 Emacs 有少许不同，具体的见两个项目的简介。 第二种方法的命令如下： 12brew tap railwaycat/emacsmacportbrew install emacs-mac 安装之后，如果要从启动台启动应用，需要在 /applications 和安装位置增加软链接，命令如下 1ln -s /usr/local/opt/emacs-mac/Emacs.app/Applications 这样之后就可以直接在 Alfred 中输入 emacs 直接启动。","text":"在 Mac 上使用 Emacs 有两个方案，从 Emacs For Mac OS X 手工下载，然后更新本地，或者是在 homebrew 中增加配置，然后利用 brew upgrade 从 homebrw-emacsmacport 上进行下载和更新。 两种方式获取的 Emacs 有少许不同，具体的见两个项目的简介。 第二种方法的命令如下： 12brew tap railwaycat/emacsmacportbrew install emacs-mac 安装之后，如果要从启动台启动应用，需要在 /applications 和安装位置增加软链接，命令如下 1ln -s /usr/local/opt/emacs-mac/Emacs.app/Applications 这样之后就可以直接在 Alfred 中输入 emacs 直接启动。","categories":[{"name":"Emacs","slug":"Emacs","permalink":"https://www.zucchiniy.cn/blog/categories/Emacs/"},{"name":"Mac","slug":"Emacs/Mac","permalink":"https://www.zucchiniy.cn/blog/categories/Emacs/Mac/"}],"tags":[],"author":["Dylan Yang"]},{"title":"Emacs 功能键配置","slug":"emacs/emacs-tips","date":"2019-02-25T22:10:00.000Z","updated":"2019-12-24T09:32:46.323Z","comments":true,"path":"2019/02/26/emacs/emacs-tips/","link":"","permalink":"https://www.zucchiniy.cn/2019/02/26/emacs/emacs-tips/","excerpt":"Emacs 和 Vim 最大的就是快捷键的体系不同，在 Emacs 中，快捷键要有对应的控制键配合，才能正常使用，比如打开 Agenda C-c a 一般指的是 Ctrl + c a 而在 Emacs 中，使用的控制键主要有以下几种： 12345s- : supper -S- : Shift -M- : Meta - &#x2F; Alt -C- : Ctrl -H- : Hyper -","text":"Emacs 和 Vim 最大的就是快捷键的体系不同，在 Emacs 中，快捷键要有对应的控制键配合，才能正常使用，比如打开 Agenda C-c a 一般指的是 Ctrl + c a 而在 Emacs 中，使用的控制键主要有以下几种： 12345s- : supper -S- : Shift -M- : Meta - &#x2F; Alt -C- : Ctrl -H- : Hyper - 其中 Ctrl、Meta/Alt、Shift这几种快捷键比较常见，但是 supper 这个键就比较少见了，而且在键盘上，一般也看不到，所以我们在配置的时候，需要在配置中声明这几个键被绑定在哪些键上，增加如下的配置： 12(setq w32-lwindow-modifier &#39;supper w32-apps-modifier &#39;hyper) 但是如果使用的是 mac 的话又要增加另外的一些配置： 1234(setq mac-command-modifier &#39;meta mac-option-modifier &#39;super mac-control-modifier &#39;control ns-function-modifier &#39;hyper) 但是这样的情况又有另外一个问题，需要在特定的系统中使用，所以我们要在对应的配置上增加上对系统的判断。这样就可以自由的使用各种快捷键了。","categories":[{"name":"Emacs","slug":"Emacs","permalink":"https://www.zucchiniy.cn/blog/categories/Emacs/"}],"tags":[{"name":"功能键","slug":"功能键","permalink":"https://www.zucchiniy.cn/blog/tags/%E5%8A%9F%E8%83%BD%E9%94%AE/"}],"author":["Dylan Yang"]},{"title":"Emacs 快捷键使用","slug":"emacs/emacs-keybinds-basic","date":"2016-04-26T03:12:00.000Z","updated":"2019-12-27T01:27:10.903Z","comments":true,"path":"2016/04/26/emacs/emacs-keybinds-basic/","link":"","permalink":"https://www.zucchiniy.cn/2016/04/26/emacs/emacs-keybinds-basic/","excerpt":"","text":"本文主要详解如何设置 Emacs 的默认编码格式和改变文件格式，以及如何查看图片所需要的库文件。 设置 Emacs 的默认编码格式1(prefer-coding-system &#39;utf-8-unix) 改变文件编码格式C-x C-m f utf-8-unix RET将当前文件转换为 utf-8 编码C-x C-m c RET C-x C-w RET另存为指定编码查看需要的库文件M-: image-library-alist RET查看 emacs 支持需要的库文件123456789101112((xpm &quot;libxpm.dll&quot; &quot;xpm4.dll&quot; &quot;libXpm-nox4.dll&quot;)(png &quot;libpng16.dll&quot; &quot;libpng16-16.dll&quot;)(tiff &quot;libtiff-5.dll&quot; &quot;libtiff3.dll&quot; &quot;libtiff.dll&quot;)(jpeg &quot;libjpeg-9.dll&quot;)(gif &quot;libgif-7.dll&quot;)(svg &quot;librsvg-2-2.dll&quot;)(gdk-pixbuf &quot;libgdk_pixbuf-2.0-0.dll&quot;)(glib &quot;libglib-2.0-0.dll&quot;)(gobject &quot;libgobject-2.0-0.dll&quot;)(gnutls &quot;libgnutls-28.dll&quot; &quot;libgnutls-26.dll&quot;)(libxml2 &quot;libxml2-2.dll&quot; &quot;libxml2.dll&quot;)(zlib &quot;zlib1.dll&quot; &quot;libz-1.dll&quot;))","categories":[{"name":"Emacs","slug":"Emacs","permalink":"https://www.zucchiniy.cn/blog/categories/Emacs/"}],"tags":[{"name":"keybind","slug":"keybind","permalink":"https://www.zucchiniy.cn/blog/tags/keybind/"}],"author":["Dylan Yang"]}]}